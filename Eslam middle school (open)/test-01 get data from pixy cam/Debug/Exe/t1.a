;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 03/09/2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16A
;Program type            : Application
;AVR Core Clock frequency: 8/000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// I2C Bus functions
;#include <i2c.h>
;
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 002D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002E ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002F // Delay needed for the stabilization of the ADC input voltage
; 0000 0030 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0031 // Start the AD conversion
; 0000 0032 ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0033 // Wait for the AD conversion to complete
; 0000 0034 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0035 ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0036 return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0037 }
;PCODE: $00000021 VOL: 0
;
;#define I2C_7BIT_DEVICE_ADDRESS 0x54
;#define EEPROM_BUS_ADDRESS (I2C_7BIT_DEVICE_ADDRESS << 1)
;
;unsigned int address=0x54;
;unsigned char read()
; 0000 003E {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003F unsigned char data;
; 0000 0040 i2c_start();
;PCODE: $00000024 VOL: 0
;	data -> R17
;PCODE: $00000025 VOL: 0
; 0000 0041 i2c_write(EEPROM_BUS_ADDRESS | 0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0042 i2c_write(address >> 8);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0043 i2c_write((unsigned char) address);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0044 i2c_start();
;PCODE: $0000002C VOL: 0
; 0000 0045 i2c_write(EEPROM_BUS_ADDRESS | 1);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0046 data=i2c_read(0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0047 i2c_stop();
;PCODE: $00000032 VOL: 0
; 0000 0048 return data;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0049 }
;PCODE: $00000036 VOL: 0
;
;int cnt0=0,x,y,width,height,checksum,signature, sharpback, sharpright, sharpleft,k,cnt1=0,cnt2=0;
;int v=255;

	.DSEG
;unsigned char a;
;
;int cmp,c;
;#define EEPROM_BUS_ADDRESS 0xc0
;/* read/ a byte from the EEPROM */
;unsigned char compass_read(unsigned char address)
; 0000 0053     {

	.CSEG
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0054     unsigned char data;
; 0000 0055     i2c_start();
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;	address -> Y+1
;	data -> R17
;PCODE: $0000003B VOL: 0
; 0000 0056     i2c_write(EEPROM_BUS_ADDRESS);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0057     i2c_write(address);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0058     i2c_start();
;PCODE: $00000040 VOL: 0
; 0000 0059     i2c_write(EEPROM_BUS_ADDRESS | 1);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 005A     data=i2c_read(0);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005B     i2c_stop();
;PCODE: $00000046 VOL: 0
; 0000 005C     return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 005D     }
;PCODE: $0000004C VOL: 0
;
;
;
;
;
;void read_cmp()
; 0000 0064     {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0065     cmp=compass_read(1)-c;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0066     if(cmp<0)    cmp=cmp;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0067     if(cmp>128)  cmp=cmp-255;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0068     if(cmp<-128) cmp=cmp+255;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0069     if(cmp>=0){
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 006A         lcd_gotoxy(0,1);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 006B         lcd_putchar('+');
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 006C         lcd_putchar((cmp/100)%10+'0');
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 006D         lcd_putchar((cmp/10)%10+'0');
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006E         lcd_putchar((cmp/1)%10+'0');
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 006F         }
; 0000 0070     else if(cmp<0){
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0071         lcd_gotoxy(0,1);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0072         lcd_putchar('-');
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0073         lcd_putchar((-cmp/100)%10+'0');
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0074         lcd_putchar((-cmp/10)%10+'0');
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0075         lcd_putchar((-cmp/1)%10+'0');
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0076         }
; 0000 0077     cmp*=-2;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0078 
; 0000 0079 
; 0000 007A     sharpback=read_adc(7);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 007B     lcd_gotoxy(5,1);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 007C     lcd_putchar((sharpback/100)%10+'0');
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 007D     lcd_putchar((sharpback/10)%10+'0');
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 007E     lcd_putchar((sharpback/1)%10+'0');
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 007F 
; 0000 0080     sharpleft=read_adc(6);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0081     lcd_gotoxy(9,1);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0082     lcd_putchar((sharpleft/100)%10+'0');
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0083     lcd_putchar((sharpleft/10)%10+'0');
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0084     lcd_putchar((sharpleft/1)%10+'0');
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0085 
; 0000 0086     sharpright=read_adc(5);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0087     lcd_gotoxy(13,1);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0088     lcd_putchar((sharpright/100)%10+'0');
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0089     lcd_putchar((sharpright/10)%10+'0');
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 008A     lcd_putchar((sharpright/1)%10+'0');
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 008B 
; 0000 008C     k=sharpleft-sharpright;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 008D     if(k<60 && k>-60)   k=0;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 008E //    lcd_gotoxy(11,0);
; 0000 008F //    lcd_putchar((k/100)%10+'0');
; 0000 0090 //    lcd_putchar((k/10)%10+'0');
; 0000 0091 //    lcd_putchar((k/1)%10+'0');
; 0000 0092     }
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;
;void motor(int ML1,int ML2,int MR2,int MR1)
; 0000 0095     {
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0096     if(MR1>255)   MR1=255;
;PCODE: $0000012C VOL: 0
;	ML1 -> Y+6
;	ML2 -> Y+4
;	MR2 -> Y+2
;	MR1 -> Y+0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0097     if(MR1<-255)  MR1=-255;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0098     if(MR2>255)   MR2=255;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0099     if(MR2<-255)  MR2=-255;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 009A     if(ML2>255)   ML2=255;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 009B     if(ML2<-255)  ML2=-255;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 009C     if(ML1>255)   ML1=255;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 009D     if(ML1<-255)  ML1=-255;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 009E 
; 0000 009F     ///////////////////////////////////////////////////////////////////////MR1
; 0000 00A0 
; 0000 00A1     if (MR1>0)
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00A2     {
; 0000 00A3     PORTD.6=0;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00A4     OCR0=MR1;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00A5     }
; 0000 00A6     else if(MR1<=0)
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00A7     {
; 0000 00A8     PORTD.6=1;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00A9     OCR0=255+MR1;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00AA     }
; 0000 00AB     /////////////////////////////////////////////////////////////////////////MR2
; 0000 00AC     if (MR2>0)
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00AD     {
; 0000 00AE     PORTD.1=0;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00AF     OCR1B=MR2;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00B0     }
; 0000 00B1     else if(MR2<=0)
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00B2     {
; 0000 00B3     PORTD.1=1;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00B4     OCR1B=255+MR2;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00B5     }
; 0000 00B6     ////////////////////////////////////////////////////////////////////////ML2
; 0000 00B7     if (ML2>0)
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00B8     {
; 0000 00B9     PORTD.2=0;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00BA     OCR1A=ML2;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00BB     }
; 0000 00BC     else if(ML2<=0)
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00BD     {
; 0000 00BE     PORTD.2=1;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00BF     OCR1A=255+ML2;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00C0     }
; 0000 00C1     ///////////////////////////////////////////////////////////////////////ML1
; 0000 00C2     if(ML1>0)
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00C3     {
; 0000 00C4     PORTD.3=0;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00C5     OCR2=ML1;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00C6     }
; 0000 00C7     else if(ML1<=0)
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00C8     {
; 0000 00C9     PORTD.3=1;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00CA     OCR2=255+ML1;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00CB     }
; 0000 00CC     }
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;
;
;
;void main(void)
; 0000 00D1 {
;PCODE: $000001AC VOL: 0
; 0000 00D2 // Declare your local variables here
; 0000 00D3 
; 0000 00D4 // Input/Output Ports initialization
; 0000 00D5 // Port A initialization
; 0000 00D6 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00D7 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 00D8 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00D9 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00DA 
; 0000 00DB // Port B initialization
; 0000 00DC // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00DD DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 00DE // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 00DF PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 00E0 
; 0000 00E1 // Port C initialization
; 0000 00E2 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 00E3 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 00E4 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 00E5 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00E6 
; 0000 00E7 // Port D initialization
; 0000 00E8 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00E9 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 00EA // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 00EB PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00EC 
; 0000 00ED // Timer/Counter 0 initialization
; 0000 00EE // Clock source: System Clock
; 0000 00EF // Clock value: 125/000 kHz
; 0000 00F0 // Mode: Fast PWM top=0xFF
; 0000 00F1 // OC0 output: Non-Inverted PWM
; 0000 00F2 // Timer Period: 2/048 ms
; 0000 00F3 // Output Pulse(s):
; 0000 00F4 // OC0 Period: 2/048 ms Width: 0 us
; 0000 00F5 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00F6 TCNT0=0x00;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00F7 OCR0=0x00;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00F8 
; 0000 00F9 // Timer/Counter 1 initialization
; 0000 00FA // Clock source: System Clock
; 0000 00FB // Clock value: 125/000 kHz
; 0000 00FC // Mode: Fast PWM top=0x00FF
; 0000 00FD // OC1A output: Non-Inverted PWM
; 0000 00FE // OC1B output: Non-Inverted PWM
; 0000 00FF // Noise Canceler: Off
; 0000 0100 // Input Capture on Falling Edge
; 0000 0101 // Timer Period: 2/048 ms
; 0000 0102 // Output Pulse(s):
; 0000 0103 // OC1A Period: 2/048 ms Width: 0 us// OC1B Period: 2/048 ms Width: 0 us
; 0000 0104 // Timer1 Overflow Interrupt: Off
; 0000 0105 // Input Capture Interrupt: Off
; 0000 0106 // Compare A Match Interrupt: Off
; 0000 0107 // Compare B Match Interrupt: Off
; 0000 0108 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0109 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 010A TCNT1H=0x00;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 010B TCNT1L=0x00;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 010C ICR1H=0x00;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 010D ICR1L=0x00;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 010E OCR1AH=0x00;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 010F OCR1AL=0x00;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0110 OCR1BH=0x00;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0111 OCR1BL=0x00;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0112 
; 0000 0113 // Timer/Counter 2 initialization
; 0000 0114 // Clock source: System Clock
; 0000 0115 // Clock value: 125/000 kHz
; 0000 0116 // Mode: Fast PWM top=0xFF
; 0000 0117 // OC2 output: Non-Inverted PWM
; 0000 0118 // Timer Period: 2/048 ms
; 0000 0119 // Output Pulse(s):
; 0000 011A // OC2 Period: 2/048 ms Width: 0 us
; 0000 011B ASSR=0<<AS2;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 011C TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 011D TCNT2=0x00;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 011E OCR2=0x00;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 011F 
; 0000 0120 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0121 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0122 
; 0000 0123 // External Interrupt(s) initialization
; 0000 0124 // INT0: Off
; 0000 0125 // INT1: Off
; 0000 0126 // INT2: Off
; 0000 0127 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0128 MCUCSR=(0<<ISC2);
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0129 
; 0000 012A // USART initialization
; 0000 012B // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 012C // USART Receiver: On
; 0000 012D // USART Transmitter: Off
; 0000 012E // USART Mode: Asynchronous
; 0000 012F // USART Baud Rate: 9600
; 0000 0130 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0131 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0132 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 0133 UBRRH=0x00;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 0134 UBRRL=0x33;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0135 
; 0000 0136 // Analog Comparator initialization
; 0000 0137 // Analog Comparator: Off
; 0000 0138 // The Analog Comparator's positive input is
; 0000 0139 // connected to the AIN0 pin
; 0000 013A // The Analog Comparator's negative input is
; 0000 013B // connected to the AIN1 pin
; 0000 013C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 013D 
; 0000 013E // ADC initialization
; 0000 013F // ADC Clock frequency: 125/000 kHz
; 0000 0140 // ADC Voltage Reference: AVCC pin
; 0000 0141 // ADC Auto Trigger Source: ADC Stopped
; 0000 0142 ADMUX=ADC_VREF_TYPE;
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0143 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0144 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0145 
; 0000 0146 // SPI initialization
; 0000 0147 // SPI disabled
; 0000 0148 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0149 
; 0000 014A // TWI initialization
; 0000 014B // TWI disabled
; 0000 014C TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 014D 
; 0000 014E // Bit-Banged I2C Bus initialization
; 0000 014F // I2C Port: PORTB
; 0000 0150 // I2C SDA bit: 1
; 0000 0151 // I2C SCL bit: 0
; 0000 0152 // Bit Rate: 100 kHz
; 0000 0153 // Note: I2C settings are specified in the
; 0000 0154 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 0155 i2c_init();
;PCODE: $000001FB VOL: 0
; 0000 0156 
; 0000 0157 // Alphanumeric LCD initialization
; 0000 0158 // Connections are specified in the
; 0000 0159 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 015A // RS - PORTC Bit 0
; 0000 015B // RD - PORTC Bit 1
; 0000 015C // EN - PORTC Bit 2
; 0000 015D // D4 - PORTC Bit 4
; 0000 015E // D5 - PORTC Bit 5
; 0000 015F // D6 - PORTC Bit 6
; 0000 0160 // D7 - PORTC Bit 7
; 0000 0161 // Characters/line: 16
; 0000 0162 lcd_init(16);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0163 
; 0000 0164 c=compass_read(1);
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0165 delay_ms(3000);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 0166 c=compass_read(1);
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0167 cnt1=0;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0168 cmp=0;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0169 
; 0000 016A while (1)
;PCODE: $0000020C VOL: 0
; 0000 016B       {
; 0000 016C       // Place `your code here
; 0000 016D       read_cmp();
;PCODE: $0000020D VOL: 0
; 0000 016E       a=read();
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 016F       lcd_gotoxy(0,0);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0170       lcd_putchar((a/100)%10+'0');
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0171       lcd_putchar((a/10)%10+'0');
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0172       lcd_putchar((a/1)%10+'0');
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0173 
; 0000 0174 
; 0000 0175       }}/*read_cmp();
; 0000 0176       a=read();
; 0000 0177       if(a==0xaa)
; 0000 0178         {
; 0000 0179         a=read();
; 0000 017A         if(a==0x55){
; 0000 017B         read();
; 0000 017C         checksum = read();
; 0000 017D         checksum += read() * 255;
; 0000 017E         signature = read();
; 0000 017F         signature += read() * 255;
; 0000 0180         x = read();
; 0000 0181         x+=read()*255;
; 0000 0182         y = read();
; 0000 0183         y += read() * 255;
; 0000 0184         width = read();
; 0000 0185         width += read() * 255;
; 0000 0186         height = read();
; 0000 0187         height += read() * 255;
; 0000 0188         cnt0=0;
; 0000 0189         }}
; 0000 018A       lcd_gotoxy(0,0);
; 0000 018B       lcd_putchar(signature%10+'0');
; 0000 018C 
; 0000 018D       lcd_gotoxy(2,0);
; 0000 018E       lcd_putchar((x/100)%10+'0');
; 0000 018F       lcd_putchar((x/10)%10+'0');
; 0000 0190       lcd_putchar((x/1)%10+'0');
; 0000 0191 
; 0000 0192       lcd_gotoxy(6,0);
; 0000 0193       lcd_putchar((y/100)%10+'0');
; 0000 0194       lcd_putchar((y/10)%10+'0');
; 0000 0195       lcd_putchar((y/1)%10+'0');
; 0000 0196 
; 0000 0197       if(a!=0)
; 0000 0198         {
; 0000 0199         cnt2=0;
; 0000 019A         while(sharpright>300 && cnt2<100)
; 0000 019B             {
; 0000 019C             cnt2++;
; 0000 019D             read_cmp();
; 0000 019E             a=read();
; 0000 019F             if(a==0xaa)
; 0000 01A0                 {
; 0000 01A1                 a=read();
; 0000 01A2                 if(a==0x55){
; 0000 01A3                 read();
; 0000 01A4                 checksum = read();
; 0000 01A5                 checksum += read() * 255;
; 0000 01A6                 signature = read();
; 0000 01A7                 signature += read() * 255;
; 0000 01A8                 x = read();
; 0000 01A9                 x+=read()*255;
; 0000 01AA                 y = read();
; 0000 01AB                 y += read() * 255;
; 0000 01AC                 width = read();
; 0000 01AD                 width += read() * 255;
; 0000 01AE                 height = read();
; 0000 01AF                 height += read() * 255;
; 0000 01B0                 cnt0=0;
; 0000 01B1                 }}
; 0000 01B2             lcd_gotoxy(0,0);
; 0000 01B3             lcd_putchar(signature%10+'0');
; 0000 01B4 
; 0000 01B5             lcd_gotoxy(2,0);
; 0000 01B6             lcd_putchar((x/100)%10+'0');
; 0000 01B7             lcd_putchar((x/10)%10+'0');
; 0000 01B8             lcd_putchar((x/1)%10+'0');
; 0000 01B9 
; 0000 01BA             lcd_gotoxy(6,0);
; 0000 01BB             lcd_putchar((y/100)%10+'0');
; 0000 01BC             lcd_putchar((y/10)%10+'0');
; 0000 01BD             lcd_putchar((y/1)%10+'0');
; 0000 01BE             if(sharpright>400)                      motor(-v/2 + cmp,v/2 + cmp,v/2 + cmp,-v/2 + cmp);
; 0000 01BF             else if(a!=0)
; 0000 01C0                 {
; 0000 01C1                 if(x > 0 && x <= 60)                motor(0 + cmp,v + cmp,0 + cmp,-v + cmp);//motor(-v + cmp,v + cmp,v + ...
; 0000 01C2                 else if(x > 60 && x <= 120)         motor(0 + cmp,v + cmp,0 + cmp,-v + cmp);
; 0000 01C3                 else if(x > 120 && x <= 180)        motor(v + cmp,v + cmp,-v + cmp,-v + cmp);
; 0000 01C4                 else motor(0,0,0,0);
; 0000 01C5                 }
; 0000 01C6             else motor(0,0,0,0);
; 0000 01C7             }
; 0000 01C8 
; 0000 01C9         cnt2=0;
; 0000 01CA         while(sharpleft>300 && cnt2<100)
; 0000 01CB             {
; 0000 01CC             cnt2++;
; 0000 01CD             read_cmp();
; 0000 01CE             a=read();
; 0000 01CF             if(a==0xaa)
; 0000 01D0                 {
; 0000 01D1                 a=read();
; 0000 01D2                 if(a==0x55){
; 0000 01D3                 read();
; 0000 01D4                 checksum = read();
; 0000 01D5                 checksum += read() * 255;
; 0000 01D6                 signature = read();
; 0000 01D7                 signature += read() * 255;
; 0000 01D8                 x = read();
; 0000 01D9                 x+=read()*255;
; 0000 01DA                 y = read();
; 0000 01DB                 y += read() * 255;
; 0000 01DC                 width = read();
; 0000 01DD                 width += read() * 255;
; 0000 01DE                 height = read();
; 0000 01DF                 height += read() * 255;
; 0000 01E0                 cnt0=0;
; 0000 01E1                 }}
; 0000 01E2             lcd_gotoxy(0,0);
; 0000 01E3             lcd_putchar(signature%10+'0');
; 0000 01E4 
; 0000 01E5             lcd_gotoxy(2,0);
; 0000 01E6             lcd_putchar((x/100)%10+'0');
; 0000 01E7             lcd_putchar((x/10)%10+'0');
; 0000 01E8             lcd_putchar((x/1)%10+'0');
; 0000 01E9 
; 0000 01EA             lcd_gotoxy(6,0);
; 0000 01EB             lcd_putchar((y/100)%10+'0');
; 0000 01EC             lcd_putchar((y/10)%10+'0');
; 0000 01ED             lcd_putchar((y/1)%10+'0');
; 0000 01EE             if(sharpleft>400)                      motor(v/2 + cmp,-v/2 + cmp,-v/2 + cmp,v/2 + cmp);
; 0000 01EF             else if(a!=0)
; 0000 01F0                 {
; 0000 01F1                 if(x > 120 && x <= 180)             motor(v + cmp,v + cmp,-v + cmp,-v + cmp);
; 0000 01F2                 else if(x > 180 && x <= 240)        motor(v + cmp,0 + cmp,-v + cmp,0 + cmp);
; 0000 01F3                 else if(x > 240)                    motor(v + cmp,0 + cmp,-v + cmp,0 + cmp);
; 0000 01F4                 else motor(0,0,0,0);
; 0000 01F5                 }
; 0000 01F6             else motor(0,0,0,0);
; 0000 01F7             }
; 0000 01F8 
; 0000 01F9         if(x > 0 && x <= 60)                motor(0 + cmp,v + cmp,0 + cmp,-v + cmp);//motor(-v + cmp,v + cmp,v + cmp,-v  ...
; 0000 01FA         else if(x > 60 && x <= 120)         motor(0 + cmp,v + cmp,0 + cmp,-v + cmp);
; 0000 01FB         else if(x > 120 && x <= 180)        motor(v + cmp,v + cmp,-v + cmp,-v + cmp);
; 0000 01FC         else if(x > 180 && x <= 240)        motor(v + cmp,0 + cmp,-v + cmp,0 + cmp);
; 0000 01FD         else if(x > 240)                    motor(v + cmp,0 + cmp,-v + cmp,0 + cmp);//motor(v + cmp,-v + cmp,-v + cmp,v  ...
; 0000 01FE         else                                motor(0 + cmp,0 + cmp,0 + cmp,0 + cmp);
; 0000 01FF         }
; 0000 0200       else  //     motor(cmp,cmp,cmp,cmp);
; 0000 0201         {
; 0000 0202         //read_cmp();
; 0000 0203         //k*=2;
; 0000 0204         if (sharpback < 300)  motor(k-128 + cmp,-k-128 + cmp,-k+128 + cmp,k+128 + cmp);
; 0000 0205         else                  motor(k+cmp, -k+cmp, -k+cmp, k+cmp);
; 0000 0206         }
; 0000 0207 
; 0000 0208       }
; 0000 0209 }
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
