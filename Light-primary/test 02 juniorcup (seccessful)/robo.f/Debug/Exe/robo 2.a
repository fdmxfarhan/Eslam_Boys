;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 20/02/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// I2C Bus functions
;#include <i2c.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002A ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002B // Delay needed for the stabilization of the ADC input voltage
; 0000 002C delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 002D // Start the AD conversion
; 0000 002E ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002F // Wait for the AD conversion to complete
; 0000 0030 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0031 ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0032 return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0033 }
;PCODE: $00000021 VOL: 0
;void motor(int ml1,int ml2,int mr2,int mr1)
; 0000 0035 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0036 if(ml1>=0)
;PCODE: $00000024 VOL: 0
;	ml1 -> Y+6
;	ml2 -> Y+4
;	mr2 -> Y+2
;	mr1 -> Y+0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0037 {
; 0000 0038 PORTD.3=0;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0039 OCR2=ml1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003A }
; 0000 003B else
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003C {
; 0000 003D PORTD.3=1;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003E OCR2=ml1+255;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003F }
;PCODE: $00000033 VOL: 0
; 0000 0040 if(ml2>=0)
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0041 {
; 0000 0042 PORTD.2=0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0043 OCR1A=ml2;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0044 }
; 0000 0045 else
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0046 {
; 0000 0047 PORTD.2=1;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0048 OCR1A=ml2;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0049 }
;PCODE: $00000041 VOL: 0
; 0000 004A }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;void main(void)
; 0000 0071 {
;PCODE: $00000045 VOL: 0
; 0000 0072 // Declare your local variables here
; 0000 0073 
; 0000 0074 // Input/Output Ports initialization
; 0000 0075 // Port A initialization
; 0000 0076 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0077 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0078 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0079 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007A 
; 0000 007B // Port B initialization
; 0000 007C // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 007D DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 007E // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=T Bit0=T
; 0000 007F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0080 
; 0000 0081 // Port C initialization
; 0000 0082 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 0083 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0084 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 0085 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0086 
; 0000 0087 // Port D initialization
; 0000 0088 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0089 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 008A // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 008B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 008C 
; 0000 008D // Timer/Counter 0 initialization
; 0000 008E // Clock source: System Clock
; 0000 008F // Clock value: 125.000 kHz
; 0000 0090 // Mode: Fast PWM top=0xFF
; 0000 0091 // OC0 output: Non-Inverted PWM
; 0000 0092 // Timer Period: 2.048 ms
; 0000 0093 // Output Pulse(s):
; 0000 0094 // OC0 Period: 2.048 ms Width: 0 us
; 0000 0095 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0096 TCNT0=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0097 OCR0=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0098 
; 0000 0099 // Timer/Counter 1 initialization
; 0000 009A // Clock source: System Clock
; 0000 009B // Clock value: 31.250 kHz
; 0000 009C // Mode: Fast PWM top=0x00FF
; 0000 009D // OC1A output: Non-Inverted PWM
; 0000 009E // OC1B output: Non-Inverted PWM
; 0000 009F // Noise Canceler: Off
; 0000 00A0 // Input Capture on Falling Edge
; 0000 00A1 // Timer Period: 8.192 ms
; 0000 00A2 // Output Pulse(s):
; 0000 00A3 // OC1A Period: 8.192 ms Width: 0 us// OC1B Period: 8.192 ms Width: 0 us
; 0000 00A4 // Timer1 Overflow Interrupt: Off
; 0000 00A5 // Input Capture Interrupt: Off
; 0000 00A6 // Compare A Match Interrupt: Off
; 0000 00A7 // Compare B Match Interrupt: Off
; 0000 00A8 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00A9 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00AA TCNT1H=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00AB TCNT1L=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00AC ICR1H=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00AD ICR1L=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00AE OCR1AH=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00AF OCR1AL=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00B0 OCR1BH=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00B1 OCR1BL=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00B2 
; 0000 00B3 // Timer/Counter 2 initialization
; 0000 00B4 // Clock source: System Clock
; 0000 00B5 // Clock value: 31.250 kHz
; 0000 00B6 // Mode: Fast PWM top=0xFF
; 0000 00B7 // OC2 output: Non-Inverted PWM
; 0000 00B8 // Timer Period: 8.192 ms
; 0000 00B9 // Output Pulse(s):
; 0000 00BA // OC2 Period: 8.192 ms Width: 0 us
; 0000 00BB ASSR=0<<AS2;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00BC TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (1<<CS21) | (0<<CS20);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00BD TCNT2=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00BE OCR2=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00BF 
; 0000 00C0 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C1 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00C2 
; 0000 00C3 // External Interrupt(s) initialization
; 0000 00C4 // INT0: Off
; 0000 00C5 // INT1: Off
; 0000 00C6 // INT2: Off
; 0000 00C7 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00C8 MCUCSR=(0<<ISC2);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00C9 
; 0000 00CA // USART initialization
; 0000 00CB // USART disabled
; 0000 00CC UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00CD 
; 0000 00CE // Analog Comparator initialization
; 0000 00CF // Analog Comparator: Off
; 0000 00D0 // The Analog Comparator's positive input is
; 0000 00D1 // connected to the AIN0 pin
; 0000 00D2 // The Analog Comparator's negative input is
; 0000 00D3 // connected to the AIN1 pin
; 0000 00D4 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00D5 
; 0000 00D6 // ADC initialization
; 0000 00D7 // ADC Clock frequency: 62.500 kHz
; 0000 00D8 // ADC Voltage Reference: AVCC pin
; 0000 00D9 // ADC Auto Trigger Source: ADC Stopped
; 0000 00DA ADMUX=ADC_VREF_TYPE;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00DB ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00DC SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00DD 
; 0000 00DE // SPI initialization
; 0000 00DF // SPI disabled
; 0000 00E0 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00E1 
; 0000 00E2 // TWI initialization
; 0000 00E3 // TWI disabled
; 0000 00E4 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00E5 
; 0000 00E6 // Bit-Banged I2C Bus initialization
; 0000 00E7 // I2C Port: PORTB
; 0000 00E8 // I2C SDA bit: 1
; 0000 00E9 // I2C SCL bit: 0
; 0000 00EA // Bit Rate: 100 kHz
; 0000 00EB // Note: I2C settings are specified in the
; 0000 00EC // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 00ED i2c_init();
;PCODE: $0000008C VOL: 0
; 0000 00EE 
; 0000 00EF // Alphanumeric LCD initialization
; 0000 00F0 // Connections are specified in the
; 0000 00F1 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00F2 // RS - PORTC Bit 0
; 0000 00F3 // RD - PORTC Bit 1
; 0000 00F4 // EN - PORTC Bit 2
; 0000 00F5 // D4 - PORTC Bit 4
; 0000 00F6 // D5 - PORTC Bit 5
; 0000 00F7 // D6 - PORTC Bit 6
; 0000 00F8 // D7 - PORTC Bit 7
; 0000 00F9 // Characters/line: 16
; 0000 00FA lcd_init(16);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00FB 
; 0000 00FC while (1)
;PCODE: $0000008F VOL: 0
; 0000 00FD       {
; 0000 00FE       // Place your code here
; 0000 00FF 
; 0000 0100       }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0101 }
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
