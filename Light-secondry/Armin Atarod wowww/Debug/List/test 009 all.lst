
AVRASM ver. 2.1.30  D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm Mon Mar 12 12:04:22 2018

D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm(1093): warning: Register r9 already defined by the .DEF directive
D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm(1095): warning: Register r11 already defined by the .DEF directive
D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm(1096): warning: Register r12 already defined by the .DEF directive
D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _imin=R6
                 	.DEF _imin_msb=R7
                 	.DEF _min=R8
                 	.DEF _min_msb=R9
                 	.DEF _SL=R10
                 	.DEF _SL_msb=R11
                 	.DEF _SB=R12
                 	.DEF _SB_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00ca 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x6:
D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm(1129): warning: .cseg .db misalignment - padding zero byte
00002a 0001      	.DB  0x1
                 _0x7:
D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm(1131): warning: .cseg .db misalignment - padding zero byte
00002b 0001      	.DB  0x1
                 _0x8:
D:\project\Eslam boys\Light-secondry\Armin Atarod wowww\Debug\List\test 009 all.asm(1133): warning: .cseg .db misalignment - padding zero byte
00002c 00ff      	.DB  0xFF
                 _0x0:
00002d 003a
00002e 004c
00002f 0042
000030 0052      	.DB  0x3A,0x0,0x4C,0x0,0x42,0x0,0x52,0x0
000031 6573
000032 7574
000033 2070
000034 7473      	.DB  0x73,0x65,0x74,0x75,0x70,0x20,0x73,0x74
000035 7261
000036 2e74
000037 2e2e
000038 7300      	.DB  0x61,0x72,0x74,0x2E,0x2E,0x2E,0x0,0x73
000039 7465
00003a 6320
00003b 706d
00003c 203a      	.DB  0x65,0x74,0x20,0x63,0x6D,0x70,0x3A,0x20
00003d 6300
00003e 706d
00003f 7320
000040 7465      	.DB  0x0,0x63,0x6D,0x70,0x20,0x73,0x65,0x74
000041 7300
000042 7465
000043 5320
000044 464b      	.DB  0x0,0x73,0x65,0x74,0x20,0x53,0x4B,0x46
000045 203a
000046 5300
000047 464b
000048 7320      	.DB  0x3A,0x20,0x0,0x53,0x4B,0x46,0x20,0x73
000049 7465
00004a 7300
00004b 7465
00004c 5320      	.DB  0x65,0x74,0x0,0x73,0x65,0x74,0x20,0x53
00004d 524b
00004e 203a
00004f 5300
000050 524b      	.DB  0x4B,0x52,0x3A,0x20,0x0,0x53,0x4B,0x52
000051 7320
000052 7465
000053 7300
000054 7465      	.DB  0x20,0x73,0x65,0x74,0x0,0x73,0x65,0x74
000055 5320
000056 424b
000057 203a
000058 5300      	.DB  0x20,0x53,0x4B,0x42,0x3A,0x20,0x0,0x53
000059 424b
00005a 7320
00005b 7465
00005c 7300      	.DB  0x4B,0x42,0x20,0x73,0x65,0x74,0x0,0x73
00005d 7465
00005e 5320
00005f 4c4b
000060 203a      	.DB  0x65,0x74,0x20,0x53,0x4B,0x4C,0x3A,0x20
000061 5300
000062 4c4b
000063 7320
000064 7465      	.DB  0x0,0x53,0x4B,0x4C,0x20,0x73,0x65,0x74
000065 7300
000066 7465
000067 7a20
000068 6d61      	.DB  0x0,0x73,0x65,0x74,0x20,0x7A,0x61,0x6D
000069 6e69
00006a 3a46
00006b 0020
00006c 617a      	.DB  0x69,0x6E,0x46,0x3A,0x20,0x0,0x7A,0x61
00006d 696d
00006e 466e
00006f 7320
000070 7465      	.DB  0x6D,0x69,0x6E,0x46,0x20,0x73,0x65,0x74
000071 7300
000072 7465
000073 7a20
000074 6d61      	.DB  0x0,0x73,0x65,0x74,0x20,0x7A,0x61,0x6D
000075 6e69
000076 3a52
000077 0020
000078 617a      	.DB  0x69,0x6E,0x52,0x3A,0x20,0x0,0x7A,0x61
000079 696d
00007a 526e
00007b 7320
00007c 7465      	.DB  0x6D,0x69,0x6E,0x52,0x20,0x73,0x65,0x74
00007d 7300
00007e 7465
00007f 7a20
000080 6d61      	.DB  0x0,0x73,0x65,0x74,0x20,0x7A,0x61,0x6D
000081 6e69
000082 3a42
000083 0020
000084 617a      	.DB  0x69,0x6E,0x42,0x3A,0x20,0x0,0x7A,0x61
000085 696d
000086 426e
000087 7320
000088 7465      	.DB  0x6D,0x69,0x6E,0x42,0x20,0x73,0x65,0x74
000089 7300
00008a 7465
00008b 7a20
00008c 6d61      	.DB  0x0,0x73,0x65,0x74,0x20,0x7A,0x61,0x6D
00008d 6e69
00008e 3a4c
00008f 0020
000090 617a      	.DB  0x69,0x6E,0x4C,0x3A,0x20,0x0,0x7A,0x61
000091 696d
000092 4c6e
000093 7320
000094 7465      	.DB  0x6D,0x69,0x6E,0x4C,0x20,0x73,0x65,0x74
000095 7300
000096 7465
000097 6220
000098 6361      	.DB  0x0,0x73,0x65,0x74,0x20,0x62,0x61,0x63
000099 316b
00009a 203a
00009b 6200
00009c 6361      	.DB  0x6B,0x31,0x3A,0x20,0x0,0x62,0x61,0x63
00009d 316b
00009e 7320
00009f 7465
0000a0 7300      	.DB  0x6B,0x31,0x20,0x73,0x65,0x74,0x0,0x73
0000a1 7465
0000a2 6220
0000a3 6361
0000a4 326b      	.DB  0x65,0x74,0x20,0x62,0x61,0x63,0x6B,0x32
0000a5 203a
0000a6 6200
0000a7 6361
0000a8 326b      	.DB  0x3A,0x20,0x0,0x62,0x61,0x63,0x6B,0x32
0000a9 7320
0000aa 7465
0000ab 7300
0000ac 7465      	.DB  0x20,0x73,0x65,0x74,0x0,0x73,0x65,0x74
0000ad 6220
0000ae 6361
0000af 336b
0000b0 203a      	.DB  0x20,0x62,0x61,0x63,0x6B,0x33,0x3A,0x20
0000b1 6200
0000b2 6361
0000b3 336b
0000b4 7320      	.DB  0x0,0x62,0x61,0x63,0x6B,0x33,0x20,0x73
0000b5 7465
0000b6 7300
0000b7 7465
0000b8 7075      	.DB  0x65,0x74,0x0,0x73,0x65,0x74,0x75,0x70
0000b9 6420
0000ba 6e6f
0000bb 0065      	.DB  0x20,0x64,0x6F,0x6E,0x65,0x0
                 _0x2000003:
0000bc c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000bd 0001      	.DW  0x01
0000be 016c      	.DW  _print_lcd
0000bf 0054      	.DW  _0x6*2
                 
0000c0 0001      	.DW  0x01
0000c1 016e      	.DW  _old_print_lcd
0000c2 0056      	.DW  _0x7*2
                 
0000c3 0001      	.DW  0x01
0000c4 0172      	.DW  _v
0000c5 0058      	.DW  _0x8*2
                 
0000c6 0002      	.DW  0x02
0000c7 0185      	.DW  __base_y_G100
0000c8 0178      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
0000c9 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000ca 94f8      	CLI
0000cb 27ee      	CLR  R30
0000cc bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000cd e0f1      	LDI  R31,1
0000ce bffb      	OUT  GICR,R31
0000cf bfeb      	OUT  GICR,R30
0000d0 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000d1 e08d      	LDI  R24,(14-2)+1
0000d2 e0a2      	LDI  R26,2
0000d3 27bb      	CLR  R27
                 __CLEAR_REG:
0000d4 93ed      	ST   X+,R30
0000d5 958a      	DEC  R24
0000d6 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000d7 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000d8 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000d9 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000da 93ed      	ST   X+,R30
0000db 9701      	SBIW R24,1
0000dc f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000dd e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000de e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000df 9185      	LPM  R24,Z+
0000e0 9195      	LPM  R25,Z+
0000e1 9700      	SBIW R24,0
0000e2 f061      	BREQ __GLOBAL_INI_END
0000e3 91a5      	LPM  R26,Z+
0000e4 91b5      	LPM  R27,Z+
0000e5 9005      	LPM  R0,Z+
0000e6 9015      	LPM  R1,Z+
0000e7 01bf      	MOVW R22,R30
0000e8 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000e9 9005      	LPM  R0,Z+
0000ea 920d      	ST   X+,R0
0000eb 9701      	SBIW R24,1
0000ec f7e1      	BRNE __GLOBAL_INI_LOOP
0000ed 01fb      	MOVW R30,R22
0000ee cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000ef e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000f0 bfed      	OUT  SPL,R30
0000f1 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000f2 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000f3 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000f4 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000f5 940c 0758 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdbool.h>
                 ;#include <delay.h>
                 ;#include <i2c.h>
                 ;#asm
                     .equ __lcd_port=0x15;PORTC
                 ; 0000 0007 #endasm
                 ;#include <lcd.h>
                 ;#define centered k < 20 && k > -20
                 ;#define middled SB < backmax2 && SB > backmax3
                 ;#define lefted k > 20
                 ;#define righted k < -20
                 ;#define fronted SB < backmax3
                 ;#define backed SB > backmax2
                 ;#define center k,-k,-k,k
                 ;#define back -v,-v,v,v
                 ;#define forward v,v,-v,-v
                 ;#define right v,-v,-v,v
                 ;#define left -v,v,v,-v
                 ;#define stop 0,0,0,0
                 ;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0018 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0019 ADMUX=adc_input | ADC_VREF_TYPE;
0000f7 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000f8 81e8      	LD   R30,Y
0000f9 64e0      	ORI  R30,0x40
0000fa b9e7      	OUT  0x7,R30
                 ; 0000 001A // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 001B delay_us(10);
                +
0000fb e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000fc 958a     +DEC R24
0000fd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 001C // Start the AD conversion
                 ; 0000 001D ADCSRA|=(1<<ADSC);
0000fe 9a36      	SBI  0x6,6
                 ; 0000 001E // Wait for the AD conversion to complete
                 ; 0000 001F while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
0000ff 9b34      	SBIS 0x6,4
000100 cffe      	RJMP _0x3
                 ; 0000 0020 ADCSRA|=(1<<ADIF);
000101 9a34      	SBI  0x6,4
                 ; 0000 0021 return ADCW;
000102 b1e4      	IN   R30,0x4
000103 b1f5      	IN   R31,0x4+1
000104 9621      	ADIW R28,1
000105 9508      	RET
                 ; 0000 0022 }
                 ; .FEND
                 ;#define EEPROM_BUS_ADDRESS 0xc0
                 ;unsigned char compass_read(unsigned char address)
                 ; 0000 0025  {
                 _compass_read:
                 ; .FSTART _compass_read
                 ; 0000 0026     unsigned char data;
                 ; 0000 0027     delay_us(100);
000106 93aa      	ST   -Y,R26
000107 931a      	ST   -Y,R17
                 ;	address -> Y+1
                 ;	data -> R17
000108 940e 0955 	CALL SUBOPT_0x0
                 ; 0000 0028     i2c_start();
00010a 940e 0aaf 	CALL _i2c_start
                 ; 0000 0029     delay_us(100);
00010c 940e 0955 	CALL SUBOPT_0x0
                 ; 0000 002A     i2c_write(EEPROM_BUS_ADDRESS);
00010e eca0      	LDI  R26,LOW(192)
00010f 940e 095a 	CALL SUBOPT_0x1
                 ; 0000 002B     delay_us(100);
                 ; 0000 002C     i2c_write(address);
000111 81a9      	LDD  R26,Y+1
000112 940e 095a 	CALL SUBOPT_0x1
                 ; 0000 002D     delay_us(100);
                 ; 0000 002E     i2c_start();
000114 940e 0aaf 	CALL _i2c_start
                 ; 0000 002F     delay_us(100);
000116 940e 0955 	CALL SUBOPT_0x0
                 ; 0000 0030     i2c_write(EEPROM_BUS_ADDRESS | 1);
000118 eca1      	LDI  R26,LOW(193)
000119 940e 095a 	CALL SUBOPT_0x1
                 ; 0000 0031     delay_us(100);
                 ; 0000 0032     data=i2c_read(0);
00011b e0a0      	LDI  R26,LOW(0)
00011c 940e 0ac8 	CALL _i2c_read
00011e 2f1e      	MOV  R17,R30
                 ; 0000 0033     delay_us(100);
00011f 940e 0955 	CALL SUBOPT_0x0
                 ; 0000 0034     i2c_stop();
000121 940e 0abe 	CALL _i2c_stop
                 ; 0000 0035     delay_us(100);
000123 940e 0955 	CALL SUBOPT_0x0
                 ; 0000 0036     return data;
000125 2fe1      	MOV  R30,R17
000126 8118      	LDD  R17,Y+0
000127 9622      	ADIW R28,2
000128 9508      	RET
                 ; 0000 0037  }
                 ; .FEND
                 ;
                 ;int i,imin,min;
                 ;int SL,SB,SR,k;
                 ;int SKF,SKL,SKB,SKR;
                 ;int print_lcd = 1;  //0: none   -   1: ir-cmp-sharp   -   2: ir-cmp-kaf
                 
                 	.DSEG
                 ;int old_print_lcd = 1;
                 ;int cmp;
                 ;int v = 255;
                 ;int position;
                 ;int action;
                 ;bool setcmp, setback1,setback2,setback3, setkaf1,setkaf2,setkaf3,setkaf4, setzamin1,setzamin2,setzamin3,setzamin4;
                 ;char out=0;
                 ;eeprom int c, kafmin1,kafmin2,kafmin3,kafmin4, kafmax1,kafmax2,kafmax3,kafmax4, kafmid1,kafmid2,kafmid3,kafmid4, backmax ...
                 ;
                 ;void sensor()
                 ; 0000 0047 {
                 
                 	.CSEG
                 _sensor:
                 ; .FSTART _sensor
                 ; 0000 0048     //read IR
                 ; 0000 0049     {
                 ; 0000 004A     min = 1023;
000129 efef      	LDI  R30,LOW(1023)
00012a e0f3      	LDI  R31,HIGH(1023)
00012b 014f      	MOVW R8,R30
                 ; 0000 004B     for (i = 0 ; i < 16 ; i++)
00012c 2444      	CLR  R4
00012d 2455      	CLR  R5
                 _0xA:
00012e e1e0      	LDI  R30,LOW(16)
00012f e0f0      	LDI  R31,HIGH(16)
000130 164e      	CP   R4,R30
000131 065f      	CPC  R5,R31
000132 f594      	BRGE _0xB
                 ; 0000 004C     {
                 ; 0000 004D         PORTB.7 = (i/8)%2;
000133 01d2      	MOVW R26,R4
000134 e0e8      	LDI  R30,LOW(8)
000135 e0f0      	LDI  R31,HIGH(8)
000136 940e 095d 	CALL SUBOPT_0x2
000138 f411      	BRNE _0xC
000139 98c7      	CBI  0x18,7
00013a c001      	RJMP _0xD
                 _0xC:
00013b 9ac7      	SBI  0x18,7
                 _0xD:
                 ; 0000 004E         PORTB.6 = (i/4)%2;
00013c 01d2      	MOVW R26,R4
00013d e0e4      	LDI  R30,LOW(4)
00013e e0f0      	LDI  R31,HIGH(4)
00013f 940e 095d 	CALL SUBOPT_0x2
000141 f411      	BRNE _0xE
000142 98c6      	CBI  0x18,6
000143 c001      	RJMP _0xF
                 _0xE:
000144 9ac6      	SBI  0x18,6
                 _0xF:
                 ; 0000 004F         PORTB.5 = (i/2)%2;
000145 01d2      	MOVW R26,R4
000146 e0e2      	LDI  R30,LOW(2)
000147 e0f0      	LDI  R31,HIGH(2)
000148 940e 095d 	CALL SUBOPT_0x2
00014a f411      	BRNE _0x10
00014b 98c5      	CBI  0x18,5
00014c c001      	RJMP _0x11
                 _0x10:
00014d 9ac5      	SBI  0x18,5
                 _0x11:
                 ; 0000 0050         PORTB.4 = (i/1)%2;
00014e 01f2      	MOVW R30,R4
00014f e0a1      	LDI  R26,LOW(1)
000150 e0b0      	LDI  R27,HIGH(1)
000151 940e 0b3c 	CALL __MANDW12
000153 30e0      	CPI  R30,0
000154 f411      	BRNE _0x12
000155 98c4      	CBI  0x18,4
000156 c001      	RJMP _0x13
                 _0x12:
000157 9ac4      	SBI  0x18,4
                 _0x13:
                 ; 0000 0051         if (read_adc(0) < min)
000158 e0a0      	LDI  R26,LOW(0)
000159 df9d      	RCALL _read_adc
00015a 15e8      	CP   R30,R8
00015b 05f9      	CPC  R31,R9
00015c f420      	BRSH _0x14
                 ; 0000 0052         {
                 ; 0000 0053             min = read_adc(0);
00015d e0a0      	LDI  R26,LOW(0)
00015e df98      	RCALL _read_adc
00015f 014f      	MOVW R8,R30
                 ; 0000 0054             imin = i;
000160 0132      	MOVW R6,R4
                 ; 0000 0055         }
                 ; 0000 0056     }
                 _0x14:
000161 01f2      	MOVW R30,R4
000162 9631      	ADIW R30,1
000163 012f      	MOVW R4,R30
000164 cfc9      	RJMP _0xA
                 _0xB:
                 ; 0000 0057     }
                 ; 0000 0058 
                 ; 0000 0059     //print IR
                 ; 0000 005A     if (print_lcd == 1 || print_lcd == 2)
000165 940e 0965 	CALL SUBOPT_0x3
000167 9711      	SBIW R26,1
000168 f021      	BREQ _0x16
000169 940e 0965 	CALL SUBOPT_0x3
00016b 9712      	SBIW R26,2
00016c f4c1      	BRNE _0x15
                 _0x16:
                 ; 0000 005B     {
                 ; 0000 005C         lcd_gotoxy(0,0);
00016d e0e0      	LDI  R30,LOW(0)
00016e 93ea      	ST   -Y,R30
00016f e0a0      	LDI  R26,LOW(0)
000170 940e 08b3 	CALL _lcd_gotoxy
                 ; 0000 005D         lcd_putchar((imin/10)%10 + '0');
000172 01d3      	MOVW R26,R6
000173 940e 096a 	CALL SUBOPT_0x4
                 ; 0000 005E         lcd_putchar((imin/1)%10 + '0');
000175 01d3      	MOVW R26,R6
000176 940e 0977 	CALL SUBOPT_0x5
                 ; 0000 005F         lcd_putsf(":");
                +
000178 e5aa     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000179 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
00017a 940e 0903 	CALL _lcd_putsf
                 ; 0000 0060         lcd_putchar((min/100)%10 + '0');
00017c 01d4      	MOVW R26,R8
00017d 940e 097f 	CALL SUBOPT_0x6
                 ; 0000 0061         lcd_putchar((min/10)%10 + '0');
00017f 01d4      	MOVW R26,R8
000180 940e 096a 	CALL SUBOPT_0x4
                 ; 0000 0062         lcd_putchar((min/1)%10 + '0');
000182 01d4      	MOVW R26,R8
000183 940e 0977 	CALL SUBOPT_0x5
                 ; 0000 0063     }
                 ; 0000 0064 
                 ; 0000 0065     //read sharp
                 ; 0000 0066     {
                 _0x15:
                 ; 0000 0067         SB = read_adc(1);
000185 e0a1      	LDI  R26,LOW(1)
000186 df70      	RCALL _read_adc
000187 016f      	MOVW R12,R30
                 ; 0000 0068         SR = read_adc(2);
000188 e0a2      	LDI  R26,LOW(2)
000189 df6d      	RCALL _read_adc
00018a 93e0 0160 	STS  _SR,R30
00018c 93f0 0161 	STS  _SR+1,R31
                 ; 0000 0069         SL = read_adc(3);
00018e e0a3      	LDI  R26,LOW(3)
00018f df67      	RCALL _read_adc
000190 015f      	MOVW R10,R30
                 ; 0000 006A         k = SL-SR;
000191 940e 0985 	CALL SUBOPT_0x7
000193 01f5      	MOVW R30,R10
000194 1bea      	SUB  R30,R26
000195 0bfb      	SBC  R31,R27
000196 93e0 0162 	STS  _k,R30
000198 93f0 0163 	STS  _k+1,R31
                 ; 0000 006B     }
                 ; 0000 006C 
                 ; 0000 006D     //print sharp
                 ; 0000 006E     if (print_lcd == 1)
00019a 940e 0965 	CALL SUBOPT_0x3
00019c 9711      	SBIW R26,1
00019d f599      	BRNE _0x18
                 ; 0000 006F     {
                 ; 0000 0070         lcd_gotoxy(0,1);
00019e e0e0      	LDI  R30,LOW(0)
00019f 940e 098a 	CALL SUBOPT_0x8
                 ; 0000 0071         lcd_putsf("L");
                +
0001a1 e5ac     +LDI R26 , LOW ( 2 * _0x0 + ( 2 ) )
0001a2 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 2 ) )
                 	__POINTW2FN _0x0,2
0001a3 940e 0903 	CALL _lcd_putsf
                 ; 0000 0072         lcd_putchar((SL/100)%10 + '0');
0001a5 01d5      	MOVW R26,R10
0001a6 940e 097f 	CALL SUBOPT_0x6
                 ; 0000 0073         lcd_putchar((SL/10)%10 + '0');
0001a8 01d5      	MOVW R26,R10
0001a9 940e 096a 	CALL SUBOPT_0x4
                 ; 0000 0074         lcd_putchar((SL/1)%10 + '0');
0001ab 01d5      	MOVW R26,R10
0001ac 940e 0977 	CALL SUBOPT_0x5
                 ; 0000 0075         lcd_gotoxy(5,1);
0001ae e0e5      	LDI  R30,LOW(5)
0001af 940e 098a 	CALL SUBOPT_0x8
                 ; 0000 0076         lcd_putsf("B");
                +
0001b1 e5ae     +LDI R26 , LOW ( 2 * _0x0 + ( 4 ) )
0001b2 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW2FN _0x0,4
0001b3 940e 0903 	CALL _lcd_putsf
                 ; 0000 0077         lcd_putchar((SB/100)%10 + '0');
0001b5 01d6      	MOVW R26,R12
0001b6 940e 097f 	CALL SUBOPT_0x6
                 ; 0000 0078         lcd_putchar((SB/10)%10 + '0');
0001b8 01d6      	MOVW R26,R12
0001b9 940e 096a 	CALL SUBOPT_0x4
                 ; 0000 0079         lcd_putchar((SB/1)%10 + '0');
0001bb 01d6      	MOVW R26,R12
0001bc 940e 0977 	CALL SUBOPT_0x5
                 ; 0000 007A         lcd_gotoxy(10,1);
0001be e0ea      	LDI  R30,LOW(10)
0001bf 940e 098a 	CALL SUBOPT_0x8
                 ; 0000 007B         lcd_putsf("R");
                +
0001c1 e6a0     +LDI R26 , LOW ( 2 * _0x0 + ( 6 ) )
0001c2 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW2FN _0x0,6
0001c3 940e 0903 	CALL _lcd_putsf
                 ; 0000 007C         lcd_putchar((SR/100)%10 + '0');
0001c5 940e 0985 	CALL SUBOPT_0x7
0001c7 940e 097f 	CALL SUBOPT_0x6
                 ; 0000 007D         lcd_putchar((SR/10)%10 + '0');
0001c9 940e 0985 	CALL SUBOPT_0x7
0001cb 940e 096a 	CALL SUBOPT_0x4
                 ; 0000 007E         lcd_putchar((SR/1)%10 + '0');
0001cd 940e 0985 	CALL SUBOPT_0x7
0001cf 940e 0977 	CALL SUBOPT_0x5
                 ; 0000 007F     }
                 ; 0000 0080 
                 ; 0000 0081     //read kaf
                 ; 0000 0082     {
                 _0x18:
                 ; 0000 0083         SKF = read_adc(4);
0001d1 e0a4      	LDI  R26,LOW(4)
0001d2 df24      	RCALL _read_adc
0001d3 93e0 0164 	STS  _SKF,R30
0001d5 93f0 0165 	STS  _SKF+1,R31
                 ; 0000 0084         SKL = read_adc(5);
0001d7 e0a5      	LDI  R26,LOW(5)
0001d8 df1e      	RCALL _read_adc
0001d9 93e0 0166 	STS  _SKL,R30
0001db 93f0 0167 	STS  _SKL+1,R31
                 ; 0000 0085         SKR = read_adc(6);
0001dd e0a6      	LDI  R26,LOW(6)
0001de df18      	RCALL _read_adc
0001df 93e0 016a 	STS  _SKR,R30
0001e1 93f0 016b 	STS  _SKR+1,R31
                 ; 0000 0086         SKB = read_adc(7);
0001e3 e0a7      	LDI  R26,LOW(7)
0001e4 df12      	RCALL _read_adc
0001e5 93e0 0168 	STS  _SKB,R30
0001e7 93f0 0169 	STS  _SKB+1,R31
                 ; 0000 0087     }
                 ; 0000 0088 
                 ; 0000 0089     //print kaf
                 ; 0000 008A     if (print_lcd == 2)
0001e9 940e 0965 	CALL SUBOPT_0x3
0001eb 9712      	SBIW R26,2
0001ec f5e1      	BRNE _0x19
                 ; 0000 008B     {
                 ; 0000 008C         lcd_gotoxy(0,1);
0001ed e0e0      	LDI  R30,LOW(0)
0001ee 940e 098a 	CALL SUBOPT_0x8
                 ; 0000 008D         lcd_putchar((SKL/100)%10 + '0');
0001f0 940e 098e 	CALL SUBOPT_0x9
0001f2 940e 097f 	CALL SUBOPT_0x6
                 ; 0000 008E         lcd_putchar((SKL/10)%10 + '0');
0001f4 940e 098e 	CALL SUBOPT_0x9
0001f6 940e 096a 	CALL SUBOPT_0x4
                 ; 0000 008F         lcd_putchar((SKL/1)%10 + '0');
0001f8 940e 098e 	CALL SUBOPT_0x9
0001fa 940e 0977 	CALL SUBOPT_0x5
                 ; 0000 0090         lcd_gotoxy(4,1);
0001fc e0e4      	LDI  R30,LOW(4)
0001fd 940e 098a 	CALL SUBOPT_0x8
                 ; 0000 0091         lcd_putchar((SKB/100)%10 + '0');
0001ff 940e 0993 	CALL SUBOPT_0xA
000201 940e 097f 	CALL SUBOPT_0x6
                 ; 0000 0092         lcd_putchar((SKB/10)%10 + '0');
000203 940e 0993 	CALL SUBOPT_0xA
000205 940e 096a 	CALL SUBOPT_0x4
                 ; 0000 0093         lcd_putchar((SKB/1)%10 + '0');
000207 940e 0993 	CALL SUBOPT_0xA
000209 940e 0977 	CALL SUBOPT_0x5
                 ; 0000 0094         lcd_gotoxy(8,1);
00020b e0e8      	LDI  R30,LOW(8)
00020c 940e 098a 	CALL SUBOPT_0x8
                 ; 0000 0095         lcd_putchar((SKR/100)%10 + '0');
00020e 940e 0998 	CALL SUBOPT_0xB
000210 940e 097f 	CALL SUBOPT_0x6
                 ; 0000 0096         lcd_putchar((SKR/10)%10 + '0');
000212 940e 0998 	CALL SUBOPT_0xB
000214 940e 096a 	CALL SUBOPT_0x4
                 ; 0000 0097         lcd_putchar((SKR/1)%10 + '0');
000216 940e 0998 	CALL SUBOPT_0xB
000218 940e 0977 	CALL SUBOPT_0x5
                 ; 0000 0098         lcd_gotoxy(12,1);
00021a e0ec      	LDI  R30,LOW(12)
00021b 940e 098a 	CALL SUBOPT_0x8
                 ; 0000 0099         lcd_putchar((SKF/100)%10 + '0');
00021d 940e 099d 	CALL SUBOPT_0xC
00021f 940e 097f 	CALL SUBOPT_0x6
                 ; 0000 009A         lcd_putchar((SKF/10)%10 + '0');
000221 940e 099d 	CALL SUBOPT_0xC
000223 940e 096a 	CALL SUBOPT_0x4
                 ; 0000 009B         lcd_putchar((SKF/1)%10 + '0');
000225 940e 099d 	CALL SUBOPT_0xC
000227 940e 0977 	CALL SUBOPT_0x5
                 ; 0000 009C     }
                 ; 0000 009D 
                 ; 0000 009E     //read cmp
                 ; 0000 009F     {
                 _0x19:
                 ; 0000 00A0         #asm("wdr");
000229 95a8      	wdr
                 ; 0000 00A1         cmp=compass_read(1)-c;
00022a e0a1      	LDI  R26,LOW(1)
00022b deda      	RCALL _compass_read
00022c 2e0e      	MOV  R0,R30
00022d 2411      	CLR  R1
00022e e0a0      	LDI  R26,LOW(_c)
00022f e0b0      	LDI  R27,HIGH(_c)
000230 940e 0b54 	CALL __EEPROMRDW
000232 01d0      	MOVW R26,R0
000233 1bae      	SUB  R26,R30
000234 0bbf      	SBC  R27,R31
000235 93a0 0170 	STS  _cmp,R26
000237 93b0 0171 	STS  _cmp+1,R27
                 ; 0000 00A2 
                 ; 0000 00A3         if(cmp>128)  cmp=cmp-255;
000239 940e 09a2 	CALL SUBOPT_0xD
00023b 38a1      	CPI  R26,LOW(0x81)
00023c e0e0      	LDI  R30,HIGH(0x81)
00023d 07be      	CPC  R27,R30
00023e f034      	BRLT _0x1A
00023f 940e 09a7 	CALL SUBOPT_0xE
000241 5fef      	SUBI R30,LOW(255)
000242 40f0      	SBCI R31,HIGH(255)
000243 940e 09ac 	CALL SUBOPT_0xF
                 ; 0000 00A4         if(cmp<-128) cmp=cmp+255;
                 _0x1A:
000245 940e 09a2 	CALL SUBOPT_0xD
000247 38a0      	CPI  R26,LOW(0xFF80)
000248 efef      	LDI  R30,HIGH(0xFF80)
000249 07be      	CPC  R27,R30
00024a f434      	BRGE _0x1B
00024b 940e 09a7 	CALL SUBOPT_0xE
00024d 50e1      	SUBI R30,LOW(-255)
00024e 4fff      	SBCI R31,HIGH(-255)
00024f 940e 09ac 	CALL SUBOPT_0xF
                 ; 0000 00A5     }
                 _0x1B:
                 ; 0000 00A6 
                 ; 0000 00A7     //print cmp
                 ; 0000 00A8     if (print_lcd == 1 || print_lcd == 2)
000251 940e 0965 	CALL SUBOPT_0x3
000253 9711      	SBIW R26,1
000254 f021      	BREQ _0x1D
000255 940e 0965 	CALL SUBOPT_0x3
000257 9712      	SBIW R26,2
000258 f561      	BRNE _0x1C
                 _0x1D:
                 ; 0000 00A9     {
                 ; 0000 00AA         lcd_gotoxy(11,0);
000259 e0eb      	LDI  R30,LOW(11)
00025a 93ea      	ST   -Y,R30
00025b e0a0      	LDI  R26,LOW(0)
00025c 940e 08b3 	CALL _lcd_gotoxy
                 ; 0000 00AB         if(cmp>=0)
00025e 91a0 0171 	LDS  R26,_cmp+1
000260 23aa      	TST  R26
000261 f072      	BRMI _0x1F
                 ; 0000 00AC         {
                 ; 0000 00AD             lcd_putchar('+');
000262 e2ab      	LDI  R26,LOW(43)
000263 940e 08dc 	CALL _lcd_putchar
                 ; 0000 00AE             lcd_putchar((cmp/100)%10+'0');
000265 940e 09a2 	CALL SUBOPT_0xD
000267 940e 097f 	CALL SUBOPT_0x6
                 ; 0000 00AF             lcd_putchar((cmp/10)%10+'0');
000269 940e 09a2 	CALL SUBOPT_0xD
00026b 940e 096a 	CALL SUBOPT_0x4
                 ; 0000 00B0             lcd_putchar((cmp/1)%10+'0');
00026d 940e 09a2 	CALL SUBOPT_0xD
00026f c00d      	RJMP _0x1BB
                 ; 0000 00B1         }
                 ; 0000 00B2         else
                 _0x1F:
                 ; 0000 00B3         {
                 ; 0000 00B4             lcd_putchar('-');
000270 e2ad      	LDI  R26,LOW(45)
000271 940e 08dc 	CALL _lcd_putchar
                 ; 0000 00B5             lcd_putchar((-cmp/100)%10+'0');
000273 940e 09b1 	CALL SUBOPT_0x10
000275 940e 097f 	CALL SUBOPT_0x6
                 ; 0000 00B6             lcd_putchar((-cmp/10)%10+'0');
000277 940e 09b1 	CALL SUBOPT_0x10
000279 940e 096a 	CALL SUBOPT_0x4
                 ; 0000 00B7             lcd_putchar((-cmp/1)%10+'0');
00027b 940e 09b1 	CALL SUBOPT_0x10
                 _0x1BB:
00027d e0ea      	LDI  R30,LOW(10)
00027e e0f0      	LDI  R31,HIGH(10)
00027f 940e 0b2e 	CALL __MODW21
000281 5de0      	SUBI R30,-LOW(48)
000282 2fae      	MOV  R26,R30
000283 940e 08dc 	CALL _lcd_putchar
                 ; 0000 00B8         }
                 ; 0000 00B9     }
                 ; 0000 00BA 
                 ; 0000 00BB     //multiply
                 ; 0000 00BC     {
                 _0x1C:
                 ; 0000 00BD         if (cmp > -20 && cmp < 20)
000285 940e 09a2 	CALL SUBOPT_0xD
000287 940e 09b6 	CALL SUBOPT_0x11
000289 f424      	BRGE _0x22
00028a 940e 09a2 	CALL SUBOPT_0xD
00028c 9754      	SBIW R26,20
00028d f00c      	BRLT _0x23
                 _0x22:
00028e c005      	RJMP _0x21
                 _0x23:
                 ; 0000 00BE         {
                 ; 0000 00BF             cmp*=-4;
00028f 940e 09a7 	CALL SUBOPT_0xE
000291 efac      	LDI  R26,LOW(65532)
000292 efbf      	LDI  R27,HIGH(65532)
000293 c004      	RJMP _0x1BC
                 ; 0000 00C0         }
                 ; 0000 00C1         else
                 _0x21:
                 ; 0000 00C2         {
                 ; 0000 00C3             cmp*=-2;
000294 940e 09a7 	CALL SUBOPT_0xE
000296 efae      	LDI  R26,LOW(65534)
000297 efbf      	LDI  R27,HIGH(65534)
                 _0x1BC:
000298 940e 0b11 	CALL __MULW12
00029a 940e 09ac 	CALL SUBOPT_0xF
                 ; 0000 00C4         }
                 ; 0000 00C5     }
                 ; 0000 00C6 }
00029c 9508      	RET
                 ; .FEND
                 ;
                 ;void motor(int ml1,int ml2,int mr2,int mr1)
                 ; 0000 00C9     {
                 _motor:
                 ; .FSTART _motor
                 ; 0000 00CA     #asm("wdr");
00029d 93ba      	ST   -Y,R27
00029e 93aa      	ST   -Y,R26
                 ;	ml1 -> Y+6
                 ;	ml2 -> Y+4
                 ;	mr2 -> Y+2
                 ;	mr1 -> Y+0
00029f 95a8      	wdr
                 ; 0000 00CB     {
                 ; 0000 00CC         ml1+=cmp;
0002a0 940e 09a7 	CALL SUBOPT_0xE
0002a2 81ae      	LDD  R26,Y+6
0002a3 81bf      	LDD  R27,Y+6+1
0002a4 0fea      	ADD  R30,R26
0002a5 1ffb      	ADC  R31,R27
0002a6 83ee      	STD  Y+6,R30
0002a7 83ff      	STD  Y+6+1,R31
                 ; 0000 00CD         ml2+=cmp;
0002a8 940e 09a7 	CALL SUBOPT_0xE
0002aa 81ac      	LDD  R26,Y+4
0002ab 81bd      	LDD  R27,Y+4+1
0002ac 0fea      	ADD  R30,R26
0002ad 1ffb      	ADC  R31,R27
0002ae 83ec      	STD  Y+4,R30
0002af 83fd      	STD  Y+4+1,R31
                 ; 0000 00CE         mr2+=cmp;
0002b0 940e 09a7 	CALL SUBOPT_0xE
0002b2 81aa      	LDD  R26,Y+2
0002b3 81bb      	LDD  R27,Y+2+1
0002b4 0fea      	ADD  R30,R26
0002b5 1ffb      	ADC  R31,R27
0002b6 83ea      	STD  Y+2,R30
0002b7 83fb      	STD  Y+2+1,R31
                 ; 0000 00CF         mr1+=cmp;
0002b8 940e 09a7 	CALL SUBOPT_0xE
0002ba 81a8      	LD   R26,Y
0002bb 81b9      	LDD  R27,Y+1
0002bc 0fea      	ADD  R30,R26
0002bd 1ffb      	ADC  R31,R27
0002be 83e8      	ST   Y,R30
0002bf 83f9      	STD  Y+1,R31
                 ; 0000 00D0     }
                 ; 0000 00D1 
                 ; 0000 00D2     if (SB < 170 && SL > 250)
0002c0 940e 09bb 	CALL SUBOPT_0x12
0002c2 f42c      	BRGE _0x26
0002c3 efea      	LDI  R30,LOW(250)
0002c4 e0f0      	LDI  R31,HIGH(250)
0002c5 15ea      	CP   R30,R10
0002c6 05fb      	CPC  R31,R11
0002c7 f00c      	BRLT _0x27
                 _0x26:
0002c8 c013      	RJMP _0x25
                 _0x27:
                 ; 0000 00D3     {
                 ; 0000 00D4         ml1 += 30;
0002c9 81ee      	LDD  R30,Y+6
0002ca 81ff      	LDD  R31,Y+6+1
0002cb 967e      	ADIW R30,30
0002cc 83ee      	STD  Y+6,R30
0002cd 83ff      	STD  Y+6+1,R31
                 ; 0000 00D5         ml2 += 30;
0002ce 81ec      	LDD  R30,Y+4
0002cf 81fd      	LDD  R31,Y+4+1
0002d0 967e      	ADIW R30,30
0002d1 83ec      	STD  Y+4,R30
0002d2 83fd      	STD  Y+4+1,R31
                 ; 0000 00D6         mr2 += 30;
0002d3 81ea      	LDD  R30,Y+2
0002d4 81fb      	LDD  R31,Y+2+1
0002d5 967e      	ADIW R30,30
0002d6 83ea      	STD  Y+2,R30
0002d7 83fb      	STD  Y+2+1,R31
                 ; 0000 00D7         mr1 += 30;
0002d8 81e8      	LD   R30,Y
0002d9 81f9      	LDD  R31,Y+1
0002da 967e      	ADIW R30,30
0002db c01c      	RJMP _0x1BD
                 ; 0000 00D8     }
                 ; 0000 00D9 
                 ; 0000 00DA     else if (SB < 170 && SR > 250)
                 _0x25:
0002dc 940e 09bb 	CALL SUBOPT_0x12
0002de f434      	BRGE _0x2A
0002df 940e 0985 	CALL SUBOPT_0x7
0002e1 3fab      	CPI  R26,LOW(0xFB)
0002e2 e0e0      	LDI  R30,HIGH(0xFB)
0002e3 07be      	CPC  R27,R30
0002e4 f40c      	BRGE _0x2B
                 _0x2A:
0002e5 c014      	RJMP _0x29
                 _0x2B:
                 ; 0000 00DB     {
                 ; 0000 00DC         ml1 -= 30;
0002e6 81ee      	LDD  R30,Y+6
0002e7 81ff      	LDD  R31,Y+6+1
0002e8 977e      	SBIW R30,30
0002e9 83ee      	STD  Y+6,R30
0002ea 83ff      	STD  Y+6+1,R31
                 ; 0000 00DD         ml2 -= 30;
0002eb 81ec      	LDD  R30,Y+4
0002ec 81fd      	LDD  R31,Y+4+1
0002ed 977e      	SBIW R30,30
0002ee 83ec      	STD  Y+4,R30
0002ef 83fd      	STD  Y+4+1,R31
                 ; 0000 00DE         mr2 -= 30;
0002f0 81ea      	LDD  R30,Y+2
0002f1 81fb      	LDD  R31,Y+2+1
0002f2 977e      	SBIW R30,30
0002f3 83ea      	STD  Y+2,R30
0002f4 83fb      	STD  Y+2+1,R31
                 ; 0000 00DF         mr1 -= 30;
0002f5 81e8      	LD   R30,Y
0002f6 81f9      	LDD  R31,Y+1
0002f7 977e      	SBIW R30,30
                 _0x1BD:
0002f8 83e8      	ST   Y,R30
0002f9 83f9      	STD  Y+1,R31
                 ; 0000 00E0     }
                 ; 0000 00E1 
                 ; 0000 00E2     {
                 _0x29:
                 ; 0000 00E3         if(ml1>255) ml1=255;
0002fa 81ae      	LDD  R26,Y+6
0002fb 81bf      	LDD  R27,Y+6+1
0002fc 30a0      	CPI  R26,LOW(0x100)
0002fd e0e1      	LDI  R30,HIGH(0x100)
0002fe 07be      	CPC  R27,R30
0002ff f024      	BRLT _0x2C
000300 efef      	LDI  R30,LOW(255)
000301 e0f0      	LDI  R31,HIGH(255)
000302 83ee      	STD  Y+6,R30
000303 83ff      	STD  Y+6+1,R31
                 ; 0000 00E4         if(ml2>255) ml2=255;
                 _0x2C:
000304 81ac      	LDD  R26,Y+4
000305 81bd      	LDD  R27,Y+4+1
000306 30a0      	CPI  R26,LOW(0x100)
000307 e0e1      	LDI  R30,HIGH(0x100)
000308 07be      	CPC  R27,R30
000309 f024      	BRLT _0x2D
00030a efef      	LDI  R30,LOW(255)
00030b e0f0      	LDI  R31,HIGH(255)
00030c 83ec      	STD  Y+4,R30
00030d 83fd      	STD  Y+4+1,R31
                 ; 0000 00E5         if(mr2>255) mr2=255;
                 _0x2D:
00030e 81aa      	LDD  R26,Y+2
00030f 81bb      	LDD  R27,Y+2+1
000310 30a0      	CPI  R26,LOW(0x100)
000311 e0e1      	LDI  R30,HIGH(0x100)
000312 07be      	CPC  R27,R30
000313 f024      	BRLT _0x2E
000314 efef      	LDI  R30,LOW(255)
000315 e0f0      	LDI  R31,HIGH(255)
000316 83ea      	STD  Y+2,R30
000317 83fb      	STD  Y+2+1,R31
                 ; 0000 00E6         if(mr1>255) mr1=255;
                 _0x2E:
000318 81a8      	LD   R26,Y
000319 81b9      	LDD  R27,Y+1
00031a 30a0      	CPI  R26,LOW(0x100)
00031b e0e1      	LDI  R30,HIGH(0x100)
00031c 07be      	CPC  R27,R30
00031d f024      	BRLT _0x2F
00031e efef      	LDI  R30,LOW(255)
00031f e0f0      	LDI  R31,HIGH(255)
000320 83e8      	ST   Y,R30
000321 83f9      	STD  Y+1,R31
                 ; 0000 00E7 
                 ; 0000 00E8         if(ml1<-255) ml1=-255;
                 _0x2F:
000322 81ae      	LDD  R26,Y+6
000323 81bf      	LDD  R27,Y+6+1
000324 30a1      	CPI  R26,LOW(0xFF01)
000325 efef      	LDI  R30,HIGH(0xFF01)
000326 07be      	CPC  R27,R30
000327 f424      	BRGE _0x30
000328 e0e1      	LDI  R30,LOW(65281)
000329 efff      	LDI  R31,HIGH(65281)
00032a 83ee      	STD  Y+6,R30
00032b 83ff      	STD  Y+6+1,R31
                 ; 0000 00E9         if(ml2<-255) ml2=-255;
                 _0x30:
00032c 81ac      	LDD  R26,Y+4
00032d 81bd      	LDD  R27,Y+4+1
00032e 30a1      	CPI  R26,LOW(0xFF01)
00032f efef      	LDI  R30,HIGH(0xFF01)
000330 07be      	CPC  R27,R30
000331 f424      	BRGE _0x31
000332 e0e1      	LDI  R30,LOW(65281)
000333 efff      	LDI  R31,HIGH(65281)
000334 83ec      	STD  Y+4,R30
000335 83fd      	STD  Y+4+1,R31
                 ; 0000 00EA         if(mr2<-255) mr2=-255;
                 _0x31:
000336 81aa      	LDD  R26,Y+2
000337 81bb      	LDD  R27,Y+2+1
000338 30a1      	CPI  R26,LOW(0xFF01)
000339 efef      	LDI  R30,HIGH(0xFF01)
00033a 07be      	CPC  R27,R30
00033b f424      	BRGE _0x32
00033c e0e1      	LDI  R30,LOW(65281)
00033d efff      	LDI  R31,HIGH(65281)
00033e 83ea      	STD  Y+2,R30
00033f 83fb      	STD  Y+2+1,R31
                 ; 0000 00EB         if(mr1<-255) mr1=-255;
                 _0x32:
000340 81a8      	LD   R26,Y
000341 81b9      	LDD  R27,Y+1
000342 30a1      	CPI  R26,LOW(0xFF01)
000343 efef      	LDI  R30,HIGH(0xFF01)
000344 07be      	CPC  R27,R30
000345 f424      	BRGE _0x33
000346 e0e1      	LDI  R30,LOW(65281)
000347 efff      	LDI  R31,HIGH(65281)
000348 83e8      	ST   Y,R30
000349 83f9      	STD  Y+1,R31
                 ; 0000 00EC     }
                 _0x33:
                 ; 0000 00ED     //////////////mr1
                 ; 0000 00EE     {
                 ; 0000 00EF     if(mr1>=0)
00034a 81a9      	LDD  R26,Y+1
00034b 23aa      	TST  R26
00034c f022      	BRMI _0x34
                 ; 0000 00F0     {
                 ; 0000 00F1         #asm("wdr");
00034d 95a8      	wdr
                 ; 0000 00F2         PORTD.0=0;
00034e 9890      	CBI  0x12,0
                 ; 0000 00F3         OCR0=mr1;
00034f 81e8      	LD   R30,Y
000350 c004      	RJMP _0x1BE
                 ; 0000 00F4     }
                 ; 0000 00F5     else
                 _0x34:
                 ; 0000 00F6     {
                 ; 0000 00F7         #asm("wdr");
000351 95a8      	wdr
                 ; 0000 00F8         PORTD.0=1;
000352 9a90      	SBI  0x12,0
                 ; 0000 00F9         OCR0=mr1+255;
000353 81e8      	LD   R30,Y
000354 50e1      	SUBI R30,-LOW(255)
                 _0x1BE:
000355 bfec      	OUT  0x3C,R30
                 ; 0000 00FA     }
                 ; 0000 00FB     }
                 ; 0000 00FC     //////////////mr2
                 ; 0000 00FD     {
                 ; 0000 00FE     if(mr2>=0)
000356 81ab      	LDD  R26,Y+3
000357 23aa      	TST  R26
000358 f02a      	BRMI _0x3A
                 ; 0000 00FF     {
                 ; 0000 0100         #asm("wdr");
000359 95a8      	wdr
                 ; 0000 0101         PORTD.1=0;
00035a 9891      	CBI  0x12,1
                 ; 0000 0102         OCR1B=mr2;
00035b 81ea      	LDD  R30,Y+2
00035c 81fb      	LDD  R31,Y+2+1
00035d c006      	RJMP _0x1BF
                 ; 0000 0103     }
                 ; 0000 0104     else
                 _0x3A:
                 ; 0000 0105     {
                 ; 0000 0106         #asm("wdr");
00035e 95a8      	wdr
                 ; 0000 0107         PORTD.1=1;
00035f 9a91      	SBI  0x12,1
                 ; 0000 0108         OCR1B=mr2+255;
000360 81ea      	LDD  R30,Y+2
000361 81fb      	LDD  R31,Y+2+1
000362 50e1      	SUBI R30,LOW(-255)
000363 4fff      	SBCI R31,HIGH(-255)
                 _0x1BF:
000364 bdf9      	OUT  0x28+1,R31
000365 bde8      	OUT  0x28,R30
                 ; 0000 0109     }
                 ; 0000 010A     }
                 ; 0000 010B     //////////////mL2
                 ; 0000 010C     {
                 ; 0000 010D     if(ml2>=0)
000366 81ad      	LDD  R26,Y+5
000367 23aa      	TST  R26
000368 f02a      	BRMI _0x40
                 ; 0000 010E     {
                 ; 0000 010F         #asm("wdr");
000369 95a8      	wdr
                 ; 0000 0110         PORTD.2=0;
00036a 9892      	CBI  0x12,2
                 ; 0000 0111         OCR1A=ml2;
00036b 81ec      	LDD  R30,Y+4
00036c 81fd      	LDD  R31,Y+4+1
00036d c006      	RJMP _0x1C0
                 ; 0000 0112     }
                 ; 0000 0113     else
                 _0x40:
                 ; 0000 0114     {
                 ; 0000 0115         #asm("wdr");
00036e 95a8      	wdr
                 ; 0000 0116         PORTD.2=1;
00036f 9a92      	SBI  0x12,2
                 ; 0000 0117         OCR1A=ml2+255;
000370 81ec      	LDD  R30,Y+4
000371 81fd      	LDD  R31,Y+4+1
000372 50e1      	SUBI R30,LOW(-255)
000373 4fff      	SBCI R31,HIGH(-255)
                 _0x1C0:
000374 bdfb      	OUT  0x2A+1,R31
000375 bdea      	OUT  0x2A,R30
                 ; 0000 0118     }
                 ; 0000 0119         }
                 ; 0000 011A     //////////////ml1
                 ; 0000 011B     {
                 ; 0000 011C     if(ml1>=0)
000376 81af      	LDD  R26,Y+7
000377 23aa      	TST  R26
000378 f022      	BRMI _0x46
                 ; 0000 011D     {
                 ; 0000 011E         #asm("wdr");
000379 95a8      	wdr
                 ; 0000 011F         PORTD.3=0;
00037a 9893      	CBI  0x12,3
                 ; 0000 0120         OCR2=ml1;
00037b 81ee      	LDD  R30,Y+6
00037c c004      	RJMP _0x1C1
                 ; 0000 0121     }
                 ; 0000 0122     else
                 _0x46:
                 ; 0000 0123     {
                 ; 0000 0124         #asm("wdr");
00037d 95a8      	wdr
                 ; 0000 0125         PORTD.3=1;
00037e 9a93      	SBI  0x12,3
                 ; 0000 0126         OCR2=ml1+255;
00037f 81ee      	LDD  R30,Y+6
000380 50e1      	SUBI R30,-LOW(255)
                 _0x1C1:
000381 bde3      	OUT  0x23,R30
                 ; 0000 0127     }
                 ; 0000 0128     }
                 ; 0000 0129 }
000382 9628      	ADIW R28,8
000383 9508      	RET
                 ; .FEND
                 ;
                 ;void check()
                 ; 0000 012C {
                 ; 0000 012D     if(SKB>kafmid3 || SKR>kafmid2 || SKL>kafmid4)
                 ; 0000 012E     {
                 ; 0000 012F         if(SKR>kafmid2)
                 ; 0000 0130         {
                 ; 0000 0131             if(SL>400)
                 ; 0000 0132             {
                 ; 0000 0133                 motor(v,-v,-v,v);
                 ; 0000 0134                 out='L';
                 ; 0000 0135             }
                 ; 0000 0136             else
                 ; 0000 0137             {
                 ; 0000 0138                 motor(-v,v,v,-v);
                 ; 0000 0139                 out='R';
                 ; 0000 013A             }
                 ; 0000 013B         }
                 ; 0000 013C         else if(SKL>kafmid4)
                 ; 0000 013D         {
                 ; 0000 013E             if(SR>400)
                 ; 0000 013F             {
                 ; 0000 0140                 motor(-v,v,v,-v);
                 ; 0000 0141                 out='R';
                 ; 0000 0142             }
                 ; 0000 0143             else
                 ; 0000 0144             {
                 ; 0000 0145                 motor(v,-v,-v,v);
                 ; 0000 0146                 out='L';
                 ; 0000 0147             }
                 ; 0000 0148         }
                 ; 0000 0149         else if(SKB>kafmid3)
                 ; 0000 014A         {
                 ; 0000 014B             if(SB>200)
                 ; 0000 014C             {
                 ; 0000 014D                 motor(-v,v,v,-v);
                 ; 0000 014E                 out='B';
                 ; 0000 014F             }
                 ; 0000 0150         }
                 ; 0000 0151     }
                 ; 0000 0152     else
                 ; 0000 0153     {
                 ; 0000 0154         while(out=='R' && min < 800 && imin >= 0 && imin <= 8)
                 ; 0000 0155         {
                 ; 0000 0156             sensor();
                 ; 0000 0157             if(SR>250)   motor(-v,v,v,-v);
                 ; 0000 0158             else  motor(0,0,0,0);
                 ; 0000 0159         }
                 ; 0000 015A         while(out=='L' && min < 800 && imin <= 15 && imin >= 8)
                 ; 0000 015B         {
                 ; 0000 015C             sensor();
                 ; 0000 015D             if(SL>250)   motor(v,-v,-v,v);
                 ; 0000 015E             else  motor(0,0,0,0);
                 ; 0000 015F         }
                 ; 0000 0160         while(out=='B' && min < 800 && imin >= 4 && imin <= 12)
                 ; 0000 0161         {
                 ; 0000 0162             sensor();
                 ; 0000 0163             if(SB>250)   motor(v,v,-v,-v);
                 ; 0000 0164             else  motor(0,0,0,0);
                 ; 0000 0165         }
                 ; 0000 0166         if(SKF>kafmid1 && out==0)
                 ; 0000 0167         {
                 ; 0000 0168             motor(-v,-v,v,v);
                 ; 0000 0169             delay_ms(300);
                 ; 0000 016A             out='F';
                 ; 0000 016B         }
                 ; 0000 016C         while(out=='F' && min < 800 && (imin >=  12|| imin <= 4))
                 ; 0000 016D         {
                 ; 0000 016E             sensor();
                 ; 0000 016F             motor(0,0,0,0);
                 ; 0000 0170         }
                 ; 0000 0171     }
                 ; 0000 0172 }
                 ;
                 ;void catch()
                 ; 0000 0175 {
                 _catch:
                 ; .FSTART _catch
                 ; 0000 0176     //check min
                 ; 0000 0177     if (min < 800)
000384 940e 09c0 	CALL SUBOPT_0x13
000386 f00c      	BRLT PC+2
000387 c375      	RJMP _0x79
                 ; 0000 0178     {
                 ; 0000 0179         //center
                 ; 0000 017A         if (SB < 170) motor(center);
000388 940e 09bb 	CALL SUBOPT_0x12
00038a f44c      	BRGE _0x7A
00038b 940e 09c5 	CALL SUBOPT_0x14
00038d 940e 09ca 	CALL SUBOPT_0x15
00038f 940e 09ca 	CALL SUBOPT_0x15
000391 940e 09d0 	CALL SUBOPT_0x16
000393 df09      	RCALL _motor
                 ; 0000 017B 
                 ; 0000 017C         //set position
                 ; 0000 017D         {
                 _0x7A:
                 ; 0000 017E             if ((lefted) && (fronted)) position = 1;
000394 940e 09d7 	CALL SUBOPT_0x17
000396 9755      	SBIW R26,21
000397 f01c      	BRLT _0x7C
000398 940e 09dc 	CALL SUBOPT_0x18
00039a f00c      	BRLT _0x7D
                 _0x7C:
00039b c003      	RJMP _0x7B
                 _0x7D:
00039c e0e1      	LDI  R30,LOW(1)
00039d e0f0      	LDI  R31,HIGH(1)
00039e c06f      	RJMP _0x1C7
                 ; 0000 017F             else if ((centered) && (fronted)) position = 2;
                 _0x7B:
00039f 940e 09d7 	CALL SUBOPT_0x17
0003a1 9754      	SBIW R26,20
0003a2 f41c      	BRGE _0x80
0003a3 940e 09e3 	CALL SUBOPT_0x19
0003a5 f00c      	BRLT _0x81
                 _0x80:
0003a6 c003      	RJMP _0x82
                 _0x81:
0003a7 940e 09dc 	CALL SUBOPT_0x18
0003a9 f00c      	BRLT _0x83
                 _0x82:
0003aa c003      	RJMP _0x7F
                 _0x83:
0003ab e0e2      	LDI  R30,LOW(2)
0003ac e0f0      	LDI  R31,HIGH(2)
0003ad c060      	RJMP _0x1C7
                 ; 0000 0180             else if ((righted) && (fronted)) position = 3;
                 _0x7F:
0003ae 940e 09e5 	CALL SUBOPT_0x1A
0003b0 f41c      	BRGE _0x86
0003b1 940e 09dc 	CALL SUBOPT_0x18
0003b3 f00c      	BRLT _0x87
                 _0x86:
0003b4 c003      	RJMP _0x85
                 _0x87:
0003b5 e0e3      	LDI  R30,LOW(3)
0003b6 e0f0      	LDI  R31,HIGH(3)
0003b7 c056      	RJMP _0x1C7
                 ; 0000 0181             else if ((lefted) && (middled)) position = 4;
                 _0x85:
0003b8 940e 09d7 	CALL SUBOPT_0x17
0003ba 9755      	SBIW R26,21
0003bb f044      	BRLT _0x8A
0003bc 940e 09ea 	CALL SUBOPT_0x1B
0003be f41c      	BRGE _0x8B
0003bf 940e 09f1 	CALL SUBOPT_0x1C
0003c1 f00c      	BRLT _0x8C
                 _0x8B:
0003c2 c001      	RJMP _0x8A
                 _0x8C:
0003c3 c001      	RJMP _0x8D
                 _0x8A:
0003c4 c003      	RJMP _0x89
                 _0x8D:
0003c5 e0e4      	LDI  R30,LOW(4)
0003c6 e0f0      	LDI  R31,HIGH(4)
0003c7 c046      	RJMP _0x1C7
                 ; 0000 0182             else if ((centered) && (middled)) position = 5;
                 _0x89:
0003c8 940e 09d7 	CALL SUBOPT_0x17
0003ca 9754      	SBIW R26,20
0003cb f41c      	BRGE _0x90
0003cc 940e 09e3 	CALL SUBOPT_0x19
0003ce f00c      	BRLT _0x91
                 _0x90:
0003cf c008      	RJMP _0x92
                 _0x91:
0003d0 940e 09ea 	CALL SUBOPT_0x1B
0003d2 f41c      	BRGE _0x93
0003d3 940e 09f1 	CALL SUBOPT_0x1C
0003d5 f00c      	BRLT _0x94
                 _0x93:
0003d6 c001      	RJMP _0x92
                 _0x94:
0003d7 c001      	RJMP _0x95
                 _0x92:
0003d8 c003      	RJMP _0x8F
                 _0x95:
0003d9 e0e5      	LDI  R30,LOW(5)
0003da e0f0      	LDI  R31,HIGH(5)
0003db c032      	RJMP _0x1C7
                 ; 0000 0183             else if ((righted) &&  (middled)) position = 6;
                 _0x8F:
0003dc 940e 09e5 	CALL SUBOPT_0x1A
0003de f444      	BRGE _0x98
0003df 940e 09ea 	CALL SUBOPT_0x1B
0003e1 f41c      	BRGE _0x99
0003e2 940e 09f1 	CALL SUBOPT_0x1C
0003e4 f00c      	BRLT _0x9A
                 _0x99:
0003e5 c001      	RJMP _0x98
                 _0x9A:
0003e6 c001      	RJMP _0x9B
                 _0x98:
0003e7 c003      	RJMP _0x97
                 _0x9B:
0003e8 e0e6      	LDI  R30,LOW(6)
0003e9 e0f0      	LDI  R31,HIGH(6)
0003ea c023      	RJMP _0x1C7
                 ; 0000 0184             else if ((lefted) && (backed)) position = 7;
                 _0x97:
0003eb 940e 09d7 	CALL SUBOPT_0x17
0003ed 9755      	SBIW R26,21
0003ee f01c      	BRLT _0x9E
0003ef 940e 09f8 	CALL SUBOPT_0x1D
0003f1 f00c      	BRLT _0x9F
                 _0x9E:
0003f2 c003      	RJMP _0x9D
                 _0x9F:
0003f3 e0e7      	LDI  R30,LOW(7)
0003f4 e0f0      	LDI  R31,HIGH(7)
0003f5 c018      	RJMP _0x1C7
                 ; 0000 0185             else if ((centered) && (backed)) position = 8;
                 _0x9D:
0003f6 940e 09d7 	CALL SUBOPT_0x17
0003f8 9754      	SBIW R26,20
0003f9 f41c      	BRGE _0xA2
0003fa 940e 09e3 	CALL SUBOPT_0x19
0003fc f00c      	BRLT _0xA3
                 _0xA2:
0003fd c003      	RJMP _0xA4
                 _0xA3:
0003fe 940e 09f8 	CALL SUBOPT_0x1D
000400 f00c      	BRLT _0xA5
                 _0xA4:
000401 c003      	RJMP _0xA1
                 _0xA5:
000402 e0e8      	LDI  R30,LOW(8)
000403 e0f0      	LDI  R31,HIGH(8)
000404 c009      	RJMP _0x1C7
                 ; 0000 0186             else if ((righted) && (backed)) position = 9;
                 _0xA1:
000405 940e 09e5 	CALL SUBOPT_0x1A
000407 f41c      	BRGE _0xA8
000408 940e 09f8 	CALL SUBOPT_0x1D
00040a f00c      	BRLT _0xA9
                 _0xA8:
00040b c006      	RJMP _0xA7
                 _0xA9:
00040c e0e9      	LDI  R30,LOW(9)
00040d e0f0      	LDI  R31,HIGH(9)
                 _0x1C7:
00040e 93e0 0174 	STS  _position,R30
000410 93f0 0175 	STS  _position+1,R31
                 ; 0000 0187         }
                 _0xA7:
                 ; 0000 0188 
                 ; 0000 0189         //set shift
                 ; 0000 018A         {
                 ; 0000 018B             if (position == 1)
000412 940e 09ff 	CALL SUBOPT_0x1E
000414 9711      	SBIW R26,1
000415 f551      	BRNE _0xAA
                 ; 0000 018C             {
                 ; 0000 018D                 #asm("wdr")
000416 95a8      	wdr
                 ; 0000 018E                 if (imin == 0) action = imin+2;
000417 2c06      	MOV  R0,R6
000418 2807      	OR   R0,R7
000419 f419      	BRNE _0xAB
00041a 01f3      	MOVW R30,R6
00041b 9632      	ADIW R30,2
00041c c01e      	RJMP _0x1C8
                 ; 0000 018F                 else if (imin >= 13 || imin <= 3) action = imin;
                 _0xAB:
00041d 940e 0a04 	CALL SUBOPT_0x1F
00041f f41c      	BRGE _0xAE
000420 940e 0a09 	CALL SUBOPT_0x20
000422 f01c      	BRLT _0xAD
                 _0xAE:
000423 940e 0a0e 	CALL SUBOPT_0x21
                 ; 0000 0190                 else if (imin >= 4 && imin <= 7) action = imin+2;
000425 c019      	RJMP _0xB0
                 _0xAD:
000426 940e 0a13 	CALL SUBOPT_0x22
000428 f01c      	BRLT _0xB2
000429 940e 0a18 	CALL SUBOPT_0x23
00042b f40c      	BRGE _0xB3
                 _0xB2:
00042c c003      	RJMP _0xB1
                 _0xB3:
00042d 01f3      	MOVW R30,R6
00042e 9632      	ADIW R30,2
00042f c00b      	RJMP _0x1C8
                 ; 0000 0191                 else if (imin >= 8 && imin <= 12) action = imin-2;
                 _0xB1:
000430 e0e8      	LDI  R30,LOW(8)
000431 e0f0      	LDI  R31,HIGH(8)
000432 166e      	CP   R6,R30
000433 067f      	CPC  R7,R31
000434 f01c      	BRLT _0xB6
000435 940e 0a1d 	CALL SUBOPT_0x24
000437 f40c      	BRGE _0xB7
                 _0xB6:
000438 c006      	RJMP _0xB5
                 _0xB7:
000439 01f3      	MOVW R30,R6
00043a 9732      	SBIW R30,2
                 _0x1C8:
00043b 93e0 0176 	STS  _action,R30
00043d 93f0 0177 	STS  _action+1,R31
                 ; 0000 0192             }
                 _0xB5:
                 _0xB0:
                 ; 0000 0193             else if (position == 2)
00043f c1b0      	RJMP _0xB8
                 _0xAA:
000440 940e 09ff 	CALL SUBOPT_0x1E
000442 9712      	SBIW R26,2
000443 f511      	BRNE _0xB9
                 ; 0000 0194             {
                 ; 0000 0195                 #asm("wdr")
000444 95a8      	wdr
                 ; 0000 0196                 if (imin >= 13 || imin <= 3) action = imin;
000445 940e 0a04 	CALL SUBOPT_0x1F
000447 f41c      	BRGE _0xBB
000448 940e 0a09 	CALL SUBOPT_0x20
00044a f01c      	BRLT _0xBA
                 _0xBB:
00044b 940e 0a0e 	CALL SUBOPT_0x21
                 ; 0000 0197                 else if (imin >= 4 && imin <= 8) action = imin+2;
00044d c017      	RJMP _0xBD
                 _0xBA:
00044e 940e 0a13 	CALL SUBOPT_0x22
000450 f01c      	BRLT _0xBF
000451 940e 0a22 	CALL SUBOPT_0x25
000453 f40c      	BRGE _0xC0
                 _0xBF:
000454 c003      	RJMP _0xBE
                 _0xC0:
000455 01f3      	MOVW R30,R6
000456 9632      	ADIW R30,2
000457 c009      	RJMP _0x1C9
                 ; 0000 0198                 else if (imin >= 9 && imin <= 12) action = imin-2;
                 _0xBE:
000458 940e 0a27 	CALL SUBOPT_0x26
00045a f01c      	BRLT _0xC3
00045b 940e 0a1d 	CALL SUBOPT_0x24
00045d f40c      	BRGE _0xC4
                 _0xC3:
00045e c006      	RJMP _0xC2
                 _0xC4:
00045f 01f3      	MOVW R30,R6
000460 9732      	SBIW R30,2
                 _0x1C9:
000461 93e0 0176 	STS  _action,R30
000463 93f0 0177 	STS  _action+1,R31
                 ; 0000 0199             }
                 _0xC2:
                 _0xBD:
                 ; 0000 019A             else if (position == 3)
000465 c18a      	RJMP _0xC5
                 _0xB9:
000466 940e 09ff 	CALL SUBOPT_0x1E
000468 9713      	SBIW R26,3
000469 f511      	BRNE _0xC6
                 ; 0000 019B             {
                 ; 0000 019C                 #asm("wdr")
00046a 95a8      	wdr
                 ; 0000 019D                 if (imin >= 13 || imin <= 3) action = imin;
00046b 940e 0a04 	CALL SUBOPT_0x1F
00046d f41c      	BRGE _0xC8
00046e 940e 0a09 	CALL SUBOPT_0x20
000470 f01c      	BRLT _0xC7
                 _0xC8:
000471 940e 0a0e 	CALL SUBOPT_0x21
                 ; 0000 019E                 else if (imin >= 4 && imin <= 8) action = imin+2;
000473 c017      	RJMP _0xCA
                 _0xC7:
000474 940e 0a13 	CALL SUBOPT_0x22
000476 f01c      	BRLT _0xCC
000477 940e 0a22 	CALL SUBOPT_0x25
000479 f40c      	BRGE _0xCD
                 _0xCC:
00047a c003      	RJMP _0xCB
                 _0xCD:
00047b 01f3      	MOVW R30,R6
00047c 9632      	ADIW R30,2
00047d c009      	RJMP _0x1CA
                 ; 0000 019F                 else if (imin >= 9 && imin <= 12) action = imin-2;
                 _0xCB:
00047e 940e 0a27 	CALL SUBOPT_0x26
000480 f01c      	BRLT _0xD0
000481 940e 0a1d 	CALL SUBOPT_0x24
000483 f40c      	BRGE _0xD1
                 _0xD0:
000484 c006      	RJMP _0xCF
                 _0xD1:
000485 01f3      	MOVW R30,R6
000486 9732      	SBIW R30,2
                 _0x1CA:
000487 93e0 0176 	STS  _action,R30
000489 93f0 0177 	STS  _action+1,R31
                 ; 0000 01A0             }
                 _0xCF:
                 _0xCA:
                 ; 0000 01A1             else if (position == 4)
00048b c164      	RJMP _0xD2
                 _0xC6:
00048c 940e 09ff 	CALL SUBOPT_0x1E
00048e 9714      	SBIW R26,4
00048f f579      	BRNE _0xD3
                 ; 0000 01A2             {
                 ; 0000 01A3                 #asm("wdr")
000490 95a8      	wdr
                 ; 0000 01A4                 if (imin == 0) action = imin+1;
000491 2c06      	MOV  R0,R6
000492 2807      	OR   R0,R7
000493 f419      	BRNE _0xD4
000494 01f3      	MOVW R30,R6
000495 9631      	ADIW R30,1
000496 c023      	RJMP _0x1CB
                 ; 0000 01A5                 else if (imin <= 2) action = imin+2;
                 _0xD4:
000497 e0e2      	LDI  R30,LOW(2)
000498 e0f0      	LDI  R31,HIGH(2)
000499 15e6      	CP   R30,R6
00049a 05f7      	CPC  R31,R7
00049b f01c      	BRLT _0xD6
00049c 01f3      	MOVW R30,R6
00049d 9632      	ADIW R30,2
00049e c01b      	RJMP _0x1CB
                 ; 0000 01A6                 else if (imin >= 3 && imin <= 6) action = imin+2;
                 _0xD6:
00049f e0e3      	LDI  R30,LOW(3)
0004a0 e0f0      	LDI  R31,HIGH(3)
0004a1 166e      	CP   R6,R30
0004a2 067f      	CPC  R7,R31
0004a3 f02c      	BRLT _0xD9
0004a4 e0e6      	LDI  R30,LOW(6)
0004a5 e0f0      	LDI  R31,HIGH(6)
0004a6 15e6      	CP   R30,R6
0004a7 05f7      	CPC  R31,R7
0004a8 f40c      	BRGE _0xDA
                 _0xD9:
0004a9 c003      	RJMP _0xD8
                 _0xDA:
0004aa 01f3      	MOVW R30,R6
0004ab 9632      	ADIW R30,2
0004ac c00d      	RJMP _0x1CB
                 ; 0000 01A7                 else if (imin == 7) action = imin+1;
                 _0xD8:
0004ad 940e 0a18 	CALL SUBOPT_0x23
0004af f419      	BRNE _0xDC
0004b0 01f3      	MOVW R30,R6
0004b1 9631      	ADIW R30,1
0004b2 c007      	RJMP _0x1CB
                 ; 0000 01A8                 else if (imin >= 8) action = imin-1;
                 _0xDC:
0004b3 e0e8      	LDI  R30,LOW(8)
0004b4 e0f0      	LDI  R31,HIGH(8)
0004b5 166e      	CP   R6,R30
0004b6 067f      	CPC  R7,R31
0004b7 f034      	BRLT _0xDE
0004b8 01f3      	MOVW R30,R6
0004b9 9731      	SBIW R30,1
                 _0x1CB:
0004ba 93e0 0176 	STS  _action,R30
0004bc 93f0 0177 	STS  _action+1,R31
                 ; 0000 01A9             }
                 _0xDE:
                 ; 0000 01AA             else if (position == 5)
0004be c131      	RJMP _0xDF
                 _0xD3:
0004bf 940e 09ff 	CALL SUBOPT_0x1E
0004c1 9715      	SBIW R26,5
0004c2 f009      	BREQ PC+2
0004c3 c042      	RJMP _0xE0
                 ; 0000 01AB             {
                 ; 0000 01AC                 #asm("wdr")
0004c4 95a8      	wdr
                 ; 0000 01AD                 if (imin >= 15 || imin <= 1) action = imin;
0004c5 e0ef      	LDI  R30,LOW(15)
0004c6 e0f0      	LDI  R31,HIGH(15)
0004c7 166e      	CP   R6,R30
0004c8 067f      	CPC  R7,R31
0004c9 f42c      	BRGE _0xE2
0004ca e0e1      	LDI  R30,LOW(1)
0004cb e0f0      	LDI  R31,HIGH(1)
0004cc 15e6      	CP   R30,R6
0004cd 05f7      	CPC  R31,R7
0004ce f01c      	BRLT _0xE1
                 _0xE2:
0004cf 940e 0a0e 	CALL SUBOPT_0x21
                 ; 0000 01AE                 else if (imin >= 2 && imin <= 6) action = imin+2;
0004d1 c033      	RJMP _0xE4
                 _0xE1:
0004d2 e0e2      	LDI  R30,LOW(2)
0004d3 e0f0      	LDI  R31,HIGH(2)
0004d4 166e      	CP   R6,R30
0004d5 067f      	CPC  R7,R31
0004d6 f02c      	BRLT _0xE6
0004d7 e0e6      	LDI  R30,LOW(6)
0004d8 e0f0      	LDI  R31,HIGH(6)
0004d9 15e6      	CP   R30,R6
0004da 05f7      	CPC  R31,R7
0004db f40c      	BRGE _0xE7
                 _0xE6:
0004dc c003      	RJMP _0xE5
                 _0xE7:
0004dd 01f3      	MOVW R30,R6
0004de 9632      	ADIW R30,2
0004df c021      	RJMP _0x1CC
                 ; 0000 01AF                 else if (imin >= 7 && imin <= 8) action = imin+1;
                 _0xE5:
0004e0 e0e7      	LDI  R30,LOW(7)
0004e1 e0f0      	LDI  R31,HIGH(7)
0004e2 166e      	CP   R6,R30
0004e3 067f      	CPC  R7,R31
0004e4 f01c      	BRLT _0xEA
0004e5 940e 0a22 	CALL SUBOPT_0x25
0004e7 f40c      	BRGE _0xEB
                 _0xEA:
0004e8 c003      	RJMP _0xE9
                 _0xEB:
0004e9 01f3      	MOVW R30,R6
0004ea 9631      	ADIW R30,1
0004eb c015      	RJMP _0x1CC
                 ; 0000 01B0                 else if (imin == 9) action = imin-1;
                 _0xE9:
0004ec e0e9      	LDI  R30,LOW(9)
0004ed e0f0      	LDI  R31,HIGH(9)
0004ee 15e6      	CP   R30,R6
0004ef 05f7      	CPC  R31,R7
0004f0 f419      	BRNE _0xED
0004f1 01f3      	MOVW R30,R6
0004f2 9731      	SBIW R30,1
0004f3 c00d      	RJMP _0x1CC
                 ; 0000 01B1                 else if (imin >= 10 && imin <= 14) action = imin-2;
                 _0xED:
0004f4 e0ea      	LDI  R30,LOW(10)
0004f5 e0f0      	LDI  R31,HIGH(10)
0004f6 166e      	CP   R6,R30
0004f7 067f      	CPC  R7,R31
0004f8 f02c      	BRLT _0xF0
0004f9 e0ee      	LDI  R30,LOW(14)
0004fa e0f0      	LDI  R31,HIGH(14)
0004fb 15e6      	CP   R30,R6
0004fc 05f7      	CPC  R31,R7
0004fd f40c      	BRGE _0xF1
                 _0xF0:
0004fe c006      	RJMP _0xEF
                 _0xF1:
0004ff 01f3      	MOVW R30,R6
000500 9732      	SBIW R30,2
                 _0x1CC:
000501 93e0 0176 	STS  _action,R30
000503 93f0 0177 	STS  _action+1,R31
                 ; 0000 01B2             }
                 _0xEF:
                 _0xE4:
                 ; 0000 01B3             else if (position == 6)
000505 c0ea      	RJMP _0xF2
                 _0xE0:
000506 940e 09ff 	CALL SUBOPT_0x1E
000508 9716      	SBIW R26,6
000509 f579      	BRNE _0xF3
                 ; 0000 01B4             {
                 ; 0000 01B5                 #asm("wdr")
00050a 95a8      	wdr
                 ; 0000 01B6                 if (imin == 0) action = imin-1;
00050b 2c06      	MOV  R0,R6
00050c 2807      	OR   R0,R7
00050d f419      	BRNE _0xF4
00050e 01f3      	MOVW R30,R6
00050f 9731      	SBIW R30,1
000510 c023      	RJMP _0x1CD
                 ; 0000 01B7                 else if (imin >= 14) action = imin-2;
                 _0xF4:
000511 e0ee      	LDI  R30,LOW(14)
000512 e0f0      	LDI  R31,HIGH(14)
000513 166e      	CP   R6,R30
000514 067f      	CPC  R7,R31
000515 f01c      	BRLT _0xF6
000516 01f3      	MOVW R30,R6
000517 9732      	SBIW R30,2
000518 c01b      	RJMP _0x1CD
                 ; 0000 01B8                 else if (imin <= 13 && imin >= 10) action = imin-2;
                 _0xF6:
000519 e0ed      	LDI  R30,LOW(13)
00051a e0f0      	LDI  R31,HIGH(13)
00051b 15e6      	CP   R30,R6
00051c 05f7      	CPC  R31,R7
00051d f02c      	BRLT _0xF9
00051e e0ea      	LDI  R30,LOW(10)
00051f e0f0      	LDI  R31,HIGH(10)
000520 166e      	CP   R6,R30
000521 067f      	CPC  R7,R31
000522 f40c      	BRGE _0xFA
                 _0xF9:
000523 c003      	RJMP _0xF8
                 _0xFA:
000524 01f3      	MOVW R30,R6
000525 9732      	SBIW R30,2
000526 c00d      	RJMP _0x1CD
                 ; 0000 01B9                 else if (imin == 9) action = imin-1;
                 _0xF8:
000527 e0e9      	LDI  R30,LOW(9)
000528 e0f0      	LDI  R31,HIGH(9)
000529 15e6      	CP   R30,R6
00052a 05f7      	CPC  R31,R7
00052b f419      	BRNE _0xFC
00052c 01f3      	MOVW R30,R6
00052d 9731      	SBIW R30,1
00052e c005      	RJMP _0x1CD
                 ; 0000 01BA                 else if (imin <= 8) action = imin+1;
                 _0xFC:
00052f 940e 0a22 	CALL SUBOPT_0x25
000531 f034      	BRLT _0xFE
000532 01f3      	MOVW R30,R6
000533 9631      	ADIW R30,1
                 _0x1CD:
000534 93e0 0176 	STS  _action,R30
000536 93f0 0177 	STS  _action+1,R31
                 ; 0000 01BB             }
                 _0xFE:
                 ; 0000 01BC             else if (position == 7)
000538 c0b7      	RJMP _0xFF
                 _0xF3:
000539 940e 09ff 	CALL SUBOPT_0x1E
00053b 9717      	SBIW R26,7
00053c f5a9      	BRNE _0x100
                 ; 0000 01BD             {
                 ; 0000 01BE                 #asm("wdr")
00053d 95a8      	wdr
                 ; 0000 01BF                 if (imin <= 3) action = imin+1;
00053e 940e 0a09 	CALL SUBOPT_0x20
000540 f01c      	BRLT _0x101
000541 01f3      	MOVW R30,R6
000542 9631      	ADIW R30,1
000543 c029      	RJMP _0x1CE
                 ; 0000 01C0                 else if (imin == 4) action = imin+2;
                 _0x101:
000544 940e 0a2c 	CALL SUBOPT_0x27
000546 f419      	BRNE _0x103
000547 01f3      	MOVW R30,R6
000548 9632      	ADIW R30,2
000549 c023      	RJMP _0x1CE
                 ; 0000 01C1                 else if (imin >= 5 && imin <= 7) action = imin-1;
                 _0x103:
00054a e0e5      	LDI  R30,LOW(5)
00054b e0f0      	LDI  R31,HIGH(5)
00054c 166e      	CP   R6,R30
00054d 067f      	CPC  R7,R31
00054e f01c      	BRLT _0x106
00054f 940e 0a18 	CALL SUBOPT_0x23
000551 f40c      	BRGE _0x107
                 _0x106:
000552 c003      	RJMP _0x105
                 _0x107:
000553 01f3      	MOVW R30,R6
000554 9731      	SBIW R30,1
000555 c017      	RJMP _0x1CE
                 ; 0000 01C2                 else if (imin == 8) action = imin;
                 _0x105:
000556 940e 0a22 	CALL SUBOPT_0x25
000558 f419      	BRNE _0x109
000559 940e 0a0e 	CALL SUBOPT_0x21
                 ; 0000 01C3                 else if (imin >= 9 && imin <= 11) action = imin+1;
00055b c015      	RJMP _0x10A
                 _0x109:
00055c 940e 0a27 	CALL SUBOPT_0x26
00055e f02c      	BRLT _0x10C
00055f e0eb      	LDI  R30,LOW(11)
000560 e0f0      	LDI  R31,HIGH(11)
000561 15e6      	CP   R30,R6
000562 05f7      	CPC  R31,R7
000563 f40c      	BRGE _0x10D
                 _0x10C:
000564 c003      	RJMP _0x10B
                 _0x10D:
000565 01f3      	MOVW R30,R6
000566 9631      	ADIW R30,1
000567 c005      	RJMP _0x1CE
                 ; 0000 01C4                 else if (imin >= 12) action = imin-2;
                 _0x10B:
000568 940e 0a31 	CALL SUBOPT_0x28
00056a f034      	BRLT _0x10F
00056b 01f3      	MOVW R30,R6
00056c 9732      	SBIW R30,2
                 _0x1CE:
00056d 93e0 0176 	STS  _action,R30
00056f 93f0 0177 	STS  _action+1,R31
                 ; 0000 01C5             }
                 _0x10F:
                 _0x10A:
                 ; 0000 01C6             else if (position == 8)
000571 c07e      	RJMP _0x110
                 _0x100:
000572 940e 09ff 	CALL SUBOPT_0x1E
000574 9718      	SBIW R26,8
000575 f5e1      	BRNE _0x111
                 ; 0000 01C7             {
                 ; 0000 01C8                 #asm("wdr")
000576 95a8      	wdr
                 ; 0000 01C9                 if (imin >= 15 || imin <= 1) action = imin;
000577 e0ef      	LDI  R30,LOW(15)
000578 e0f0      	LDI  R31,HIGH(15)
000579 166e      	CP   R6,R30
00057a 067f      	CPC  R7,R31
00057b f42c      	BRGE _0x113
00057c e0e1      	LDI  R30,LOW(1)
00057d e0f0      	LDI  R31,HIGH(1)
00057e 15e6      	CP   R30,R6
00057f 05f7      	CPC  R31,R7
000580 f01c      	BRLT _0x112
                 _0x113:
000581 940e 0a0e 	CALL SUBOPT_0x21
                 ; 0000 01CA                 else if (imin >= 2 && imin <= 5) action = imin+2;
000583 c02d      	RJMP _0x115
                 _0x112:
000584 e0e2      	LDI  R30,LOW(2)
000585 e0f0      	LDI  R31,HIGH(2)
000586 166e      	CP   R6,R30
000587 067f      	CPC  R7,R31
000588 f02c      	BRLT _0x117
000589 e0e5      	LDI  R30,LOW(5)
00058a e0f0      	LDI  R31,HIGH(5)
00058b 15e6      	CP   R30,R6
00058c 05f7      	CPC  R31,R7
00058d f40c      	BRGE _0x118
                 _0x117:
00058e c003      	RJMP _0x116
                 _0x118:
00058f 01f3      	MOVW R30,R6
000590 9632      	ADIW R30,2
000591 c01b      	RJMP _0x1CF
                 ; 0000 01CB                 else if (imin >= 11 && imin <= 14) action = imin-2;
                 _0x116:
000592 e0eb      	LDI  R30,LOW(11)
000593 e0f0      	LDI  R31,HIGH(11)
000594 166e      	CP   R6,R30
000595 067f      	CPC  R7,R31
000596 f02c      	BRLT _0x11B
000597 e0ee      	LDI  R30,LOW(14)
000598 e0f0      	LDI  R31,HIGH(14)
000599 15e6      	CP   R30,R6
00059a 05f7      	CPC  R31,R7
00059b f40c      	BRGE _0x11C
                 _0x11B:
00059c c003      	RJMP _0x11A
                 _0x11C:
00059d 01f3      	MOVW R30,R6
00059e 9732      	SBIW R30,2
00059f c00d      	RJMP _0x1CF
                 ; 0000 01CC                 else if (imin >= 6 && imin <= 10) action = 1000;
                 _0x11A:
0005a0 e0e6      	LDI  R30,LOW(6)
0005a1 e0f0      	LDI  R31,HIGH(6)
0005a2 166e      	CP   R6,R30
0005a3 067f      	CPC  R7,R31
0005a4 f02c      	BRLT _0x11F
0005a5 e0ea      	LDI  R30,LOW(10)
0005a6 e0f0      	LDI  R31,HIGH(10)
0005a7 15e6      	CP   R30,R6
0005a8 05f7      	CPC  R31,R7
0005a9 f40c      	BRGE _0x120
                 _0x11F:
0005aa c006      	RJMP _0x11E
                 _0x120:
0005ab eee8      	LDI  R30,LOW(1000)
0005ac e0f3      	LDI  R31,HIGH(1000)
                 _0x1CF:
0005ad 93e0 0176 	STS  _action,R30
0005af 93f0 0177 	STS  _action+1,R31
                 ; 0000 01CD             }
                 _0x11E:
                 _0x115:
                 ; 0000 01CE             else if (position == 9)
0005b1 c03e      	RJMP _0x121
                 _0x111:
0005b2 940e 09ff 	CALL SUBOPT_0x1E
0005b4 9719      	SBIW R26,9
0005b5 f5d1      	BRNE _0x122
                 ; 0000 01CF             {
                 ; 0000 01D0                 #asm("wdr")
0005b6 95a8      	wdr
                 ; 0000 01D1                 if (imin == 0) action = 15;
0005b7 2c06      	MOV  R0,R6
0005b8 2807      	OR   R0,R7
0005b9 f419      	BRNE _0x123
0005ba e0ef      	LDI  R30,LOW(15)
0005bb e0f0      	LDI  R31,HIGH(15)
0005bc c02f      	RJMP _0x1D0
                 ; 0000 01D2                 else if (imin >= 13) action = imin-1;
                 _0x123:
0005bd 940e 0a04 	CALL SUBOPT_0x1F
0005bf f01c      	BRLT _0x125
0005c0 01f3      	MOVW R30,R6
0005c1 9731      	SBIW R30,1
0005c2 c029      	RJMP _0x1D0
                 ; 0000 01D3                 else if (imin == 12) action = imin-2;
                 _0x125:
0005c3 940e 0a1d 	CALL SUBOPT_0x24
0005c5 f419      	BRNE _0x127
0005c6 01f3      	MOVW R30,R6
0005c7 9732      	SBIW R30,2
0005c8 c023      	RJMP _0x1D0
                 ; 0000 01D4                 else if (imin <= 11 && imin >= 9) action = imin+1;
                 _0x127:
0005c9 e0eb      	LDI  R30,LOW(11)
0005ca e0f0      	LDI  R31,HIGH(11)
0005cb 15e6      	CP   R30,R6
0005cc 05f7      	CPC  R31,R7
0005cd f01c      	BRLT _0x12A
0005ce 940e 0a27 	CALL SUBOPT_0x26
0005d0 f40c      	BRGE _0x12B
                 _0x12A:
0005d1 c003      	RJMP _0x129
                 _0x12B:
0005d2 01f3      	MOVW R30,R6
0005d3 9631      	ADIW R30,1
0005d4 c017      	RJMP _0x1D0
                 ; 0000 01D5                 else if (imin == 8) action = imin;
                 _0x129:
0005d5 940e 0a22 	CALL SUBOPT_0x25
0005d7 f419      	BRNE _0x12D
0005d8 940e 0a0e 	CALL SUBOPT_0x21
                 ; 0000 01D6                 else if (imin >= 5 && imin <= 7) action= imin-1;
0005da c015      	RJMP _0x12E
                 _0x12D:
0005db e0e5      	LDI  R30,LOW(5)
0005dc e0f0      	LDI  R31,HIGH(5)
0005dd 166e      	CP   R6,R30
0005de 067f      	CPC  R7,R31
0005df f01c      	BRLT _0x130
0005e0 940e 0a18 	CALL SUBOPT_0x23
0005e2 f40c      	BRGE _0x131
                 _0x130:
0005e3 c003      	RJMP _0x12F
                 _0x131:
0005e4 01f3      	MOVW R30,R6
0005e5 9731      	SBIW R30,1
0005e6 c005      	RJMP _0x1D0
                 ; 0000 01D7                 else if (imin <= 4) action = imin+2;
                 _0x12F:
0005e7 940e 0a2c 	CALL SUBOPT_0x27
0005e9 f034      	BRLT _0x133
0005ea 01f3      	MOVW R30,R6
0005eb 9632      	ADIW R30,2
                 _0x1D0:
0005ec 93e0 0176 	STS  _action,R30
0005ee 93f0 0177 	STS  _action+1,R31
                 ; 0000 01D8             }
                 _0x133:
                 _0x12E:
                 ; 0000 01D9     }
                 _0x122:
                 _0x121:
                 _0x110:
                 _0xFF:
                 _0xF2:
                 _0xDF:
                 _0xD2:
                 _0xC5:
                 _0xB8:
                 ; 0000 01DA 
                 ; 0000 01DB          //command
                 ; 0000 01DC         switch (action)
0005f0 91e0 0176 	LDS  R30,_action
0005f2 91f0 0177 	LDS  R31,_action+1
                 ; 0000 01DD         {
                 ; 0000 01DE             case 0:
0005f4 9730      	SBIW R30,0
0005f5 f461      	BRNE _0x137
                 ; 0000 01DF                 motor(forward);
0005f6 940e 0a36 	CALL SUBOPT_0x29
0005f8 940e 0a36 	CALL SUBOPT_0x29
0005fa 940e 0a3d 	CALL SUBOPT_0x2A
0005fc 940e 0a44 	CALL SUBOPT_0x2B
0005fe 01df      	MOVW R26,R30
0005ff 940e 029d 	CALL _motor
                 ; 0000 01E0             break;
000601 c0fa      	RJMP _0x136
                 ; 0000 01E1 
                 ; 0000 01E2             case 1:
                 _0x137:
000602 30e1      	CPI  R30,LOW(0x1)
000603 e0a0      	LDI  R26,HIGH(0x1)
000604 07fa      	CPC  R31,R26
000605 f471      	BRNE _0x138
                 ; 0000 01E3                 motor(v,v/2,-v,-v/2);
000606 940e 0a36 	CALL SUBOPT_0x29
000608 940e 0a47 	CALL SUBOPT_0x2C
00060a 940e 0a44 	CALL SUBOPT_0x2B
00060c 940e 0a44 	CALL SUBOPT_0x2B
00060e 940e 0a50 	CALL SUBOPT_0x2D
000610 01df      	MOVW R26,R30
000611 940e 029d 	CALL _motor
                 ; 0000 01E4             break;
000613 c0e8      	RJMP _0x136
                 ; 0000 01E5 
                 ; 0000 01E6             case 2:
                 _0x138:
000614 30e2      	CPI  R30,LOW(0x2)
000615 e0a0      	LDI  R26,HIGH(0x2)
000616 07fa      	CPC  R31,R26
000617 f439      	BRNE _0x139
                 ; 0000 01E7                 motor(v,0,-v,0);
000618 940e 0a36 	CALL SUBOPT_0x29
00061a 940e 0a56 	CALL SUBOPT_0x2E
00061c 940e 0a59 	CALL SUBOPT_0x2F
                 ; 0000 01E8             break;
00061e c0dd      	RJMP _0x136
                 ; 0000 01E9 
                 ; 0000 01EA             case 3:
                 _0x139:
00061f 30e3      	CPI  R30,LOW(0x3)
000620 e0a0      	LDI  R26,HIGH(0x3)
000621 07fa      	CPC  R31,R26
000622 f481      	BRNE _0x13A
                 ; 0000 01EB                 motor(v,-v/2,-v,v/2);
000623 940e 0a36 	CALL SUBOPT_0x29
000625 940e 0a3d 	CALL SUBOPT_0x2A
000627 940e 0a50 	CALL SUBOPT_0x2D
000629 940e 0a44 	CALL SUBOPT_0x2B
00062b 93fa      	ST   -Y,R31
00062c 93ea      	ST   -Y,R30
00062d 940e 0a47 	CALL SUBOPT_0x2C
00062f 01df      	MOVW R26,R30
000630 940e 029d 	CALL _motor
                 ; 0000 01EC             break;
000632 c0c9      	RJMP _0x136
                 ; 0000 01ED 
                 ; 0000 01EE             case 4:
                 _0x13A:
000633 30e4      	CPI  R30,LOW(0x4)
000634 e0a0      	LDI  R26,HIGH(0x4)
000635 07fa      	CPC  R31,R26
000636 f449      	BRNE _0x13B
                 ; 0000 01EF                 motor(right);
000637 940e 0a36 	CALL SUBOPT_0x29
000639 940e 0a3d 	CALL SUBOPT_0x2A
00063b 940e 0a44 	CALL SUBOPT_0x2B
00063d 940e 0a5f 	CALL SUBOPT_0x30
                 ; 0000 01F0             break;
00063f c0bc      	RJMP _0x136
                 ; 0000 01F1 
                 ; 0000 01F2             case 5:
                 _0x13B:
000640 30e5      	CPI  R30,LOW(0x5)
000641 e0a0      	LDI  R26,HIGH(0x5)
000642 07fa      	CPC  R31,R26
000643 f459      	BRNE _0x13C
                 ; 0000 01F3                 motor(v/2,-v,-v/2,v);
000644 940e 0a47 	CALL SUBOPT_0x2C
000646 940e 0a44 	CALL SUBOPT_0x2B
000648 940e 0a44 	CALL SUBOPT_0x2B
00064a 940e 0a50 	CALL SUBOPT_0x2D
00064c 940e 0a5f 	CALL SUBOPT_0x30
                 ; 0000 01F4             break;
00064e c0ad      	RJMP _0x136
                 ; 0000 01F5 
                 ; 0000 01F6             case 6:
                 _0x13C:
00064f 30e6      	CPI  R30,LOW(0x6)
000650 e0a0      	LDI  R26,HIGH(0x6)
000651 07fa      	CPC  R31,R26
000652 f439      	BRNE _0x13D
                 ; 0000 01F7                 motor(0,-v,0,v);
000653 940e 0a56 	CALL SUBOPT_0x2E
000655 940e 0a67 	CALL SUBOPT_0x31
000657 940e 0a5f 	CALL SUBOPT_0x30
                 ; 0000 01F8             break;
000659 c0a2      	RJMP _0x136
                 ; 0000 01F9 
                 ; 0000 01FA             case 7:
                 _0x13D:
00065a 30e7      	CPI  R30,LOW(0x7)
00065b e0a0      	LDI  R26,HIGH(0x7)
00065c 07fa      	CPC  R31,R26
00065d f471      	BRNE _0x13E
                 ; 0000 01FB                 motor(-v/2,-v,v/2,v);
00065e 940e 0a3d 	CALL SUBOPT_0x2A
000660 01bf      	MOVW R22,R30
000661 940e 0a50 	CALL SUBOPT_0x2D
000663 93fa      	ST   -Y,R31
000664 93ea      	ST   -Y,R30
000665 937a      	ST   -Y,R23
000666 936a      	ST   -Y,R22
000667 940e 0a47 	CALL SUBOPT_0x2C
000669 940e 0a5f 	CALL SUBOPT_0x30
                 ; 0000 01FC             break;
00066b c090      	RJMP _0x136
                 ; 0000 01FD 
                 ; 0000 01FE             case 8:
                 _0x13E:
00066c 30e8      	CPI  R30,LOW(0x8)
00066d e0a0      	LDI  R26,HIGH(0x8)
00066e 07fa      	CPC  R31,R26
00066f f459      	BRNE _0x13F
                 ; 0000 01FF                 motor(back);
000670 940e 0a3d 	CALL SUBOPT_0x2A
000672 93fa      	ST   -Y,R31
000673 93ea      	ST   -Y,R30
000674 940e 0a6c 	CALL SUBOPT_0x32
000676 940e 0a6f 	CALL SUBOPT_0x33
000678 940e 029d 	CALL _motor
                 ; 0000 0200             break;
00067a c081      	RJMP _0x136
                 ; 0000 0201 
                 ; 0000 0202             case 9:
                 _0x13F:
00067b 30e9      	CPI  R30,LOW(0x9)
00067c e0a0      	LDI  R26,HIGH(0x9)
00067d 07fa      	CPC  R31,R26
00067e f471      	BRNE _0x140
                 ; 0000 0203                 motor(-v,-v/2,v,v/2);
00067f 940e 0a3d 	CALL SUBOPT_0x2A
000681 93fa      	ST   -Y,R31
000682 93ea      	ST   -Y,R30
000683 940e 0a50 	CALL SUBOPT_0x2D
000685 940e 0a6c 	CALL SUBOPT_0x32
000687 940e 0a47 	CALL SUBOPT_0x2C
000689 01df      	MOVW R26,R30
00068a 940e 029d 	CALL _motor
                 ; 0000 0204             break;
00068c c06f      	RJMP _0x136
                 ; 0000 0205 
                 ; 0000 0206             case 10:
                 _0x140:
00068d 30ea      	CPI  R30,LOW(0xA)
00068e e0a0      	LDI  R26,HIGH(0xA)
00068f 07fa      	CPC  R31,R26
000690 f459      	BRNE _0x141
                 ; 0000 0207                 motor(-v,0,v,0);
000691 940e 0a3d 	CALL SUBOPT_0x2A
000693 940e 0a67 	CALL SUBOPT_0x31
000695 940e 0a6c 	CALL SUBOPT_0x32
000697 e0a0      	LDI  R26,LOW(0)
000698 e0b0      	LDI  R27,0
000699 940e 029d 	CALL _motor
                 ; 0000 0208             break;
00069b c060      	RJMP _0x136
                 ; 0000 0209 
                 ; 0000 020A             case 11:
                 _0x141:
00069c 30eb      	CPI  R30,LOW(0xB)
00069d e0a0      	LDI  R26,HIGH(0xB)
00069e 07fa      	CPC  R31,R26
00069f f481      	BRNE _0x142
                 ; 0000 020B                 motor(-v,v/2,v,-v/2);
0006a0 940e 0a3d 	CALL SUBOPT_0x2A
0006a2 93fa      	ST   -Y,R31
0006a3 93ea      	ST   -Y,R30
0006a4 940e 0a47 	CALL SUBOPT_0x2C
0006a6 940e 0a6c 	CALL SUBOPT_0x32
0006a8 940e 0a3d 	CALL SUBOPT_0x2A
0006aa 940e 0a50 	CALL SUBOPT_0x2D
0006ac 01df      	MOVW R26,R30
0006ad 940e 029d 	CALL _motor
                 ; 0000 020C             break;
0006af c04c      	RJMP _0x136
                 ; 0000 020D 
                 ; 0000 020E             case 12:
                 _0x142:
0006b0 30ec      	CPI  R30,LOW(0xC)
0006b1 e0a0      	LDI  R26,HIGH(0xC)
0006b2 07fa      	CPC  R31,R26
0006b3 f461      	BRNE _0x143
                 ; 0000 020F                 motor(left);
0006b4 940e 0a3d 	CALL SUBOPT_0x2A
0006b6 940e 0a6c 	CALL SUBOPT_0x32
0006b8 940e 0a36 	CALL SUBOPT_0x29
0006ba 940e 0a3d 	CALL SUBOPT_0x2A
0006bc 01df      	MOVW R26,R30
0006bd 940e 029d 	CALL _motor
                 ; 0000 0210             break;
0006bf c03c      	RJMP _0x136
                 ; 0000 0211 
                 ; 0000 0212             case 13:
                 _0x143:
0006c0 30ed      	CPI  R30,LOW(0xD)
0006c1 e0a0      	LDI  R26,HIGH(0xD)
0006c2 07fa      	CPC  R31,R26
0006c3 f471      	BRNE _0x144
                 ; 0000 0213                 motor(-v/2,v,v/2,-v);
0006c4 940e 0a3d 	CALL SUBOPT_0x2A
0006c6 940e 0a50 	CALL SUBOPT_0x2D
0006c8 940e 0a6c 	CALL SUBOPT_0x32
0006ca 940e 0a47 	CALL SUBOPT_0x2C
0006cc 940e 0a44 	CALL SUBOPT_0x2B
0006ce 01df      	MOVW R26,R30
0006cf 940e 029d 	CALL _motor
                 ; 0000 0214             break;
0006d1 c02a      	RJMP _0x136
                 ; 0000 0215 
                 ; 0000 0216             case 14:
                 _0x144:
0006d2 30ee      	CPI  R30,LOW(0xE)
0006d3 e0a0      	LDI  R26,HIGH(0xE)
0006d4 07fa      	CPC  R31,R26
0006d5 f451      	BRNE _0x145
                 ; 0000 0217                 motor(0,v,0,-v);
0006d6 e0e0      	LDI  R30,LOW(0)
0006d7 e0f0      	LDI  R31,HIGH(0)
0006d8 940e 0a6c 	CALL SUBOPT_0x32
0006da 940e 0a56 	CALL SUBOPT_0x2E
0006dc 01df      	MOVW R26,R30
0006dd 940e 029d 	CALL _motor
                 ; 0000 0218             break;
0006df c01c      	RJMP _0x136
                 ; 0000 0219 
                 ; 0000 021A             case 15:
                 _0x145:
0006e0 30ef      	CPI  R30,LOW(0xF)
0006e1 e0a0      	LDI  R26,HIGH(0xF)
0006e2 07fa      	CPC  R31,R26
0006e3 f471      	BRNE _0x146
                 ; 0000 021B                 motor(v/2,v,-v/2,-v);
0006e4 940e 0a47 	CALL SUBOPT_0x2C
0006e6 940e 0a6c 	CALL SUBOPT_0x32
0006e8 940e 0a3d 	CALL SUBOPT_0x2A
0006ea 940e 0a50 	CALL SUBOPT_0x2D
0006ec 940e 0a44 	CALL SUBOPT_0x2B
0006ee 01df      	MOVW R26,R30
0006ef 940e 029d 	CALL _motor
                 ; 0000 021C             break;
0006f1 c00a      	RJMP _0x136
                 ; 0000 021D 
                 ; 0000 021E             case 1000:
                 _0x146:
0006f2 3ee8      	CPI  R30,LOW(0x3E8)
0006f3 e0a3      	LDI  R26,HIGH(0x3E8)
0006f4 07fa      	CPC  R31,R26
0006f5 f431      	BRNE _0x148
                 ; 0000 021F                 motor(0,0,0,0);
0006f6 940e 0a74 	CALL SUBOPT_0x34
0006f8 940e 0a67 	CALL SUBOPT_0x31
0006fa 940e 0a59 	CALL SUBOPT_0x2F
                 ; 0000 0220             break;
                 ; 0000 0221 
                 ; 0000 0222             default:
                 _0x148:
                 ; 0000 0223             break;
                 ; 0000 0224         }
                 _0x136:
                 ; 0000 0225     }
                 ; 0000 0226 
                 ; 0000 0227     else
0006fc c05a      	RJMP _0x149
                 _0x79:
                 ; 0000 0228     {
                 ; 0000 0229         if (SB < backmax1-50) motor(-v+k,-v-k,v-k,v+k);
0006fd e1aa      	LDI  R26,LOW(_backmax1)
0006fe e0b0      	LDI  R27,HIGH(_backmax1)
0006ff 940e 0b54 	CALL __EEPROMRDW
000701 97f2      	SBIW R30,50
000702 16ce      	CP   R12,R30
000703 06df      	CPC  R13,R31
000704 f4cc      	BRGE _0x14A
000705 940e 0a3d 	CALL SUBOPT_0x2A
000707 010f      	MOVW R0,R30
000708 940e 09d7 	CALL SUBOPT_0x17
00070a 0fea      	ADD  R30,R26
00070b 1ffb      	ADC  R31,R27
00070c 93fa      	ST   -Y,R31
00070d 93ea      	ST   -Y,R30
00070e 01d0      	MOVW R26,R0
00070f 940e 0a77 	CALL SUBOPT_0x35
000711 940e 09d7 	CALL SUBOPT_0x17
000713 940e 0a7d 	CALL SUBOPT_0x36
000715 93fa      	ST   -Y,R31
000716 93ea      	ST   -Y,R30
000717 940e 09c5 	CALL SUBOPT_0x14
000719 940e 0a6f 	CALL SUBOPT_0x33
00071b 0fae      	ADD  R26,R30
00071c 1fbf      	ADC  R27,R31
00071d c037      	RJMP _0x1D1
                 ; 0000 022A         else if (SB > backmax1+150) motor(v+k,v-k,-v-k,-v+k);
                 _0x14A:
00071e e1aa      	LDI  R26,LOW(_backmax1)
00071f e0b0      	LDI  R27,HIGH(_backmax1)
000720 940e 0b54 	CALL __EEPROMRDW
000722 56ea      	SUBI R30,LOW(-150)
000723 4fff      	SBCI R31,HIGH(-150)
000724 15ec      	CP   R30,R12
000725 05fd      	CPC  R31,R13
000726 f4b4      	BRGE _0x14C
000727 940e 09c5 	CALL SUBOPT_0x14
000729 940e 0a6f 	CALL SUBOPT_0x33
00072b 0fea      	ADD  R30,R26
00072c 1ffb      	ADC  R31,R27
00072d 940e 09d0 	CALL SUBOPT_0x16
00072f 940e 0a7d 	CALL SUBOPT_0x36
000731 940e 0a44 	CALL SUBOPT_0x2B
000733 01df      	MOVW R26,R30
000734 940e 0a77 	CALL SUBOPT_0x35
000736 940e 0a3d 	CALL SUBOPT_0x2A
000738 940e 09d7 	CALL SUBOPT_0x17
00073a 0fae      	ADD  R26,R30
00073b 1fbf      	ADC  R27,R31
00073c c018      	RJMP _0x1D1
                 ; 0000 022B         else if (k < -20 || k > 20) motor(center);
                 _0x14C:
00073d 940e 09e5 	CALL SUBOPT_0x1A
00073f f024      	BRLT _0x14F
000740 940e 09d7 	CALL SUBOPT_0x17
000742 9755      	SBIW R26,21
000743 f04c      	BRLT _0x14E
                 _0x14F:
000744 940e 09c5 	CALL SUBOPT_0x14
000746 940e 09ca 	CALL SUBOPT_0x15
000748 940e 09ca 	CALL SUBOPT_0x15
00074a 940e 09d0 	CALL SUBOPT_0x16
00074c c008      	RJMP _0x1D1
                 ; 0000 022C         else motor(0,0,0,0);
                 _0x14E:
00074d 940e 0a74 	CALL SUBOPT_0x34
00074f 940e 0a67 	CALL SUBOPT_0x31
000751 93fa      	ST   -Y,R31
000752 93ea      	ST   -Y,R30
000753 e0a0      	LDI  R26,LOW(0)
000754 e0b0      	LDI  R27,0
                 _0x1D1:
000755 940e 029d 	CALL _motor
                 ; 0000 022D     }
                 _0x149:
                 ; 0000 022E }
000757 9508      	RET
                 ; .FEND
                 ;
                 ;void setup()
                 ; 0000 0231 {
                 ; 0000 0232     old_print_lcd = print_lcd;
                 ; 0000 0233     print_lcd = 0;
                 ; 0000 0234     setcmp = false;
                 ; 0000 0235     setkaf1 = false;
                 ; 0000 0236     setkaf2 = false;
                 ; 0000 0237     setkaf3 = false;
                 ; 0000 0238     setkaf4 = false;
                 ; 0000 0239     setzamin1 = false;
                 ; 0000 023A     setzamin2 = false;
                 ; 0000 023B     setzamin3 = false;
                 ; 0000 023C     setzamin4 = false;
                 ; 0000 023D     setback1 = false;
                 ; 0000 023E     setback2 = false;
                 ; 0000 023F     setback3 = false;
                 ; 0000 0240     lcd_clear();
                 ; 0000 0241     lcd_gotoxy(0,0);
                 ; 0000 0242     lcd_putsf("setup start...");
                 ; 0000 0243     delay_ms(1000);
                 ; 0000 0244     while (setcmp == false)
                 ; 0000 0245     {
                 ; 0000 0246         #asm("wdr")
                 ; 0000 0247         sensor();
                 ; 0000 0248         lcd_clear();
                 ; 0000 0249         lcd_gotoxy(0,0);
                 ; 0000 024A         lcd_putsf("set cmp: ");
                 ; 0000 024B         lcd_putchar((compass_read(1)/100)%10 + '0');
                 ; 0000 024C         lcd_putchar((compass_read(1)/10)%10 + '0');
                 ; 0000 024D         lcd_putchar((compass_read(1)/1)%10 + '0');
                 ; 0000 024E         if (PINC.3 == 1)
                 ; 0000 024F         {
                 ; 0000 0250             c = compass_read(1);
                 ; 0000 0251             lcd_clear();
                 ; 0000 0252             lcd_gotoxy(0,0);
                 ; 0000 0253             lcd_putsf("cmp set");
                 ; 0000 0254             delay_ms(1000);
                 ; 0000 0255             setcmp = true;
                 ; 0000 0256         }
                 ; 0000 0257     }
                 ; 0000 0258     while (setkaf1 == false)
                 ; 0000 0259     {
                 ; 0000 025A         #asm("wdr")
                 ; 0000 025B         sensor();
                 ; 0000 025C         lcd_clear();
                 ; 0000 025D         lcd_gotoxy(0,0);
                 ; 0000 025E         lcd_putsf("set SKF: ");
                 ; 0000 025F         lcd_putchar((SKF/100)%10 + '0');
                 ; 0000 0260         lcd_putchar((SKF/10)%10 + '0');
                 ; 0000 0261         lcd_putchar((SKF/1)%10 + '0');
                 ; 0000 0262         if (PINC.3 == 1)
                 ; 0000 0263         {
                 ; 0000 0264             kafmax1 = SKF;
                 ; 0000 0265             lcd_clear();
                 ; 0000 0266             lcd_gotoxy(0,0);
                 ; 0000 0267             lcd_putsf("SKF set");
                 ; 0000 0268             delay_ms(1000);
                 ; 0000 0269             setkaf1 = true;
                 ; 0000 026A         }
                 ; 0000 026B 
                 ; 0000 026C     }
                 ; 0000 026D     while (setkaf2 == false)
                 ; 0000 026E     {
                 ; 0000 026F         #asm("wdr")
                 ; 0000 0270         sensor();
                 ; 0000 0271         lcd_clear();
                 ; 0000 0272         lcd_gotoxy(0,0);
                 ; 0000 0273         lcd_putsf("set SKR: ");
                 ; 0000 0274         lcd_putchar((SKR/100)%10 + '0');
                 ; 0000 0275         lcd_putchar((SKR/10)%10 + '0');
                 ; 0000 0276         lcd_putchar((SKR/1)%10 + '0');
                 ; 0000 0277         if (PINC.3 == 1)
                 ; 0000 0278         {
                 ; 0000 0279             kafmax2 = SKR;
                 ; 0000 027A             lcd_clear();
                 ; 0000 027B             lcd_gotoxy(0,0);
                 ; 0000 027C             lcd_putsf("SKR set");
                 ; 0000 027D             delay_ms(1000);
                 ; 0000 027E             setkaf2 = true;
                 ; 0000 027F         }
                 ; 0000 0280 
                 ; 0000 0281     }
                 ; 0000 0282     while (setkaf3 == false)
                 ; 0000 0283     {
                 ; 0000 0284         #asm("wdr")
                 ; 0000 0285         sensor();
                 ; 0000 0286         lcd_clear();
                 ; 0000 0287         lcd_gotoxy(0,0);
                 ; 0000 0288         lcd_putsf("set SKB: ");
                 ; 0000 0289         lcd_putchar((SKB/100)%10 + '0');
                 ; 0000 028A         lcd_putchar((SKB/10)%10 + '0');
                 ; 0000 028B         lcd_putchar((SKB/1)%10 + '0');
                 ; 0000 028C         if (PINC.3 == 1)
                 ; 0000 028D         {
                 ; 0000 028E             kafmax3 = SKB;
                 ; 0000 028F             lcd_clear();
                 ; 0000 0290             lcd_gotoxy(0,0);
                 ; 0000 0291             lcd_putsf("SKB set");
                 ; 0000 0292             delay_ms(1000);
                 ; 0000 0293             setkaf3 = true;
                 ; 0000 0294         }
                 ; 0000 0295 
                 ; 0000 0296     }
                 ; 0000 0297     while (setkaf4 == false)
                 ; 0000 0298     {
                 ; 0000 0299         #asm("wdr")
                 ; 0000 029A         sensor();
                 ; 0000 029B         lcd_clear();
                 ; 0000 029C         lcd_gotoxy(0,0);
                 ; 0000 029D         lcd_putsf("set SKL: ");
                 ; 0000 029E         lcd_putchar((SKL/100)%10 + '0');
                 ; 0000 029F         lcd_putchar((SKL/10)%10 + '0');
                 ; 0000 02A0         lcd_putchar((SKL/1)%10 + '0');
                 ; 0000 02A1         if (PINC.3 == 1)
                 ; 0000 02A2         {
                 ; 0000 02A3             kafmax4 = SKL;
                 ; 0000 02A4             lcd_clear();
                 ; 0000 02A5             lcd_gotoxy(0,0);
                 ; 0000 02A6             lcd_putsf("SKL set");
                 ; 0000 02A7             delay_ms(1000);
                 ; 0000 02A8             setkaf4 = true;
                 ; 0000 02A9         }
                 ; 0000 02AA 
                 ; 0000 02AB     }
                 ; 0000 02AC     while (setzamin1 == false)
                 ; 0000 02AD     {
                 ; 0000 02AE         #asm("wdr")
                 ; 0000 02AF         sensor();
                 ; 0000 02B0         lcd_clear();
                 ; 0000 02B1         lcd_gotoxy(0,0);
                 ; 0000 02B2         lcd_putsf("set zaminF: ");
                 ; 0000 02B3         lcd_putchar((SKF/100)%10 + '0');
                 ; 0000 02B4         lcd_putchar((SKF/10)%10 + '0');
                 ; 0000 02B5         lcd_putchar((SKF/1)%10 + '0');
                 ; 0000 02B6         if (PINC.3 == 1)
                 ; 0000 02B7         {
                 ; 0000 02B8             kafmin1 = SKF;
                 ; 0000 02B9             lcd_clear();
                 ; 0000 02BA             lcd_gotoxy(0,0);
                 ; 0000 02BB             lcd_putsf("zaminF set");
                 ; 0000 02BC             delay_ms(1000);
                 ; 0000 02BD             setzamin1 = true;
                 ; 0000 02BE         }
                 ; 0000 02BF 
                 ; 0000 02C0     }
                 ; 0000 02C1     while (setzamin2 == false)
                 ; 0000 02C2     {
                 ; 0000 02C3         #asm("wdr")
                 ; 0000 02C4         sensor();
                 ; 0000 02C5         lcd_clear();
                 ; 0000 02C6         lcd_gotoxy(0,0);
                 ; 0000 02C7         lcd_putsf("set zaminR: ");
                 ; 0000 02C8         lcd_putchar((SKR/100)%10 + '0');
                 ; 0000 02C9         lcd_putchar((SKR/10)%10 + '0');
                 ; 0000 02CA         lcd_putchar((SKR/1)%10 + '0');
                 ; 0000 02CB         if (PINC.3 == 1)
                 ; 0000 02CC         {
                 ; 0000 02CD             kafmin2 = SKR;
                 ; 0000 02CE             lcd_clear();
                 ; 0000 02CF             lcd_gotoxy(0,0);
                 ; 0000 02D0             lcd_putsf("zaminR set");
                 ; 0000 02D1             delay_ms(1000);
                 ; 0000 02D2             setzamin2 = true;
                 ; 0000 02D3         }
                 ; 0000 02D4 
                 ; 0000 02D5     }
                 ; 0000 02D6     while (setzamin3 == false)
                 ; 0000 02D7     {
                 ; 0000 02D8         #asm("wdr")
                 ; 0000 02D9         sensor();
                 ; 0000 02DA         lcd_clear();
                 ; 0000 02DB         lcd_gotoxy(0,0);
                 ; 0000 02DC         lcd_putsf("set zaminB: ");
                 ; 0000 02DD         lcd_putchar((SKB/100)%10 + '0');
                 ; 0000 02DE         lcd_putchar((SKB/10)%10 + '0');
                 ; 0000 02DF         lcd_putchar((SKB/1)%10 + '0');
                 ; 0000 02E0         if (PINC.3 == 1)
                 ; 0000 02E1         {
                 ; 0000 02E2             kafmin3 = SKB;
                 ; 0000 02E3             lcd_clear();
                 ; 0000 02E4             lcd_gotoxy(0,0);
                 ; 0000 02E5             lcd_putsf("zaminB set");
                 ; 0000 02E6             delay_ms(1000);
                 ; 0000 02E7             setzamin3 = true;
                 ; 0000 02E8         }
                 ; 0000 02E9 
                 ; 0000 02EA     }
                 ; 0000 02EB     while (setzamin4 == false)
                 ; 0000 02EC     {
                 ; 0000 02ED         #asm("wdr")
                 ; 0000 02EE         sensor();
                 ; 0000 02EF         lcd_clear();
                 ; 0000 02F0         lcd_gotoxy(0,0);
                 ; 0000 02F1         lcd_putsf("set zaminL: ");
                 ; 0000 02F2         lcd_putchar((SKL/100)%10 + '0');
                 ; 0000 02F3         lcd_putchar((SKL/10)%10 + '0');
                 ; 0000 02F4         lcd_putchar((SKL/1)%10 + '0');
                 ; 0000 02F5         if (PINC.3 == 1)
                 ; 0000 02F6         {
                 ; 0000 02F7             kafmin4 = SKL;
                 ; 0000 02F8             lcd_clear();
                 ; 0000 02F9             lcd_gotoxy(0,0);
                 ; 0000 02FA             lcd_putsf("zaminL set");
                 ; 0000 02FB             delay_ms(1000);
                 ; 0000 02FC             setzamin4 = true;
                 ; 0000 02FD         }
                 ; 0000 02FE 
                 ; 0000 02FF     }
                 ; 0000 0300     kafmid1 = (kafmin1 + kafmax1)/2;
                 ; 0000 0301     kafmid2 = (kafmin2 + kafmax2)/2;
                 ; 0000 0302     kafmid3 = (kafmin3 + kafmax3)/2;
                 ; 0000 0303     kafmid4 = (kafmin4 + kafmax4)/2;
                 ; 0000 0304     while (setback1 == false)
                 ; 0000 0305     {
                 ; 0000 0306         #asm("wdr")
                 ; 0000 0307         sensor();
                 ; 0000 0308         lcd_clear();
                 ; 0000 0309         lcd_gotoxy(0,0);
                 ; 0000 030A         lcd_putsf("set back1: ");
                 ; 0000 030B         lcd_putchar((SB/100)%10 + '0');
                 ; 0000 030C         lcd_putchar((SB/10)%10 + '0');
                 ; 0000 030D         lcd_putchar((SB/1)%10 + '0');
                 ; 0000 030E         if (PINC.3 == 1)
                 ; 0000 030F         {
                 ; 0000 0310             backmax1 = SB;
                 ; 0000 0311             lcd_clear();
                 ; 0000 0312             lcd_gotoxy(0,0);
                 ; 0000 0313             lcd_putsf("back1 set");
                 ; 0000 0314             delay_ms(1000);
                 ; 0000 0315             setback1 = true;
                 ; 0000 0316         }
                 ; 0000 0317 
                 ; 0000 0318     }
                 ; 0000 0319     while (setback2 == false)
                 ; 0000 031A     {
                 ; 0000 031B         #asm("wdr")
                 ; 0000 031C         sensor();
                 ; 0000 031D         lcd_clear();
                 ; 0000 031E         lcd_gotoxy(0,0);
                 ; 0000 031F         lcd_putsf("set back2: ");
                 ; 0000 0320         lcd_putchar((SB/100)%10 + '0');
                 ; 0000 0321         lcd_putchar((SB/10)%10 + '0');
                 ; 0000 0322         lcd_putchar((SB/1)%10 + '0');
                 ; 0000 0323         if (PINC.3 == 1)
                 ; 0000 0324         {
                 ; 0000 0325             backmax2 = SB;
                 ; 0000 0326             lcd_clear();
                 ; 0000 0327             lcd_gotoxy(0,0);
                 ; 0000 0328             lcd_putsf("back2 set");
                 ; 0000 0329             delay_ms(1000);
                 ; 0000 032A             setback2 = true;
                 ; 0000 032B         }
                 ; 0000 032C 
                 ; 0000 032D     }
                 ; 0000 032E     while (setback3 == false)
                 ; 0000 032F     {
                 ; 0000 0330         #asm("wdr")
                 ; 0000 0331         sensor();
                 ; 0000 0332         lcd_clear();
                 ; 0000 0333         lcd_gotoxy(0,0);
                 ; 0000 0334         lcd_putsf("set back3: ");
                 ; 0000 0335         lcd_putchar((SB/100)%10 + '0');
                 ; 0000 0336         lcd_putchar((SB/10)%10 + '0');
                 ; 0000 0337         lcd_putchar((SB/1)%10 + '0');
                 ; 0000 0338         if (PINC.3 == 1)
                 ; 0000 0339         {
                 ; 0000 033A             backmax3 = SB;
                 ; 0000 033B             lcd_clear();
                 ; 0000 033C             lcd_gotoxy(0,0);
                 ; 0000 033D             lcd_putsf("back3 set");
                 ; 0000 033E             delay_ms(1000);
                 ; 0000 033F             setback3 = true;
                 ; 0000 0340         }
                 ; 0000 0341 
                 ; 0000 0342     }
                 ; 0000 0343     lcd_clear();
                 ; 0000 0344     lcd_putsf("setup done");
                 ; 0000 0345     delay_ms(1000);
                 ; 0000 0346     print_lcd = old_print_lcd;
                 ; 0000 0347 }
                 ;
                 ;void main(void)
                 ; 0000 034A {
                 _main:
                 ; .FSTART _main
                 ; 0000 034B {
                 ; 0000 034C // Declare your local variables here
                 ; 0000 034D 
                 ; 0000 034E // Input/Output Ports initialization
                 ; 0000 034F // Port A initialization
                 ; 0000 0350 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0351 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000758 e0e0      	LDI  R30,LOW(0)
000759 bbea      	OUT  0x1A,R30
                 ; 0000 0352 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0353 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00075a bbeb      	OUT  0x1B,R30
                 ; 0000 0354 
                 ; 0000 0355 // Port B initialization
                 ; 0000 0356 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0357 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00075b efe8      	LDI  R30,LOW(248)
00075c bbe7      	OUT  0x17,R30
                 ; 0000 0358 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 0359 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00075d e0e0      	LDI  R30,LOW(0)
00075e bbe8      	OUT  0x18,R30
                 ; 0000 035A 
                 ; 0000 035B // Port C initialization
                 ; 0000 035C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 035D DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00075f bbe4      	OUT  0x14,R30
                 ; 0000 035E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 035F PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000760 bbe5      	OUT  0x15,R30
                 ; 0000 0360 
                 ; 0000 0361 // Port D initialization
                 ; 0000 0362 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0363 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000761 efef      	LDI  R30,LOW(255)
000762 bbe1      	OUT  0x11,R30
                 ; 0000 0364 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0365 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000763 e0e0      	LDI  R30,LOW(0)
000764 bbe2      	OUT  0x12,R30
                 ; 0000 0366 
                 ; 0000 0367 // Timer/Counter 0 initialization
                 ; 0000 0368 // Clock source: System Clock
                 ; 0000 0369 // Clock value: 31.250 kHz
                 ; 0000 036A // Mode: Fast PWM top=0xFF
                 ; 0000 036B // OC0 output: Non-Inverted PWM
                 ; 0000 036C // Timer Period: 8.192 ms
                 ; 0000 036D // Output Pulse(s):
                 ; 0000 036E // OC0 Period: 8.192 ms Width: 0 us
                 ; 0000 036F TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
000765 e6ec      	LDI  R30,LOW(108)
000766 bfe3      	OUT  0x33,R30
                 ; 0000 0370 TCNT0=0x00;
000767 e0e0      	LDI  R30,LOW(0)
000768 bfe2      	OUT  0x32,R30
                 ; 0000 0371 OCR0=0x00;
000769 bfec      	OUT  0x3C,R30
                 ; 0000 0372 
                 ; 0000 0373 // Timer/Counter 1 initialization
                 ; 0000 0374 // Clock source: System Clock
                 ; 0000 0375 // Clock value: 31.250 kHz
                 ; 0000 0376 // Mode: Fast PWM top=0x00FF
                 ; 0000 0377 // OC1A output: Non-Inverted PWM
                 ; 0000 0378 // OC1B output: Non-Inverted PWM
                 ; 0000 0379 // Noise Canceler: Off
                 ; 0000 037A // Input Capture on Falling Edge
                 ; 0000 037B // Timer Period: 8.192 ms
                 ; 0000 037C // Output Pulse(s):
                 ; 0000 037D // OC1A Period: 8.192 ms Width: 0 us// OC1B Period: 8.192 ms Width: 0 us
                 ; 0000 037E // Timer1 Overflow Interrupt: Off
                 ; 0000 037F // Input Capture Interrupt: Off
                 ; 0000 0380 // Compare A Match Interrupt: Off
                 ; 0000 0381 // Compare B Match Interrupt: Off
                 ; 0000 0382 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
00076a eae1      	LDI  R30,LOW(161)
00076b bdef      	OUT  0x2F,R30
                 ; 0000 0383 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
00076c e0ec      	LDI  R30,LOW(12)
00076d bdee      	OUT  0x2E,R30
                 ; 0000 0384 TCNT1H=0x00;
00076e e0e0      	LDI  R30,LOW(0)
00076f bded      	OUT  0x2D,R30
                 ; 0000 0385 TCNT1L=0x00;
000770 bdec      	OUT  0x2C,R30
                 ; 0000 0386 ICR1H=0x00;
000771 bde7      	OUT  0x27,R30
                 ; 0000 0387 ICR1L=0x00;
000772 bde6      	OUT  0x26,R30
                 ; 0000 0388 OCR1AH=0x00;
000773 bdeb      	OUT  0x2B,R30
                 ; 0000 0389 OCR1AL=0x00;
000774 bdea      	OUT  0x2A,R30
                 ; 0000 038A OCR1BH=0x00;
000775 bde9      	OUT  0x29,R30
                 ; 0000 038B OCR1BL=0x00;
000776 bde8      	OUT  0x28,R30
                 ; 0000 038C 
                 ; 0000 038D // Timer/Counter 2 initialization
                 ; 0000 038E // Clock source: System Clock
                 ; 0000 038F // Clock value: 31.250 kHz
                 ; 0000 0390 // Mode: Fast PWM top=0xFF
                 ; 0000 0391 // OC2 output: Non-Inverted PWM
                 ; 0000 0392 // Timer Period: 8.192 ms
                 ; 0000 0393 // Output Pulse(s):
                 ; 0000 0394 // OC2 Period: 8.192 ms Width: 0 us
                 ; 0000 0395 ASSR=0<<AS2;
000777 bde2      	OUT  0x22,R30
                 ; 0000 0396 TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (1<<CS21) | (0<<CS20);
000778 e6ee      	LDI  R30,LOW(110)
000779 bde5      	OUT  0x25,R30
                 ; 0000 0397 TCNT2=0x00;
00077a e0e0      	LDI  R30,LOW(0)
00077b bde4      	OUT  0x24,R30
                 ; 0000 0398 OCR2=0x00;
00077c bde3      	OUT  0x23,R30
                 ; 0000 0399 
                 ; 0000 039A // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 039B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00077d bfe9      	OUT  0x39,R30
                 ; 0000 039C 
                 ; 0000 039D // External Interrupt(s) initialization
                 ; 0000 039E // INT0: Off
                 ; 0000 039F // INT1: Off
                 ; 0000 03A0 // INT2: Off
                 ; 0000 03A1 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00077e bfe5      	OUT  0x35,R30
                 ; 0000 03A2 MCUCSR=(0<<ISC2);
00077f bfe4      	OUT  0x34,R30
                 ; 0000 03A3 
                 ; 0000 03A4 // USART initialization
                 ; 0000 03A5 // USART disabled
                 ; 0000 03A6 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000780 b9ea      	OUT  0xA,R30
                 ; 0000 03A7 
                 ; 0000 03A8 // Analog Comparator initialization
                 ; 0000 03A9 // Analog Comparator: Off
                 ; 0000 03AA // The Analog Comparator's positive input is
                 ; 0000 03AB // connected to the AIN0 pin
                 ; 0000 03AC // The Analog Comparator's negative input is
                 ; 0000 03AD // connected to the AIN1 pin
                 ; 0000 03AE ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000781 e8e0      	LDI  R30,LOW(128)
000782 b9e8      	OUT  0x8,R30
                 ; 0000 03AF 
                 ; 0000 03B0 // ADC initialization
                 ; 0000 03B1 // ADC Clock frequency: 62.500 kHz
                 ; 0000 03B2 // ADC Voltage Reference: AVCC pin
                 ; 0000 03B3 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 03B4 ADMUX=ADC_VREF_TYPE;
000783 e4e0      	LDI  R30,LOW(64)
000784 b9e7      	OUT  0x7,R30
                 ; 0000 03B5 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000785 e8e7      	LDI  R30,LOW(135)
000786 b9e6      	OUT  0x6,R30
                 ; 0000 03B6 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000787 e0e0      	LDI  R30,LOW(0)
000788 bfe0      	OUT  0x30,R30
                 ; 0000 03B7 
                 ; 0000 03B8 // SPI initialization
                 ; 0000 03B9 // SPI disabled
                 ; 0000 03BA SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000789 b9ed      	OUT  0xD,R30
                 ; 0000 03BB 
                 ; 0000 03BC // TWI initialization
                 ; 0000 03BD // TWI disabled
                 ; 0000 03BE TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00078a bfe6      	OUT  0x36,R30
                 ; 0000 03BF 
                 ; 0000 03C0 // Bit-Banged I2C Bus initialization
                 ; 0000 03C1 // I2C Port: PORTB
                 ; 0000 03C2 // I2C SDA bit: 1
                 ; 0000 03C3 // I2C SCL bit: 0
                 ; 0000 03C4 // Bit Rate: 100 kHz
                 ; 0000 03C5 // Note: I2C settings are specified in the
                 ; 0000 03C6 // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 03C7 i2c_init();
00078b 940e 0aaa 	CALL _i2c_init
                 ; 0000 03C8 
                 ; 0000 03C9 // Alphanumeric LCD initialization
                 ; 0000 03CA // Connections are specified in the
                 ; 0000 03CB // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 03CC // RS - PORTC Bit 0
                 ; 0000 03CD // RD - PORTC Bit 1
                 ; 0000 03CE // EN - PORTC Bit 2
                 ; 0000 03CF // D4 - PORTC Bit 4
                 ; 0000 03D0 // D5 - PORTC Bit 5
                 ; 0000 03D1 // D6 - PORTC Bit 6
                 ; 0000 03D2 // D7 - PORTC Bit 7
                 ; 0000 03D3 // Characters/line: 16
                 ; 0000 03D4 lcd_init(16);
00078d e1a0      	LDI  R26,LOW(16)
00078e 940e 0927 	CALL _lcd_init
                 ; 0000 03D5 
                 ; 0000 03D6 // Watchdog Timer initialization
                 ; 0000 03D7 // Watchdog Timer Prescaler: OSC/256k
                 ; 0000 03D8 WDTCR=(0<<WDTOE) | (1<<WDE) | (1<<WDP2) | (0<<WDP1) | (0<<WDP0);
000790 e0ec      	LDI  R30,LOW(12)
000791 bde1      	OUT  0x21,R30
                 ; 0000 03D9 }
                 ; 0000 03DA 
                 ; 0000 03DB     delay_ms(3000);
000792 eba8      	LDI  R26,LOW(3000)
000793 e0bb      	LDI  R27,HIGH(3000)
000794 940e 0afb 	CALL _delay_ms
                 ; 0000 03DC 
                 ; 0000 03DD     while (1)
                 _0x182:
                 ; 0000 03DE     {
                 ; 0000 03DF         #asm("wdr")
000796 95a8      	wdr
                 ; 0000 03E0         if (PINC.3 == 1)    c=compass_read(1);
000797 9b9b      	SBIS 0x13,3
000798 c008      	RJMP _0x185
000799 e0a1      	LDI  R26,LOW(1)
00079a 940e 0106 	CALL _compass_read
00079c e0a0      	LDI  R26,LOW(_c)
00079d e0b0      	LDI  R27,HIGH(_c)
00079e e0f0      	LDI  R31,0
00079f 940e 0b64 	CALL __EEPROMWRW
                 ; 0000 03E1         sensor();
                 _0x185:
0007a1 940e 0129 	CALL _sensor
                 ; 0000 03E2         if(SKF>600 && out==0)
0007a3 940e 099d 	CALL SUBOPT_0xC
0007a5 35a9      	CPI  R26,LOW(0x259)
0007a6 e0e2      	LDI  R30,HIGH(0x259)
0007a7 07be      	CPC  R27,R30
0007a8 f024      	BRLT _0x187
0007a9 91a0 0184 	LDS  R26,_out
0007ab 30a0      	CPI  R26,LOW(0x0)
0007ac f009      	BREQ _0x188
                 _0x187:
0007ad c00b      	RJMP _0x186
                 _0x188:
                 ; 0000 03E3             {
                 ; 0000 03E4             motor(-255,-255,255,255);
0007ae 940e 0a84 	CALL SUBOPT_0x37
0007b0 940e 0a84 	CALL SUBOPT_0x37
0007b2 940e 0a89 	CALL SUBOPT_0x38
0007b4 940e 0a8e 	CALL SUBOPT_0x39
                 ; 0000 03E5             delay_ms(400);
                 ; 0000 03E6             out='F';
0007b6 e4e6      	LDI  R30,LOW(70)
0007b7 93e0 0184 	STS  _out,R30
                 ; 0000 03E7             }
                 ; 0000 03E8         if(SKB>600 && out==0)
                 _0x186:
0007b9 940e 0993 	CALL SUBOPT_0xA
0007bb 35a9      	CPI  R26,LOW(0x259)
0007bc e0e2      	LDI  R30,HIGH(0x259)
0007bd 07be      	CPC  R27,R30
0007be f024      	BRLT _0x18A
0007bf 91a0 0184 	LDS  R26,_out
0007c1 30a0      	CPI  R26,LOW(0x0)
0007c2 f009      	BREQ _0x18B
                 _0x18A:
0007c3 c00b      	RJMP _0x189
                 _0x18B:
                 ; 0000 03E9             {
                 ; 0000 03EA             motor(255,255,-255,-255);
0007c4 940e 0a89 	CALL SUBOPT_0x38
0007c6 940e 0a89 	CALL SUBOPT_0x38
0007c8 940e 0a84 	CALL SUBOPT_0x37
0007ca 940e 0a96 	CALL SUBOPT_0x3A
                 ; 0000 03EB             delay_ms(400);
                 ; 0000 03EC             out='B';
0007cc e4e2      	LDI  R30,LOW(66)
0007cd 93e0 0184 	STS  _out,R30
                 ; 0000 03ED             }
                 ; 0000 03EE         if(SKR>600 && out==0)
                 _0x189:
0007cf 940e 0998 	CALL SUBOPT_0xB
0007d1 35a9      	CPI  R26,LOW(0x259)
0007d2 e0e2      	LDI  R30,HIGH(0x259)
0007d3 07be      	CPC  R27,R30
0007d4 f024      	BRLT _0x18D
0007d5 91a0 0184 	LDS  R26,_out
0007d7 30a0      	CPI  R26,LOW(0x0)
0007d8 f009      	BREQ _0x18E
                 _0x18D:
0007d9 c00b      	RJMP _0x18C
                 _0x18E:
                 ; 0000 03EF             {
                 ; 0000 03F0             motor(255,-255,-255,255);
0007da 940e 0a89 	CALL SUBOPT_0x38
0007dc 940e 0a84 	CALL SUBOPT_0x37
0007de 940e 0a84 	CALL SUBOPT_0x37
0007e0 940e 0a8e 	CALL SUBOPT_0x39
                 ; 0000 03F1             delay_ms(400);
                 ; 0000 03F2             out='R';
0007e2 e5e2      	LDI  R30,LOW(82)
0007e3 93e0 0184 	STS  _out,R30
                 ; 0000 03F3             }
                 ; 0000 03F4         if(SKL>600 && out==0)
                 _0x18C:
0007e5 940e 098e 	CALL SUBOPT_0x9
0007e7 35a9      	CPI  R26,LOW(0x259)
0007e8 e0e2      	LDI  R30,HIGH(0x259)
0007e9 07be      	CPC  R27,R30
0007ea f024      	BRLT _0x190
0007eb 91a0 0184 	LDS  R26,_out
0007ed 30a0      	CPI  R26,LOW(0x0)
0007ee f009      	BREQ _0x191
                 _0x190:
0007ef c00b      	RJMP _0x18F
                 _0x191:
                 ; 0000 03F5             {
                 ; 0000 03F6             motor(-255,255,255,-255);
0007f0 940e 0a84 	CALL SUBOPT_0x37
0007f2 940e 0a89 	CALL SUBOPT_0x38
0007f4 940e 0a89 	CALL SUBOPT_0x38
0007f6 940e 0a96 	CALL SUBOPT_0x3A
                 ; 0000 03F7             delay_ms(400);
                 ; 0000 03F8             out='L';
0007f8 e4ec      	LDI  R30,LOW(76)
0007f9 93e0 0184 	STS  _out,R30
                 ; 0000 03F9             }
                 ; 0000 03FA 
                 ; 0000 03FB         while(out=='F' && min<800)
                 _0x18F:
                 _0x192:
0007fb 91a0 0184 	LDS  R26,_out
0007fd 34a6      	CPI  R26,LOW(0x46)
0007fe f419      	BRNE _0x195
0007ff 940e 09c0 	CALL SUBOPT_0x13
000801 f00c      	BRLT _0x196
                 _0x195:
000802 c011      	RJMP _0x194
                 _0x196:
                 ; 0000 03FC             {
                 ; 0000 03FD             sensor();
000803 940e 0a9e 	CALL SUBOPT_0x3B
                 ; 0000 03FE             if(imin<12 && imin>4)
000805 f41c      	BRGE _0x198
000806 940e 0a2c 	CALL SUBOPT_0x27
000808 f00c      	BRLT _0x199
                 _0x198:
000809 c003      	RJMP _0x197
                 _0x199:
                 ; 0000 03FF                 catch();
00080a 940e 0384 	CALL _catch
                 ; 0000 0400             else motor(0,0,0,0);
00080c c006      	RJMP _0x19A
                 _0x197:
00080d 940e 0a74 	CALL SUBOPT_0x34
00080f 940e 0a67 	CALL SUBOPT_0x31
000811 940e 0a59 	CALL SUBOPT_0x2F
                 ; 0000 0401             }
                 _0x19A:
000813 cfe7      	RJMP _0x192
                 _0x194:
                 ; 0000 0402         while(out=='B' && min<800)
                 _0x19B:
000814 91a0 0184 	LDS  R26,_out
000816 34a2      	CPI  R26,LOW(0x42)
000817 f419      	BRNE _0x19E
000818 940e 09c0 	CALL SUBOPT_0x13
00081a f00c      	BRLT _0x19F
                 _0x19E:
00081b c010      	RJMP _0x19D
                 _0x19F:
                 ; 0000 0403             {
                 ; 0000 0404             sensor();
00081c 940e 0a9e 	CALL SUBOPT_0x3B
                 ; 0000 0405             if(!(imin<12 && imin>4))
00081e f41c      	BRGE _0x1A1
00081f 940e 0a2c 	CALL SUBOPT_0x27
000821 f01c      	BRLT _0x1A0
                 _0x1A1:
                 ; 0000 0406                 catch();
000822 940e 0384 	CALL _catch
                 ; 0000 0407             else motor(0,0,0,0);
000824 c006      	RJMP _0x1A3
                 _0x1A0:
000825 940e 0a74 	CALL SUBOPT_0x34
000827 940e 0a67 	CALL SUBOPT_0x31
000829 940e 0a59 	CALL SUBOPT_0x2F
                 ; 0000 0408             }
                 _0x1A3:
00082b cfe8      	RJMP _0x19B
                 _0x19D:
                 ; 0000 0409         while((out=='R' || SR>300) && min<800)
                 _0x1A4:
00082c 91a0 0184 	LDS  R26,_out
00082e 35a2      	CPI  R26,LOW(0x52)
00082f f031      	BREQ _0x1A7
000830 940e 0985 	CALL SUBOPT_0x7
000832 32ad      	CPI  R26,LOW(0x12D)
000833 e0e1      	LDI  R30,HIGH(0x12D)
000834 07be      	CPC  R27,R30
000835 f01c      	BRLT _0x1A9
                 _0x1A7:
000836 940e 09c0 	CALL SUBOPT_0x13
000838 f00c      	BRLT _0x1AA
                 _0x1A9:
000839 c011      	RJMP _0x1A6
                 _0x1AA:
                 ; 0000 040A             {
                 ; 0000 040B             sensor();
00083a 940e 0a9e 	CALL SUBOPT_0x3B
                 ; 0000 040C             if(imin<12 && imin>4)
00083c f41c      	BRGE _0x1AC
00083d 940e 0a2c 	CALL SUBOPT_0x27
00083f f00c      	BRLT _0x1AD
                 _0x1AC:
000840 c003      	RJMP _0x1AB
                 _0x1AD:
                 ; 0000 040D                 catch();
000841 940e 0384 	CALL _catch
                 ; 0000 040E             else motor(0,0,0,0);
000843 c006      	RJMP _0x1AE
                 _0x1AB:
000844 940e 0a74 	CALL SUBOPT_0x34
000846 940e 0a67 	CALL SUBOPT_0x31
000848 940e 0a59 	CALL SUBOPT_0x2F
                 ; 0000 040F             }
                 _0x1AE:
00084a cfe1      	RJMP _0x1A4
                 _0x1A6:
                 ; 0000 0410         while((out=='L' || SL>300) && min<800)
                 _0x1AF:
00084b 91a0 0184 	LDS  R26,_out
00084d 34ac      	CPI  R26,LOW(0x4C)
00084e f029      	BREQ _0x1B2
00084f e2ec      	LDI  R30,LOW(300)
000850 e0f1      	LDI  R31,HIGH(300)
000851 15ea      	CP   R30,R10
000852 05fb      	CPC  R31,R11
000853 f41c      	BRGE _0x1B4
                 _0x1B2:
000854 940e 09c0 	CALL SUBOPT_0x13
000856 f00c      	BRLT _0x1B5
                 _0x1B4:
000857 c011      	RJMP _0x1B1
                 _0x1B5:
                 ; 0000 0411             {
                 ; 0000 0412             sensor();
000858 940e 0a9e 	CALL SUBOPT_0x3B
                 ; 0000 0413             if(imin<12 && imin>4)
00085a f41c      	BRGE _0x1B7
00085b 940e 0a2c 	CALL SUBOPT_0x27
00085d f00c      	BRLT _0x1B8
                 _0x1B7:
00085e c003      	RJMP _0x1B6
                 _0x1B8:
                 ; 0000 0414                 catch();
00085f 940e 0384 	CALL _catch
                 ; 0000 0415             else motor(0,0,0,0);
000861 c006      	RJMP _0x1B9
                 _0x1B6:
000862 940e 0a74 	CALL SUBOPT_0x34
000864 940e 0a67 	CALL SUBOPT_0x31
000866 940e 0a59 	CALL SUBOPT_0x2F
                 ; 0000 0416             }
                 _0x1B9:
000868 cfe2      	RJMP _0x1AF
                 _0x1B1:
                 ; 0000 0417 
                 ; 0000 0418         out=0;
000869 e0e0      	LDI  R30,LOW(0)
00086a 93e0 0184 	STS  _out,R30
                 ; 0000 0419         catch();
00086c 940e 0384 	CALL _catch
                 ; 0000 041A         out = 0;
00086e e0e0      	LDI  R30,LOW(0)
00086f 93e0 0184 	STS  _out,R30
                 ; 0000 041B     }
000871 cf24      	RJMP _0x182
                 ; 0000 041C }
                 _0x1BA:
000872 cfff      	RJMP _0x1BA
                 ; .FEND
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
000873 e0ff          ldi   r31,15
                 __lcd_delay0:
000874 95fa          dec   r31
000875 f7f1          brne  __lcd_delay0
000876 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000877 b3a4          in    r26,__lcd_direction
000878 70af          andi  r26,0xf                 ;set as input
000879 bba4          out   __lcd_direction,r26
00087a 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
00087b 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
00087c dff6      	RCALL __lcd_delay_G100
00087d 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00087e dff4      	RCALL __lcd_delay_G100
00087f b3a3          in    r26,__lcd_pin
000880 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000881 dff1      	RCALL __lcd_delay_G100
000882 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000883 dfef      	RCALL __lcd_delay_G100
000884 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000885 fda7          sbrc  r26,__lcd_busy_flag
000886 cff5          rjmp  __lcd_busy
000887 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000888 7fa0          andi  r26,0xf0
000889 2bab          or    r26,r27
00088a bba5          out   __lcd_port,r26          ;write
00088b 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00088c 940e 0873 	CALL __lcd_delay_G100
00088e 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
00088f 940e 0873 	CALL __lcd_delay_G100
000891 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000892 93aa      	ST   -Y,R26
000893 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000894 b3a4          in    r26,__lcd_direction
000895 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000896 bba4          out   __lcd_direction,r26
000897 b3b5          in    r27,__lcd_port
000898 70bf          andi  r27,0xf
000899 81a8          ld    r26,y
00089a dfed      	RCALL __lcd_write_nibble_G100
00089b 81a8          ld    r26,y
00089c 95a2          swap  r26
00089d dfea      	RCALL __lcd_write_nibble_G100
00089e 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
00089f 940c 0953 	JMP  _0x2020001
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
0008a1 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0008a2 940e 0873 	CALL __lcd_delay_G100
0008a4 b3e3          in    r30,__lcd_pin           ;read
0008a5 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0008a6 940e 0873 	CALL __lcd_delay_G100
0008a8 7fe0          andi  r30,0xf0
0008a9 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
0008aa 940e 0873 	CALL __lcd_delay_G100
0008ac dff4      	RCALL __lcd_read_nibble_G100
0008ad 2fae          mov   r26,r30
0008ae dff2      	RCALL __lcd_read_nibble_G100
0008af 98a9          cbi   __lcd_port,__lcd_rd     ;RD=0
0008b0 95e2          swap  r30
0008b1 2bea          or    r30,r26
0008b2 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0008b3 93aa      	ST   -Y,R26
0008b4 940e 0877 	CALL __lcd_ready
0008b6 81e8      	LD   R30,Y
0008b7 e0f0      	LDI  R31,0
0008b8 57eb      	SUBI R30,LOW(-__base_y_G100)
0008b9 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0008ba 81e0      	LD   R30,Z
0008bb 81a9      	LDD  R26,Y+1
0008bc 0fae      	ADD  R26,R30
0008bd 940e 0892 	CALL __lcd_write_data
0008bf 81e9      	LDD  R30,Y+1
0008c0 93e0 0189 	STS  __lcd_x,R30
0008c2 81e8      	LD   R30,Y
0008c3 93e0 018a 	STS  __lcd_y,R30
0008c5 9622      	ADIW R28,2
0008c6 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0008c7 940e 0877 	CALL __lcd_ready
0008c9 e0a2      	LDI  R26,LOW(2)
0008ca 940e 0892 	CALL __lcd_write_data
0008cc 940e 0877 	CALL __lcd_ready
0008ce e0ac      	LDI  R26,LOW(12)
0008cf 940e 0892 	CALL __lcd_write_data
0008d1 940e 0877 	CALL __lcd_ready
0008d3 e0a1      	LDI  R26,LOW(1)
0008d4 940e 0892 	CALL __lcd_write_data
0008d6 e0e0      	LDI  R30,LOW(0)
0008d7 93e0 018a 	STS  __lcd_y,R30
0008d9 93e0 0189 	STS  __lcd_x,R30
0008db 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0008dc 93aa      	ST   -Y,R26
0008dd 93ef          push r30
0008de 93ff          push r31
0008df 81a8          ld   r26,y
0008e0 9468          set
0008e1 30aa          cpi  r26,10
0008e2 f039          breq __lcd_putchar1
0008e3 94e8          clt
0008e4 91e0 018b 	LDS  R30,__lcd_maxx
0008e6 91a0 0189 	LDS  R26,__lcd_x
0008e8 17ae      	CP   R26,R30
0008e9 f058      	BRLO _0x2000004
                 	__lcd_putchar1:
0008ea 91e0 018a 	LDS  R30,__lcd_y
0008ec 5fef      	SUBI R30,-LOW(1)
0008ed 93e0 018a 	STS  __lcd_y,R30
0008ef e0e0      	LDI  R30,LOW(0)
0008f0 93ea      	ST   -Y,R30
0008f1 91a0 018a 	LDS  R26,__lcd_y
0008f3 dfbf      	RCALL _lcd_gotoxy
0008f4 f056      	brts __lcd_putchar0
                 _0x2000004:
0008f5 91e0 0189 	LDS  R30,__lcd_x
0008f7 5fef      	SUBI R30,-LOW(1)
0008f8 93e0 0189 	STS  __lcd_x,R30
0008fa df7c          rcall __lcd_ready
0008fb 9aa8          sbi  __lcd_port,__lcd_rs ;RS=1
0008fc 81a8      	LD   R26,Y
0008fd 940e 0892 	CALL __lcd_write_data
                 __lcd_putchar0:
0008ff 91ff          pop  r31
000900 91ef          pop  r30
000901 940c 0953 	JMP  _0x2020001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000903 93ba      	ST   -Y,R27
000904 93aa      	ST   -Y,R26
000905 931a      	ST   -Y,R17
                 _0x2000008:
000906 81e9      	LDD  R30,Y+1
000907 81fa      	LDD  R31,Y+1+1
000908 9631      	ADIW R30,1
000909 83e9      	STD  Y+1,R30
00090a 83fa      	STD  Y+1+1,R31
00090b 9731      	SBIW R30,1
00090c 91e4      	LPM  R30,Z
00090d 2f1e      	MOV  R17,R30
00090e 30e0      	CPI  R30,0
00090f f019      	BREQ _0x200000A
000910 2fa1      	MOV  R26,R17
000911 dfca      	RCALL _lcd_putchar
000912 cff3      	RJMP _0x2000008
                 _0x200000A:
000913 8118      	LDD  R17,Y+0
000914 9623      	ADIW R28,3
000915 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
000916 27aa          clr   r26
000917 27bb          clr   r27
                 __long_delay0:
000918 9711          sbiw  r26,1         ;2 cycles
000919 f7f1          brne  __long_delay0 ;2 cycles
00091a 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
00091b 93aa      	ST   -Y,R26
00091c 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00091d b3a4          in    r26,__lcd_direction
00091e 6fa7          ori   r26,0xf7                ;set as output
00091f bba4          out   __lcd_direction,r26
000920 b3b5          in    r27,__lcd_port
000921 70bf          andi  r27,0xf
000922 81a8          ld    r26,y
000923 940e 0888 	CALL __lcd_write_nibble_G100
000925 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000926 c02c      	RJMP _0x2020001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000927 93aa      	ST   -Y,R26
000928 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000929 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
00092a 81e8      	LD   R30,Y
00092b 93e0 018b 	STS  __lcd_maxx,R30
00092d 58e0      	SUBI R30,-LOW(128)
                +
00092e 93e0 0187+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000930 81e8      	LD   R30,Y
000931 54e0      	SUBI R30,-LOW(192)
                +
000932 93e0 0188+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000934 d16c      	RCALL SUBOPT_0x3C
000935 d16b      	RCALL SUBOPT_0x3C
000936 d16a      	RCALL SUBOPT_0x3C
000937 dfde      	RCALL __long_delay_G100
000938 e2a0      	LDI  R26,LOW(32)
000939 dfe1      	RCALL __lcd_init_write_G100
00093a dfdb      	RCALL __long_delay_G100
00093b e2a8      	LDI  R26,LOW(40)
00093c d169      	RCALL SUBOPT_0x3D
00093d e0a4      	LDI  R26,LOW(4)
00093e d167      	RCALL SUBOPT_0x3D
00093f e8a5      	LDI  R26,LOW(133)
000940 d165      	RCALL SUBOPT_0x3D
000941 b3a4          in    r26,__lcd_direction
000942 70af          andi  r26,0xf                 ;set as input
000943 bba4          out   __lcd_direction,r26
000944 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000945 940e 08aa 	CALL _lcd_read_byte0_G100
000947 30e5      	CPI  R30,LOW(0x5)
000948 f011      	BREQ _0x200000B
000949 e0e0      	LDI  R30,LOW(0)
00094a c008      	RJMP _0x2020001
                 _0x200000B:
00094b 940e 0877 	CALL __lcd_ready
00094d e0a6      	LDI  R26,LOW(6)
00094e 940e 0892 	CALL __lcd_write_data
000950 940e 08c7 	CALL _lcd_clear
000952 e0e1      	LDI  R30,LOW(1)
                 _0x2020001:
000953 9621      	ADIW R28,1
000954 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _SR:
000160           	.BYTE 0x2
                 _k:
000162           	.BYTE 0x2
                 _SKF:
000164           	.BYTE 0x2
                 _SKL:
000166           	.BYTE 0x2
                 _SKB:
000168           	.BYTE 0x2
                 _SKR:
00016a           	.BYTE 0x2
                 _print_lcd:
00016c           	.BYTE 0x2
                 _old_print_lcd:
00016e           	.BYTE 0x2
                 _cmp:
000170           	.BYTE 0x2
                 _v:
000172           	.BYTE 0x2
                 _position:
000174           	.BYTE 0x2
                 _action:
000176           	.BYTE 0x2
                 _setcmp:
000178           	.BYTE 0x1
                 _setback1:
000179           	.BYTE 0x1
                 _setback2:
00017a           	.BYTE 0x1
                 _setback3:
00017b           	.BYTE 0x1
                 _setkaf1:
00017c           	.BYTE 0x1
                 _setkaf2:
00017d           	.BYTE 0x1
                 _setkaf3:
00017e           	.BYTE 0x1
                 _setkaf4:
00017f           	.BYTE 0x1
                 _setzamin1:
000180           	.BYTE 0x1
                 _setzamin2:
000181           	.BYTE 0x1
                 _setzamin3:
000182           	.BYTE 0x1
                 _setzamin4:
000183           	.BYTE 0x1
                 _out:
000184           	.BYTE 0x1
                 
                 	.ESEG
                 _c:
000000           	.BYTE 0x2
                 _kafmin1:
000002           	.BYTE 0x2
                 _kafmin2:
000004           	.BYTE 0x2
                 _kafmin3:
000006           	.BYTE 0x2
                 _kafmin4:
000008           	.BYTE 0x2
                 _kafmax1:
00000a           	.BYTE 0x2
                 _kafmax2:
00000c           	.BYTE 0x2
                 _kafmax3:
00000e           	.BYTE 0x2
                 _kafmax4:
000010           	.BYTE 0x2
                 _kafmid1:
000012           	.BYTE 0x2
                 _kafmid2:
000014           	.BYTE 0x2
                 _kafmid3:
000016           	.BYTE 0x2
                 _kafmid4:
000018           	.BYTE 0x2
                 _backmax1:
00001a           	.BYTE 0x2
                 _backmax2:
00001c           	.BYTE 0x2
                 _backmax3:
00001e           	.BYTE 0x2
                 
                 	.DSEG
                 __base_y_G100:
000185           	.BYTE 0x4
                 __lcd_x:
000189           	.BYTE 0x1
                 __lcd_y:
00018a           	.BYTE 0x1
                 __lcd_maxx:
00018b           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x0:
                +
000955 ec88     +LDI R24 , LOW ( 200 )
000956 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000957 9701     +SBIW R24 , 1
000958 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000959 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00095a 940e 0ae3 	CALL _i2c_write
00095c cff8      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
00095d 940e 0b29 	CALL __DIVW21
00095f e0a1      	LDI  R26,LOW(1)
000960 e0b0      	LDI  R27,HIGH(1)
000961 940e 0b3c 	CALL __MANDW12
000963 30e0      	CPI  R30,0
000964 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
000965 91a0 016c 	LDS  R26,_print_lcd
000967 91b0 016d 	LDS  R27,_print_lcd+1
000969 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:107 WORDS
                 SUBOPT_0x4:
00096a e0ea      	LDI  R30,LOW(10)
00096b e0f0      	LDI  R31,HIGH(10)
00096c 940e 0b29 	CALL __DIVW21
00096e 01df      	MOVW R26,R30
00096f e0ea      	LDI  R30,LOW(10)
000970 e0f0      	LDI  R31,HIGH(10)
000971 940e 0b2e 	CALL __MODW21
000973 5de0      	SUBI R30,-LOW(48)
000974 2fae      	MOV  R26,R30
000975 940c 08dc 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:105 WORDS
                 SUBOPT_0x5:
000977 e0ea      	LDI  R30,LOW(10)
000978 e0f0      	LDI  R31,HIGH(10)
000979 940e 0b2e 	CALL __MODW21
00097b 5de0      	SUBI R30,-LOW(48)
00097c 2fae      	MOV  R26,R30
00097d 940c 08dc 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:42 WORDS
                 SUBOPT_0x6:
00097f e6e4      	LDI  R30,LOW(100)
000980 e0f0      	LDI  R31,HIGH(100)
000981 940e 0b29 	CALL __DIVW21
000983 01df      	MOVW R26,R30
000984 cff2      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
000985 91a0 0160 	LDS  R26,_SR
000987 91b0 0161 	LDS  R27,_SR+1
000989 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
00098a 93ea      	ST   -Y,R30
00098b e0a1      	LDI  R26,LOW(1)
00098c 940c 08b3 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
00098e 91a0 0166 	LDS  R26,_SKL
000990 91b0 0167 	LDS  R27,_SKL+1
000992 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
000993 91a0 0168 	LDS  R26,_SKB
000995 91b0 0169 	LDS  R27,_SKB+1
000997 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000998 91a0 016a 	LDS  R26,_SKR
00099a 91b0 016b 	LDS  R27,_SKR+1
00099c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
00099d 91a0 0164 	LDS  R26,_SKF
00099f 91b0 0165 	LDS  R27,_SKF+1
0009a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xD:
0009a2 91a0 0170 	LDS  R26,_cmp
0009a4 91b0 0171 	LDS  R27,_cmp+1
0009a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xE:
0009a7 91e0 0170 	LDS  R30,_cmp
0009a9 91f0 0171 	LDS  R31,_cmp+1
0009ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
0009ac 93e0 0170 	STS  _cmp,R30
0009ae 93f0 0171 	STS  _cmp+1,R31
0009b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
0009b1 dff5      	RCALL SUBOPT_0xE
0009b2 940e 0b05 	CALL __ANEGW1
0009b4 01df      	MOVW R26,R30
0009b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
0009b6 eeec      	LDI  R30,LOW(65516)
0009b7 efff      	LDI  R31,HIGH(65516)
0009b8 17ea      	CP   R30,R26
0009b9 07fb      	CPC  R31,R27
0009ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
0009bb eaea      	LDI  R30,LOW(170)
0009bc e0f0      	LDI  R31,HIGH(170)
0009bd 16ce      	CP   R12,R30
0009be 06df      	CPC  R13,R31
0009bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x13:
0009c0 e2e0      	LDI  R30,LOW(800)
0009c1 e0f3      	LDI  R31,HIGH(800)
0009c2 168e      	CP   R8,R30
0009c3 069f      	CPC  R9,R31
0009c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x14:
0009c5 91e0 0162 	LDS  R30,_k
0009c7 91f0 0163 	LDS  R31,_k+1
0009c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
0009ca 93fa      	ST   -Y,R31
0009cb 93ea      	ST   -Y,R30
0009cc dff8      	RCALL SUBOPT_0x14
0009cd 940e 0b05 	CALL __ANEGW1
0009cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
0009d0 93fa      	ST   -Y,R31
0009d1 93ea      	ST   -Y,R30
0009d2 91a0 0162 	LDS  R26,_k
0009d4 91b0 0163 	LDS  R27,_k+1
0009d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x17:
0009d7 91a0 0162 	LDS  R26,_k
0009d9 91b0 0163 	LDS  R27,_k+1
0009db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x18:
0009dc e1ae      	LDI  R26,LOW(_backmax3)
0009dd e0b0      	LDI  R27,HIGH(_backmax3)
0009de 940e 0b54 	CALL __EEPROMRDW
0009e0 16ce      	CP   R12,R30
0009e1 06df      	CPC  R13,R31
0009e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
0009e3 dff3      	RCALL SUBOPT_0x17
0009e4 cfd1      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1A:
0009e5 dff1      	RCALL SUBOPT_0x17
0009e6 3eac      	CPI  R26,LOW(0xFFEC)
0009e7 efef      	LDI  R30,HIGH(0xFFEC)
0009e8 07be      	CPC  R27,R30
0009e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
0009ea e1ac      	LDI  R26,LOW(_backmax2)
0009eb e0b0      	LDI  R27,HIGH(_backmax2)
0009ec 940e 0b54 	CALL __EEPROMRDW
0009ee 16ce      	CP   R12,R30
0009ef 06df      	CPC  R13,R31
0009f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1C:
0009f1 e1ae      	LDI  R26,LOW(_backmax3)
0009f2 e0b0      	LDI  R27,HIGH(_backmax3)
0009f3 940e 0b54 	CALL __EEPROMRDW
0009f5 15ec      	CP   R30,R12
0009f6 05fd      	CPC  R31,R13
0009f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1D:
0009f8 e1ac      	LDI  R26,LOW(_backmax2)
0009f9 e0b0      	LDI  R27,HIGH(_backmax2)
0009fa 940e 0b54 	CALL __EEPROMRDW
0009fc 15ec      	CP   R30,R12
0009fd 05fd      	CPC  R31,R13
0009fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1E:
0009ff 91a0 0174 	LDS  R26,_position
000a01 91b0 0175 	LDS  R27,_position+1
000a03 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1F:
000a04 e0ed      	LDI  R30,LOW(13)
000a05 e0f0      	LDI  R31,HIGH(13)
000a06 166e      	CP   R6,R30
000a07 067f      	CPC  R7,R31
000a08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x20:
000a09 e0e3      	LDI  R30,LOW(3)
000a0a e0f0      	LDI  R31,HIGH(3)
000a0b 15e6      	CP   R30,R6
000a0c 05f7      	CPC  R31,R7
000a0d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x21:
                +
000a0e 9260 0176+STS _action + ( 0 ) , R6
000a10 9270 0177+STS _action + ( 0 ) + 1 , R7
                 	__PUTWMRN _action,0,6,7
000a12 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
000a13 e0e4      	LDI  R30,LOW(4)
000a14 e0f0      	LDI  R31,HIGH(4)
000a15 166e      	CP   R6,R30
000a16 067f      	CPC  R7,R31
000a17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x23:
000a18 e0e7      	LDI  R30,LOW(7)
000a19 e0f0      	LDI  R31,HIGH(7)
000a1a 15e6      	CP   R30,R6
000a1b 05f7      	CPC  R31,R7
000a1c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
000a1d e0ec      	LDI  R30,LOW(12)
000a1e e0f0      	LDI  R31,HIGH(12)
000a1f 15e6      	CP   R30,R6
000a20 05f7      	CPC  R31,R7
000a21 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x25:
000a22 e0e8      	LDI  R30,LOW(8)
000a23 e0f0      	LDI  R31,HIGH(8)
000a24 15e6      	CP   R30,R6
000a25 05f7      	CPC  R31,R7
000a26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
000a27 e0e9      	LDI  R30,LOW(9)
000a28 e0f0      	LDI  R31,HIGH(9)
000a29 166e      	CP   R6,R30
000a2a 067f      	CPC  R7,R31
000a2b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x27:
000a2c e0e4      	LDI  R30,LOW(4)
000a2d e0f0      	LDI  R31,HIGH(4)
000a2e 15e6      	CP   R30,R6
000a2f 05f7      	CPC  R31,R7
000a30 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x28:
000a31 e0ec      	LDI  R30,LOW(12)
000a32 e0f0      	LDI  R31,HIGH(12)
000a33 166e      	CP   R6,R30
000a34 067f      	CPC  R7,R31
000a35 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x29:
000a36 91e0 0172 	LDS  R30,_v
000a38 91f0 0173 	LDS  R31,_v+1
000a3a 93fa      	ST   -Y,R31
000a3b 93ea      	ST   -Y,R30
000a3c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 28 TIMES, CODE SIZE REDUCTION:105 WORDS
                 SUBOPT_0x2A:
000a3d 91e0 0172 	LDS  R30,_v
000a3f 91f0 0173 	LDS  R31,_v+1
000a41 940e 0b05 	CALL __ANEGW1
000a43 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x2B:
000a44 93fa      	ST   -Y,R31
000a45 93ea      	ST   -Y,R30
000a46 cff6      	RJMP SUBOPT_0x2A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x2C:
000a47 91a0 0172 	LDS  R26,_v
000a49 91b0 0173 	LDS  R27,_v+1
000a4b e0e2      	LDI  R30,LOW(2)
000a4c e0f0      	LDI  R31,HIGH(2)
000a4d 940e 0b29 	CALL __DIVW21
000a4f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x2D:
000a50 01df      	MOVW R26,R30
000a51 e0e2      	LDI  R30,LOW(2)
000a52 e0f0      	LDI  R31,HIGH(2)
000a53 940e 0b29 	CALL __DIVW21
000a55 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2E:
000a56 e0e0      	LDI  R30,LOW(0)
000a57 e0f0      	LDI  R31,HIGH(0)
000a58 cfeb      	RJMP SUBOPT_0x2B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2F:
000a59 93fa      	ST   -Y,R31
000a5a 93ea      	ST   -Y,R30
000a5b e0a0      	LDI  R26,LOW(0)
000a5c e0b0      	LDI  R27,0
000a5d 940c 029d 	JMP  _motor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x30:
000a5f 93fa      	ST   -Y,R31
000a60 93ea      	ST   -Y,R30
000a61 91a0 0172 	LDS  R26,_v
000a63 91b0 0173 	LDS  R27,_v+1
000a65 940c 029d 	JMP  _motor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x31:
000a67 93fa      	ST   -Y,R31
000a68 93ea      	ST   -Y,R30
000a69 e0e0      	LDI  R30,LOW(0)
000a6a e0f0      	LDI  R31,HIGH(0)
000a6b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x32:
000a6c 93fa      	ST   -Y,R31
000a6d 93ea      	ST   -Y,R30
000a6e cfc7      	RJMP SUBOPT_0x29
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
000a6f 91a0 0172 	LDS  R26,_v
000a71 91b0 0173 	LDS  R27,_v+1
000a73 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x34:
000a74 e0e0      	LDI  R30,LOW(0)
000a75 e0f0      	LDI  R31,HIGH(0)
000a76 cff0      	RJMP SUBOPT_0x31
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
000a77 df4d      	RCALL SUBOPT_0x14
000a78 1bae      	SUB  R26,R30
000a79 0bbf      	SBC  R27,R31
000a7a 93ba      	ST   -Y,R27
000a7b 93aa      	ST   -Y,R26
000a7c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
000a7d 91e0 0172 	LDS  R30,_v
000a7f 91f0 0173 	LDS  R31,_v+1
000a81 1bea      	SUB  R30,R26
000a82 0bfb      	SBC  R31,R27
000a83 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x37:
000a84 e0e1      	LDI  R30,LOW(65281)
000a85 efff      	LDI  R31,HIGH(65281)
000a86 93fa      	ST   -Y,R31
000a87 93ea      	ST   -Y,R30
000a88 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x38:
000a89 efef      	LDI  R30,LOW(255)
000a8a e0f0      	LDI  R31,HIGH(255)
000a8b 93fa      	ST   -Y,R31
000a8c 93ea      	ST   -Y,R30
000a8d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x39:
000a8e efaf      	LDI  R26,LOW(255)
000a8f e0b0      	LDI  R27,0
000a90 940e 029d 	CALL _motor
000a92 e9a0      	LDI  R26,LOW(400)
000a93 e0b1      	LDI  R27,HIGH(400)
000a94 940c 0afb 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3A:
000a96 e0a1      	LDI  R26,LOW(65281)
000a97 efbf      	LDI  R27,HIGH(65281)
000a98 940e 029d 	CALL _motor
000a9a e9a0      	LDI  R26,LOW(400)
000a9b e0b1      	LDI  R27,HIGH(400)
000a9c 940c 0afb 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3B:
000a9e 940e 0129 	CALL _sensor
000aa0 cf90      	RJMP SUBOPT_0x28
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3C:
000aa1 940e 0916 	CALL __long_delay_G100
000aa3 e3a0      	LDI  R26,LOW(48)
000aa4 940c 091b 	JMP  __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3D:
000aa6 940e 0892 	CALL __lcd_write_data
000aa8 940c 0916 	JMP  __long_delay_G100
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x18 ;PORTB
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
000aaa 98c0      	cbi  __i2c_port,__scl_bit
000aab 98c1      	cbi  __i2c_port,__sda_bit
000aac 9ab8      	sbi  __i2c_dir,__scl_bit
000aad 98b9      	cbi  __i2c_dir,__sda_bit
000aae c015      	rjmp __i2c_delay2
                 _i2c_start:
000aaf 98b9      	cbi  __i2c_dir,__sda_bit
000ab0 98b8      	cbi  __i2c_dir,__scl_bit
000ab1 27ee      	clr  r30
000ab2 0000      	nop
000ab3 9bb1      	sbis __i2c_pin,__sda_bit
000ab4 9508      	ret
000ab5 9bb0      	sbis __i2c_pin,__scl_bit
000ab6 9508      	ret
000ab7 d004      	rcall __i2c_delay1
000ab8 9ab9      	sbi  __i2c_dir,__sda_bit
000ab9 d002      	rcall __i2c_delay1
000aba 9ab8      	sbi  __i2c_dir,__scl_bit
000abb e0e1      	ldi  r30,1
                 __i2c_delay1:
000abc e06d      	ldi  r22,13
000abd c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000abe 9ab9      	sbi  __i2c_dir,__sda_bit
000abf 9ab8      	sbi  __i2c_dir,__scl_bit
000ac0 d003      	rcall __i2c_delay2
000ac1 98b8      	cbi  __i2c_dir,__scl_bit
000ac2 dff9      	rcall __i2c_delay1
000ac3 98b9      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000ac4 e16b      	ldi  r22,27
                 __i2c_delay2l:
000ac5 956a      	dec  r22
000ac6 f7f1      	brne __i2c_delay2l
000ac7 9508      	ret
                 _i2c_read:
000ac8 e078      	ldi  r23,8
                 __i2c_read0:
000ac9 98b8      	cbi  __i2c_dir,__scl_bit
000aca dff1      	rcall __i2c_delay1
                 __i2c_read3:
000acb 9bb0      	sbis __i2c_pin,__scl_bit
000acc cffe      	rjmp __i2c_read3
000acd dfee      	rcall __i2c_delay1
000ace 9488      	clc
000acf 99b1      	sbic __i2c_pin,__sda_bit
000ad0 9408      	sec
000ad1 9ab8      	sbi  __i2c_dir,__scl_bit
000ad2 dff1      	rcall __i2c_delay2
000ad3 1fee      	rol  r30
000ad4 957a      	dec  r23
000ad5 f799      	brne __i2c_read0
000ad6 2f7a      	mov  r23,r26
000ad7 2377      	tst  r23
000ad8 f411      	brne __i2c_read1
000ad9 98b9      	cbi  __i2c_dir,__sda_bit
000ada c001      	rjmp __i2c_read2
                 __i2c_read1:
000adb 9ab9      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
000adc dfdf      	rcall __i2c_delay1
000add 98b8      	cbi  __i2c_dir,__scl_bit
000ade dfe5      	rcall __i2c_delay2
000adf 9ab8      	sbi  __i2c_dir,__scl_bit
000ae0 dfdb      	rcall __i2c_delay1
000ae1 98b9      	cbi  __i2c_dir,__sda_bit
000ae2 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
000ae3 e078      	ldi  r23,8
                 __i2c_write0:
000ae4 0faa      	lsl  r26
000ae5 f410      	brcc __i2c_write1
000ae6 98b9      	cbi  __i2c_dir,__sda_bit
000ae7 c001      	rjmp __i2c_write2
                 __i2c_write1:
000ae8 9ab9      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
000ae9 dfda      	rcall __i2c_delay2
000aea 98b8      	cbi  __i2c_dir,__scl_bit
000aeb dfd0      	rcall __i2c_delay1
                 __i2c_write3:
000aec 9bb0      	sbis __i2c_pin,__scl_bit
000aed cffe      	rjmp __i2c_write3
000aee dfcd      	rcall __i2c_delay1
000aef 9ab8      	sbi  __i2c_dir,__scl_bit
000af0 957a      	dec  r23
000af1 f791      	brne __i2c_write0
000af2 98b9      	cbi  __i2c_dir,__sda_bit
000af3 dfc8      	rcall __i2c_delay1
000af4 98b8      	cbi  __i2c_dir,__scl_bit
000af5 dfce      	rcall __i2c_delay2
000af6 e0e1      	ldi  r30,1
000af7 99b1      	sbic __i2c_pin,__sda_bit
000af8 27ee      	clr  r30
000af9 9ab8      	sbi  __i2c_dir,__scl_bit
000afa cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
000afb 9610      	adiw r26,0
000afc f039      	breq __delay_ms1
                 __delay_ms0:
                +
000afd ed80     +LDI R24 , LOW ( 0x7D0 )
000afe e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000aff 9701     +SBIW R24 , 1
000b00 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000b01 95a8      	wdr
000b02 9711      	sbiw r26,1
000b03 f7c9      	brne __delay_ms0
                 __delay_ms1:
000b04 9508      	ret
                 
                 __ANEGW1:
000b05 95f1      	NEG  R31
000b06 95e1      	NEG  R30
000b07 40f0      	SBCI R31,0
000b08 9508      	RET
                 
                 __MULW12U:
000b09 9ffa      	MUL  R31,R26
000b0a 2df0      	MOV  R31,R0
000b0b 9feb      	MUL  R30,R27
000b0c 0df0      	ADD  R31,R0
000b0d 9fea      	MUL  R30,R26
000b0e 2de0      	MOV  R30,R0
000b0f 0df1      	ADD  R31,R1
000b10 9508      	RET
                 
                 __MULW12:
000b11 d034      	RCALL __CHKSIGNW
000b12 dff6      	RCALL __MULW12U
000b13 f40e      	BRTC __MULW121
000b14 dff0      	RCALL __ANEGW1
                 __MULW121:
000b15 9508      	RET
                 
                 __DIVW21U:
000b16 2400      	CLR  R0
000b17 2411      	CLR  R1
000b18 e190      	LDI  R25,16
                 __DIVW21U1:
000b19 0faa      	LSL  R26
000b1a 1fbb      	ROL  R27
000b1b 1c00      	ROL  R0
000b1c 1c11      	ROL  R1
000b1d 1a0e      	SUB  R0,R30
000b1e 0a1f      	SBC  R1,R31
000b1f f418      	BRCC __DIVW21U2
000b20 0e0e      	ADD  R0,R30
000b21 1e1f      	ADC  R1,R31
000b22 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000b23 60a1      	SBR  R26,1
                 __DIVW21U3:
000b24 959a      	DEC  R25
000b25 f799      	BRNE __DIVW21U1
000b26 01fd      	MOVW R30,R26
000b27 01d0      	MOVW R26,R0
000b28 9508      	RET
                 
                 __DIVW21:
000b29 d01c      	RCALL __CHKSIGNW
000b2a dfeb      	RCALL __DIVW21U
000b2b f40e      	BRTC __DIVW211
000b2c dfd8      	RCALL __ANEGW1
                 __DIVW211:
000b2d 9508      	RET
                 
                 __MODW21:
000b2e 94e8      	CLT
000b2f ffb7      	SBRS R27,7
000b30 c004      	RJMP __MODW211
000b31 95a0      	COM  R26
000b32 95b0      	COM  R27
000b33 9611      	ADIW R26,1
000b34 9468      	SET
                 __MODW211:
000b35 fdf7      	SBRC R31,7
000b36 dfce      	RCALL __ANEGW1
000b37 dfde      	RCALL __DIVW21U
000b38 01fd      	MOVW R30,R26
000b39 f40e      	BRTC __MODW212
000b3a dfca      	RCALL __ANEGW1
                 __MODW212:
000b3b 9508      	RET
                 
                 __MANDW12:
000b3c 94e8      	CLT
000b3d fff7      	SBRS R31,7
000b3e c002      	RJMP __MANDW121
000b3f dfc5      	RCALL __ANEGW1
000b40 9468      	SET
                 __MANDW121:
000b41 23ea      	AND  R30,R26
000b42 23fb      	AND  R31,R27
000b43 f40e      	BRTC __MANDW122
000b44 dfc0      	RCALL __ANEGW1
                 __MANDW122:
000b45 9508      	RET
                 
                 __CHKSIGNW:
000b46 94e8      	CLT
000b47 fff7      	SBRS R31,7
000b48 c002      	RJMP __CHKSW1
000b49 dfbb      	RCALL __ANEGW1
000b4a 9468      	SET
                 __CHKSW1:
000b4b ffb7      	SBRS R27,7
000b4c c006      	RJMP __CHKSW2
000b4d 95a0      	COM  R26
000b4e 95b0      	COM  R27
000b4f 9611      	ADIW R26,1
000b50 f800      	BLD  R0,0
000b51 9403      	INC  R0
000b52 fa00      	BST  R0,0
                 __CHKSW2:
000b53 9508      	RET
                 
                 __EEPROMRDW:
000b54 9611      	ADIW R26,1
000b55 d002      	RCALL __EEPROMRDB
000b56 2ffe      	MOV  R31,R30
000b57 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000b58 99e1      	SBIC EECR,EEWE
000b59 cffe      	RJMP __EEPROMRDB
000b5a 93ff      	PUSH R31
000b5b b7ff      	IN   R31,SREG
000b5c 94f8      	CLI
000b5d bbae      	OUT  EEARL,R26
000b5e bbbf      	OUT  EEARH,R27
000b5f 9ae0      	SBI  EECR,EERE
000b60 b3ed      	IN   R30,EEDR
000b61 bfff      	OUT  SREG,R31
000b62 91ff      	POP  R31
000b63 9508      	RET
                 
                 __EEPROMWRW:
000b64 d007      	RCALL __EEPROMWRB
000b65 9611      	ADIW R26,1
000b66 93ef      	PUSH R30
000b67 2fef      	MOV  R30,R31
000b68 d003      	RCALL __EEPROMWRB
000b69 91ef      	POP  R30
000b6a 9711      	SBIW R26,1
000b6b 9508      	RET
                 
                 __EEPROMWRB:
000b6c 9be1      	SBIS EECR,EEWE
000b6d c002      	RJMP __EEPROMWRB1
000b6e 95a8      	WDR
000b6f cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000b70 b79f      	IN   R25,SREG
000b71 94f8      	CLI
000b72 bbae      	OUT  EEARL,R26
000b73 bbbf      	OUT  EEARH,R27
000b74 9ae0      	SBI  EECR,EERE
000b75 b38d      	IN   R24,EEDR
000b76 17e8      	CP   R30,R24
000b77 f019      	BREQ __EEPROMWRB0
000b78 bbed      	OUT  EEDR,R30
000b79 9ae2      	SBI  EECR,EEMWE
000b7a 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000b7b bf9f      	OUT  SREG,R25
000b7c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  27 r1 :   7 r2 :   0 r3 :   0 r4 :   9 r5 :   2 r6 :  79 r7 :  43 
r8 :   7 r9 :   2 r10:   7 r11:   2 r12:  11 r13:   7 r14:   0 r15:   0 
r16:   0 r17:   8 r18:   0 r19:   0 r20:   0 r21:   0 r22:   7 r23:   7 
r24:  15 r25:   8 r26: 293 r27: 100 r28:   7 r29:   1 r30: 553 r31: 269 
x  :   3 y  : 170 z  :   9 
Registers used: 26 out of 35 (74.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   9 add   :  12 
adiw  :  34 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  15 
brge  :  50 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :  69 brmi  :   5 brne  :  60 brpl  :   0 brsh  :   1 brtc  :   4 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 390 
cbi   :  33 cbr   :   0 clc   :   1 clh   :   0 cli   :   3 cln   :   0 
clr   :  11 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   4 
cp    :  53 cpc   :  84 cpi   :  46 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  14 inc   :   1 jmp   :  33 ld    :  18 ldd   :  56 ldi   : 333 
lds   :  52 lpm   :   9 lsl   :   2 lsr   :   0 mov   :  18 movw  :  80 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   1 or    :   6 
ori   :   3 out   :  61 pop   :   4 push  :   4 rcall :  66 ret   :  75 
reti  :   0 rjmp  : 174 rol   :   4 ror   :   0 sbc   :   5 sbci  :   7 
sbi   :  34 sbic  :   3 sbis  :   7 sbiw  :  55 sbr   :   1 sbrc  :   2 
sbrs  :   4 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  64 std   :  36 sts   :  53 sub   :   5 subi  :  15 swap  :   2 
tst   :   6 wdr   :  22 
Instructions used: 70 out of 116 (60.3%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0016fa   5562    320   5882   16384  35.9%
[.dseg] 0x000060 0x00018c      0     44     44    1024   4.3%
[.eseg] 0x000000 0x000020      0     32     32     512   6.3%

Assembly complete, 0 errors, 13 warnings
