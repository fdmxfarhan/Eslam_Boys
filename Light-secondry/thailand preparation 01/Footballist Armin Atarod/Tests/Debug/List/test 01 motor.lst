
AVRASM ver. 2.1.30  C:\Users\User\Desktop\Robotic\Footballist\Tests\Debug\List\test 01 motor.asm Fri Nov 17 10:14:16 2017

C:\Users\User\Desktop\Robotic\Footballist\Tests\Debug\List\test 01 motor.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\Debug\List\test 01 motor.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\Debug\List\test 01 motor.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x2000003:
00002a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00002b 0002      	.DW  0x02
00002c 0160      	.DW  __base_y_G100
00002d 0054      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00002e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000042 e5e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000043 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000044 9185      	LPM  R24,Z+
000045 9195      	LPM  R25,Z+
000046 9700      	SBIW R24,0
000047 f061      	BREQ __GLOBAL_INI_END
000048 91a5      	LPM  R26,Z+
000049 91b5      	LPM  R27,Z+
00004a 9005      	LPM  R0,Z+
00004b 9015      	LPM  R1,Z+
00004c 01bf      	MOVW R22,R30
00004d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004e 9005      	LPM  R0,Z+
00004f 920d      	ST   X+,R0
000050 9701      	SBIW R24,1
000051 f7e1      	BRNE __GLOBAL_INI_LOOP
000052 01fb      	MOVW R30,R22
000053 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000054 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000055 bfed      	OUT  SPL,R30
000056 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000057 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000058 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000059 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005a 940c 00fc 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#asm
                   .equ __lcd_port=0x15;PORTC
                 ; 0000 0008 #endasm
                 ;#include <lcd.h>
                 ;
                 ;
                 ;// Declare your global variables here
                 ;void motor(int mr1, int mr2, int ml1, int ml2)
                 ; 0000 000E {
                 
                 	.CSEG
                 _motor:
                 ; .FSTART _motor
                 ; 0000 000F     if (mr1 > 255) mr1 = 255;
00005c 93ba      	ST   -Y,R27
00005d 93aa      	ST   -Y,R26
                 ;	mr1 -> Y+6
                 ;	mr2 -> Y+4
                 ;	ml1 -> Y+2
                 ;	ml2 -> Y+0
00005e 81ae      	LDD  R26,Y+6
00005f 81bf      	LDD  R27,Y+6+1
000060 30a0      	CPI  R26,LOW(0x100)
000061 e0e1      	LDI  R30,HIGH(0x100)
000062 07be      	CPC  R27,R30
000063 f024      	BRLT _0x3
000064 efef      	LDI  R30,LOW(255)
000065 e0f0      	LDI  R31,HIGH(255)
000066 83ee      	STD  Y+6,R30
000067 83ff      	STD  Y+6+1,R31
                 ; 0000 0010     if (mr2 > 255) mr2 = 255;
                 _0x3:
000068 81ac      	LDD  R26,Y+4
000069 81bd      	LDD  R27,Y+4+1
00006a 30a0      	CPI  R26,LOW(0x100)
00006b e0e1      	LDI  R30,HIGH(0x100)
00006c 07be      	CPC  R27,R30
00006d f024      	BRLT _0x4
00006e efef      	LDI  R30,LOW(255)
00006f e0f0      	LDI  R31,HIGH(255)
000070 83ec      	STD  Y+4,R30
000071 83fd      	STD  Y+4+1,R31
                 ; 0000 0011     if (ml1 > 255) ml1 = 255;
                 _0x4:
000072 81aa      	LDD  R26,Y+2
000073 81bb      	LDD  R27,Y+2+1
000074 30a0      	CPI  R26,LOW(0x100)
000075 e0e1      	LDI  R30,HIGH(0x100)
000076 07be      	CPC  R27,R30
000077 f024      	BRLT _0x5
000078 efef      	LDI  R30,LOW(255)
000079 e0f0      	LDI  R31,HIGH(255)
00007a 83ea      	STD  Y+2,R30
00007b 83fb      	STD  Y+2+1,R31
                 ; 0000 0012     if (ml2 > 255) ml2 = 255;
                 _0x5:
00007c 81a8      	LD   R26,Y
00007d 81b9      	LDD  R27,Y+1
00007e 30a0      	CPI  R26,LOW(0x100)
00007f e0e1      	LDI  R30,HIGH(0x100)
000080 07be      	CPC  R27,R30
000081 f024      	BRLT _0x6
000082 efef      	LDI  R30,LOW(255)
000083 e0f0      	LDI  R31,HIGH(255)
000084 83e8      	ST   Y,R30
000085 83f9      	STD  Y+1,R31
                 ; 0000 0013     if (mr1 < -255) mr1 = -255;
                 _0x6:
000086 81ae      	LDD  R26,Y+6
000087 81bf      	LDD  R27,Y+6+1
000088 30a1      	CPI  R26,LOW(0xFF01)
000089 efef      	LDI  R30,HIGH(0xFF01)
00008a 07be      	CPC  R27,R30
00008b f424      	BRGE _0x7
00008c e0e1      	LDI  R30,LOW(65281)
00008d efff      	LDI  R31,HIGH(65281)
00008e 83ee      	STD  Y+6,R30
00008f 83ff      	STD  Y+6+1,R31
                 ; 0000 0014     if (mr2 < -255) mr2 = -255;
                 _0x7:
000090 81ac      	LDD  R26,Y+4
000091 81bd      	LDD  R27,Y+4+1
000092 30a1      	CPI  R26,LOW(0xFF01)
000093 efef      	LDI  R30,HIGH(0xFF01)
000094 07be      	CPC  R27,R30
000095 f424      	BRGE _0x8
000096 e0e1      	LDI  R30,LOW(65281)
000097 efff      	LDI  R31,HIGH(65281)
000098 83ec      	STD  Y+4,R30
000099 83fd      	STD  Y+4+1,R31
                 ; 0000 0015     if (ml1 < -255) ml1 = -255;
                 _0x8:
00009a 81aa      	LDD  R26,Y+2
00009b 81bb      	LDD  R27,Y+2+1
00009c 30a1      	CPI  R26,LOW(0xFF01)
00009d efef      	LDI  R30,HIGH(0xFF01)
00009e 07be      	CPC  R27,R30
00009f f424      	BRGE _0x9
0000a0 e0e1      	LDI  R30,LOW(65281)
0000a1 efff      	LDI  R31,HIGH(65281)
0000a2 83ea      	STD  Y+2,R30
0000a3 83fb      	STD  Y+2+1,R31
                 ; 0000 0016     if (ml2 < -255) ml2 = -255;
                 _0x9:
0000a4 81a8      	LD   R26,Y
0000a5 81b9      	LDD  R27,Y+1
0000a6 30a1      	CPI  R26,LOW(0xFF01)
0000a7 efef      	LDI  R30,HIGH(0xFF01)
0000a8 07be      	CPC  R27,R30
0000a9 f424      	BRGE _0xA
0000aa e0e1      	LDI  R30,LOW(65281)
0000ab efff      	LDI  R31,HIGH(65281)
0000ac 83e8      	ST   Y,R30
0000ad 83f9      	STD  Y+1,R31
                 ; 0000 0017     //////////////////////////////////////////////////////////////////////////////mr1
                 ; 0000 0018     if (mr1 > 0)
                 _0xA:
0000ae 81ae      	LDD  R26,Y+6
0000af 81bf      	LDD  R27,Y+6+1
0000b0 940e 0238 	CALL __CPW02
0000b2 f41c      	BRGE _0xB
                 ; 0000 0019     {
                 ; 0000 001A         PORTD.0 = 0;
0000b3 9890      	CBI  0x12,0
                 ; 0000 001B         OCR0 = mr1;
0000b4 81ee      	LDD  R30,Y+6
0000b5 c008      	RJMP _0x2E
                 ; 0000 001C     }
                 ; 0000 001D     else if (mr1 <= 0)
                 _0xB:
0000b6 81ae      	LDD  R26,Y+6
0000b7 81bf      	LDD  R27,Y+6+1
0000b8 940e 0238 	CALL __CPW02
0000ba f024      	BRLT _0xF
                 ; 0000 001E     {
                 ; 0000 001F         PORTD.0 = 1;
0000bb 9a90      	SBI  0x12,0
                 ; 0000 0020         OCR0 = mr1+255;
0000bc 81ee      	LDD  R30,Y+6
0000bd 50e1      	SUBI R30,-LOW(255)
                 _0x2E:
0000be bfec      	OUT  0x3C,R30
                 ; 0000 0021     }
                 ; 0000 0022     ///////////////////////////////////////////////////////////////////////////////mr2
                 ; 0000 0023     if (mr2 > 0)
                 _0xF:
0000bf 81ac      	LDD  R26,Y+4
0000c0 81bd      	LDD  R27,Y+4+1
0000c1 940e 0238 	CALL __CPW02
0000c3 f424      	BRGE _0x12
                 ; 0000 0024     {
                 ; 0000 0025         PORTD.1 = 0;
0000c4 9891      	CBI  0x12,1
                 ; 0000 0026         OCR1B = mr2;
0000c5 81ec      	LDD  R30,Y+4
0000c6 81fd      	LDD  R31,Y+4+1
0000c7 c00a      	RJMP _0x2F
                 ; 0000 0027     }
                 ; 0000 0028     else if (mr2 <= 0)
                 _0x12:
0000c8 81ac      	LDD  R26,Y+4
0000c9 81bd      	LDD  R27,Y+4+1
0000ca 940e 0238 	CALL __CPW02
0000cc f03c      	BRLT _0x16
                 ; 0000 0029     {
                 ; 0000 002A         PORTD.1 = 1;
0000cd 9a91      	SBI  0x12,1
                 ; 0000 002B         OCR1B = mr2+255;
0000ce 81ec      	LDD  R30,Y+4
0000cf 81fd      	LDD  R31,Y+4+1
0000d0 50e1      	SUBI R30,LOW(-255)
0000d1 4fff      	SBCI R31,HIGH(-255)
                 _0x2F:
0000d2 bdf9      	OUT  0x28+1,R31
0000d3 bde8      	OUT  0x28,R30
                 ; 0000 002C     }
                 ; 0000 002D     ///////////////////////////////////////////////////////////////////////////////ml2
                 ; 0000 002E     if (ml2 > 0)
                 _0x16:
0000d4 81a8      	LD   R26,Y
0000d5 81b9      	LDD  R27,Y+1
0000d6 940e 0238 	CALL __CPW02
0000d8 f424      	BRGE _0x19
                 ; 0000 002F     {
                 ; 0000 0030         PORTD.2 = 0;
0000d9 9892      	CBI  0x12,2
                 ; 0000 0031         OCR1A = ml2;
0000da 81e8      	LD   R30,Y
0000db 81f9      	LDD  R31,Y+1
0000dc c00a      	RJMP _0x30
                 ; 0000 0032     }
                 ; 0000 0033     else if (ml2 <= 0)
                 _0x19:
0000dd 81a8      	LD   R26,Y
0000de 81b9      	LDD  R27,Y+1
0000df 940e 0238 	CALL __CPW02
0000e1 f03c      	BRLT _0x1D
                 ; 0000 0034     {
                 ; 0000 0035         PORTD.2 = 1;
0000e2 9a92      	SBI  0x12,2
                 ; 0000 0036         OCR1A = ml2+255;
0000e3 81e8      	LD   R30,Y
0000e4 81f9      	LDD  R31,Y+1
0000e5 50e1      	SUBI R30,LOW(-255)
0000e6 4fff      	SBCI R31,HIGH(-255)
                 _0x30:
0000e7 bdfb      	OUT  0x2A+1,R31
0000e8 bdea      	OUT  0x2A,R30
                 ; 0000 0037     }
                 ; 0000 0038     ///////////////////////////////////////////////////////////////////////////////ml1
                 ; 0000 0039     if (ml1 > 0)
                 _0x1D:
0000e9 81aa      	LDD  R26,Y+2
0000ea 81bb      	LDD  R27,Y+2+1
0000eb 940e 0238 	CALL __CPW02
0000ed f41c      	BRGE _0x20
                 ; 0000 003A     {
                 ; 0000 003B         PORTD.3 = 0;
0000ee 9893      	CBI  0x12,3
                 ; 0000 003C         OCR2 = ml1;
0000ef 81ea      	LDD  R30,Y+2
0000f0 c008      	RJMP _0x31
                 ; 0000 003D     }
                 ; 0000 003E     else if (ml1 <= 0)
                 _0x20:
0000f1 81aa      	LDD  R26,Y+2
0000f2 81bb      	LDD  R27,Y+2+1
0000f3 940e 0238 	CALL __CPW02
0000f5 f024      	BRLT _0x24
                 ; 0000 003F     {
                 ; 0000 0040         PORTD.3 = 1;
0000f6 9a93      	SBI  0x12,3
                 ; 0000 0041         OCR2 = ml1+255;
0000f7 81ea      	LDD  R30,Y+2
0000f8 50e1      	SUBI R30,-LOW(255)
                 _0x31:
0000f9 bde3      	OUT  0x23,R30
                 ; 0000 0042     }
                 ; 0000 0043     ///////////////////////////////////////////////////////////////////////////////
                 ; 0000 0044 }
                 _0x24:
0000fa 9628      	ADIW R28,8
0000fb 9508      	RET
                 ; .FEND
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 004B {
                 ; 0000 004C ADMUX=adc_input | ADC_VREF_TYPE;
                 ;	adc_input -> Y+0
                 ; 0000 004D // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 004E delay_us(10);
                 ; 0000 004F // Start the AD conversion
                 ; 0000 0050 ADCSRA|=(1<<ADSC);
                 ; 0000 0051 // Wait for the AD conversion to complete
                 ; 0000 0052 while ((ADCSRA & (1<<ADIF))==0);
                 ; 0000 0053 ADCSRA|=(1<<ADIF);
                 ; 0000 0054 return ADCW;
                 ; 0000 0055 }
                 ;
                 ;void main(void)
                 ; 0000 0058 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0059 {
                 ; 0000 005A // Declare your local variables here
                 ; 0000 005B 
                 ; 0000 005C // Input/Output Ports initialization
                 ; 0000 005D // Port A initialization
                 ; 0000 005E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005F DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000fc e0e0      	LDI  R30,LOW(0)
0000fd bbea      	OUT  0x1A,R30
                 ; 0000 0060 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0061 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000fe bbeb      	OUT  0x1B,R30
                 ; 0000 0062 
                 ; 0000 0063 // Port B initialization
                 ; 0000 0064 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0065 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000ff e0e8      	LDI  R30,LOW(8)
000100 bbe7      	OUT  0x17,R30
                 ; 0000 0066 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 0067 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000101 e0e0      	LDI  R30,LOW(0)
000102 bbe8      	OUT  0x18,R30
                 ; 0000 0068 
                 ; 0000 0069 // Port C initialization
                 ; 0000 006A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 006B DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000103 bbe4      	OUT  0x14,R30
                 ; 0000 006C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 006D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000104 bbe5      	OUT  0x15,R30
                 ; 0000 006E 
                 ; 0000 006F // Port D initialization
                 ; 0000 0070 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0071 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000105 efef      	LDI  R30,LOW(255)
000106 bbe1      	OUT  0x11,R30
                 ; 0000 0072 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0073 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000107 e0e0      	LDI  R30,LOW(0)
000108 bbe2      	OUT  0x12,R30
                 ; 0000 0074 
                 ; 0000 0075 // Timer/Counter 0 initialization
                 ; 0000 0076 // Clock source: System Clock
                 ; 0000 0077 // Clock value: 15.625 kHz
                 ; 0000 0078 // Mode: Fast PWM top=0xFF
                 ; 0000 0079 // OC0 output: Non-Inverted PWM
                 ; 0000 007A // Timer Period: 16.384 ms
                 ; 0000 007B // Output Pulse(s):
                 ; 0000 007C // OC0 Period: 16.384 ms Width: 0 us
                 ; 0000 007D TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
000109 e6eb      	LDI  R30,LOW(107)
00010a bfe3      	OUT  0x33,R30
                 ; 0000 007E TCNT0=0x00;
00010b e0e0      	LDI  R30,LOW(0)
00010c bfe2      	OUT  0x32,R30
                 ; 0000 007F OCR0=0x00;
00010d bfec      	OUT  0x3C,R30
                 ; 0000 0080 
                 ; 0000 0081 // Timer/Counter 1 initialization
                 ; 0000 0082 // Clock source: System Clock
                 ; 0000 0083 // Clock value: 15.625 kHz
                 ; 0000 0084 // Mode: Fast PWM top=0x00FF
                 ; 0000 0085 // OC1A output: Non-Inverted PWM
                 ; 0000 0086 // OC1B output: Non-Inverted PWM
                 ; 0000 0087 // Noise Canceler: Off
                 ; 0000 0088 // Input Capture on Falling Edge
                 ; 0000 0089 // Timer Period: 16.384 ms
                 ; 0000 008A // Output Pulse(s):
                 ; 0000 008B // OC1A Period: 16.384 ms Width: 0 us// OC1B Period: 16.384 ms Width: 0 us
                 ; 0000 008C // Timer1 Overflow Interrupt: Off
                 ; 0000 008D // Input Capture Interrupt: Off
                 ; 0000 008E // Compare A Match Interrupt: Off
                 ; 0000 008F // Compare B Match Interrupt: Off
                 ; 0000 0090 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
00010e eae1      	LDI  R30,LOW(161)
00010f bdef      	OUT  0x2F,R30
                 ; 0000 0091 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
000110 e0eb      	LDI  R30,LOW(11)
000111 bdee      	OUT  0x2E,R30
                 ; 0000 0092 TCNT1H=0x00;
000112 e0e0      	LDI  R30,LOW(0)
000113 bded      	OUT  0x2D,R30
                 ; 0000 0093 TCNT1L=0x00;
000114 bdec      	OUT  0x2C,R30
                 ; 0000 0094 ICR1H=0x00;
000115 bde7      	OUT  0x27,R30
                 ; 0000 0095 ICR1L=0x00;
000116 bde6      	OUT  0x26,R30
                 ; 0000 0096 OCR1AH=0x00;
000117 bdeb      	OUT  0x2B,R30
                 ; 0000 0097 OCR1AL=0x00;
000118 bdea      	OUT  0x2A,R30
                 ; 0000 0098 OCR1BH=0x00;
000119 bde9      	OUT  0x29,R30
                 ; 0000 0099 OCR1BL=0x00;
00011a bde8      	OUT  0x28,R30
                 ; 0000 009A 
                 ; 0000 009B // Timer/Counter 2 initialization
                 ; 0000 009C // Clock source: System Clock
                 ; 0000 009D // Clock value: 15.625 kHz
                 ; 0000 009E // Mode: Fast PWM top=0xFF
                 ; 0000 009F // OC2 output: Non-Inverted PWM
                 ; 0000 00A0 // Timer Period: 16.384 ms
                 ; 0000 00A1 // Output Pulse(s):
                 ; 0000 00A2 // OC2 Period: 16.384 ms Width: 0 us
                 ; 0000 00A3 ASSR=0<<AS2;
00011b bde2      	OUT  0x22,R30
                 ; 0000 00A4 TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
00011c e6ec      	LDI  R30,LOW(108)
00011d bde5      	OUT  0x25,R30
                 ; 0000 00A5 TCNT2=0x00;
00011e e0e0      	LDI  R30,LOW(0)
00011f bde4      	OUT  0x24,R30
                 ; 0000 00A6 OCR2=0x00;
000120 bde3      	OUT  0x23,R30
                 ; 0000 00A7 
                 ; 0000 00A8 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00A9 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000121 bfe9      	OUT  0x39,R30
                 ; 0000 00AA 
                 ; 0000 00AB // External Interrupt(s) initialization
                 ; 0000 00AC // INT0: Off
                 ; 0000 00AD // INT1: Off
                 ; 0000 00AE // INT2: Off
                 ; 0000 00AF MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000122 bfe5      	OUT  0x35,R30
                 ; 0000 00B0 MCUCSR=(0<<ISC2);
000123 bfe4      	OUT  0x34,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // USART initialization
                 ; 0000 00B3 // USART disabled
                 ; 0000 00B4 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000124 b9ea      	OUT  0xA,R30
                 ; 0000 00B5 
                 ; 0000 00B6 // Analog Comparator initialization
                 ; 0000 00B7 // Analog Comparator: Off
                 ; 0000 00B8 // The Analog Comparator's positive input is
                 ; 0000 00B9 // connected to the AIN0 pin
                 ; 0000 00BA // The Analog Comparator's negative input is
                 ; 0000 00BB // connected to the AIN1 pin
                 ; 0000 00BC ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000125 e8e0      	LDI  R30,LOW(128)
000126 b9e8      	OUT  0x8,R30
                 ; 0000 00BD 
                 ; 0000 00BE // ADC initialization
                 ; 0000 00BF // ADC Clock frequency: 62.500 kHz
                 ; 0000 00C0 // ADC Voltage Reference: AVCC pin
                 ; 0000 00C1 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00C2 ADMUX=ADC_VREF_TYPE;
000127 e4e0      	LDI  R30,LOW(64)
000128 b9e7      	OUT  0x7,R30
                 ; 0000 00C3 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000129 e8e4      	LDI  R30,LOW(132)
00012a b9e6      	OUT  0x6,R30
                 ; 0000 00C4 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00012b e0e0      	LDI  R30,LOW(0)
00012c bfe0      	OUT  0x30,R30
                 ; 0000 00C5 
                 ; 0000 00C6 // SPI initialization
                 ; 0000 00C7 // SPI disabled
                 ; 0000 00C8 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00012d b9ed      	OUT  0xD,R30
                 ; 0000 00C9 
                 ; 0000 00CA // TWI initialization
                 ; 0000 00CB // TWI disabled
                 ; 0000 00CC TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00012e bfe6      	OUT  0x36,R30
                 ; 0000 00CD 
                 ; 0000 00CE // Alphanumeric LCD initialization
                 ; 0000 00CF // Connections are specified in the
                 ; 0000 00D0 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00D1 // RS - PORTC Bit 0
                 ; 0000 00D2 // RD - PORTC Bit 1
                 ; 0000 00D3 // EN - PORTC Bit 2
                 ; 0000 00D4 // D4 - PORTC Bit 4
                 ; 0000 00D5 // D5 - PORTC Bit 5
                 ; 0000 00D6 // D6 - PORTC Bit 6
                 ; 0000 00D7 // D7 - PORTC Bit 7
                 ; 0000 00D8 // Characters/line: 16
                 ; 0000 00D9 lcd_init(16);
00012f e1a0      	LDI  R26,LOW(16)
000130 940e 01d8 	CALL _lcd_init
                 ; 0000 00DA }
                 ; 0000 00DB while (1)
                 _0x2A:
                 ; 0000 00DC       {
                 ; 0000 00DD         motor(255,0,0,0);
000132 940e 0205 	CALL SUBOPT_0x0
000134 940e 020e 	CALL SUBOPT_0x1
000136 940e 0213 	CALL SUBOPT_0x2
                 ; 0000 00DE         delay_ms(7000);
                 ; 0000 00DF         motor(-255,0,0,0);
000138 940e 021b 	CALL SUBOPT_0x3
00013a 940e 020e 	CALL SUBOPT_0x1
00013c 940e 0213 	CALL SUBOPT_0x2
                 ; 0000 00E0         delay_ms(7000);
                 ; 0000 00E1         motor(0,255,0,0);
00013e 940e 020e 	CALL SUBOPT_0x1
000140 940e 0205 	CALL SUBOPT_0x0
000142 940e 0213 	CALL SUBOPT_0x2
                 ; 0000 00E2         delay_ms(7000);
                 ; 0000 00E3         motor(0,-255,0,0);
000144 940e 020e 	CALL SUBOPT_0x1
000146 940e 021b 	CALL SUBOPT_0x3
000148 940e 0213 	CALL SUBOPT_0x2
                 ; 0000 00E4         delay_ms(7000);
                 ; 0000 00E5         motor(0,0,255,0);
00014a 940e 020e 	CALL SUBOPT_0x1
00014c 940e 020e 	CALL SUBOPT_0x1
00014e efef      	LDI  R30,LOW(255)
00014f e0f0      	LDI  R31,HIGH(255)
000150 93fa      	ST   -Y,R31
000151 93ea      	ST   -Y,R30
000152 940e 0213 	CALL SUBOPT_0x2
                 ; 0000 00E6         delay_ms(7000);
                 ; 0000 00E7         motor(0,0,-255,0);
000154 940e 020e 	CALL SUBOPT_0x1
000156 940e 020e 	CALL SUBOPT_0x1
000158 e0e1      	LDI  R30,LOW(65281)
000159 efff      	LDI  R31,HIGH(65281)
00015a 93fa      	ST   -Y,R31
00015b 93ea      	ST   -Y,R30
00015c 940e 0213 	CALL SUBOPT_0x2
                 ; 0000 00E8         delay_ms(7000);
                 ; 0000 00E9         motor(0,0,0,255);
00015e 940e 020e 	CALL SUBOPT_0x1
000160 940e 020e 	CALL SUBOPT_0x1
000162 940e 020e 	CALL SUBOPT_0x1
000164 efaf      	LDI  R26,LOW(255)
000165 e0b0      	LDI  R27,0
000166 940e 0220 	CALL SUBOPT_0x4
                 ; 0000 00EA         delay_ms(7000);
                 ; 0000 00EB         motor(0,0,0,-255);
000168 940e 020e 	CALL SUBOPT_0x1
00016a 940e 020e 	CALL SUBOPT_0x1
00016c 940e 020e 	CALL SUBOPT_0x1
00016e e0a1      	LDI  R26,LOW(65281)
00016f efbf      	LDI  R27,HIGH(65281)
000170 940e 0220 	CALL SUBOPT_0x4
                 ; 0000 00EC         delay_ms(7000);
                 ; 0000 00ED 
                 ; 0000 00EE       }
000172 cfbf      	RJMP _0x2A
                 ; 0000 00EF }
                 _0x2D:
000173 cfff      	RJMP _0x2D
                 ; .FEND
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
000174 e0ff          ldi   r31,15
                 __lcd_delay0:
000175 95fa          dec   r31
000176 f7f1          brne  __lcd_delay0
000177 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000178 b3a4          in    r26,__lcd_direction
000179 70af          andi  r26,0xf                 ;set as input
00017a bba4          out   __lcd_direction,r26
00017b 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
00017c 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
00017d dff6      	RCALL __lcd_delay_G100
00017e 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00017f dff4      	RCALL __lcd_delay_G100
000180 b3a3          in    r26,__lcd_pin
000181 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000182 dff1      	RCALL __lcd_delay_G100
000183 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000184 dfef      	RCALL __lcd_delay_G100
000185 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000186 fda7          sbrc  r26,__lcd_busy_flag
000187 cff5          rjmp  __lcd_busy
000188 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000189 7fa0          andi  r26,0xf0
00018a 2bab          or    r26,r27
00018b bba5          out   __lcd_port,r26          ;write
00018c 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00018d 940e 0174 	CALL __lcd_delay_G100
00018f 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000190 940e 0174 	CALL __lcd_delay_G100
000192 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000193 93aa      	ST   -Y,R26
000194 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000195 b3a4          in    r26,__lcd_direction
000196 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000197 bba4          out   __lcd_direction,r26
000198 b3b5          in    r27,__lcd_port
000199 70bf          andi  r27,0xf
00019a 81a8          ld    r26,y
00019b dfed      	RCALL __lcd_write_nibble_G100
00019c 81a8          ld    r26,y
00019d 95a2          swap  r26
00019e dfea      	RCALL __lcd_write_nibble_G100
00019f 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0001a0 940c 0203 	JMP  _0x2020001
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
0001a2 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0001a3 940e 0174 	CALL __lcd_delay_G100
0001a5 b3e3          in    r30,__lcd_pin           ;read
0001a6 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0001a7 940e 0174 	CALL __lcd_delay_G100
0001a9 7fe0          andi  r30,0xf0
0001aa 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
0001ab 940e 0174 	CALL __lcd_delay_G100
0001ad dff4      	RCALL __lcd_read_nibble_G100
0001ae 2fae          mov   r26,r30
0001af dff2      	RCALL __lcd_read_nibble_G100
0001b0 98a9          cbi   __lcd_port,__lcd_rd     ;RD=0
0001b1 95e2          swap  r30
0001b2 2bea          or    r30,r26
0001b3 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001b4 940e 0178 	CALL __lcd_ready
0001b6 e0a2      	LDI  R26,LOW(2)
0001b7 940e 0193 	CALL __lcd_write_data
0001b9 940e 0178 	CALL __lcd_ready
0001bb e0ac      	LDI  R26,LOW(12)
0001bc 940e 0193 	CALL __lcd_write_data
0001be 940e 0178 	CALL __lcd_ready
0001c0 e0a1      	LDI  R26,LOW(1)
0001c1 940e 0193 	CALL __lcd_write_data
0001c3 e0e0      	LDI  R30,LOW(0)
0001c4 2e4e      	MOV  R4,R30
0001c5 2e5e      	MOV  R5,R30
0001c6 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
0001c7 27aa          clr   r26
0001c8 27bb          clr   r27
                 __long_delay0:
0001c9 9711          sbiw  r26,1         ;2 cycles
0001ca f7f1          brne  __long_delay0 ;2 cycles
0001cb 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
0001cc 93aa      	ST   -Y,R26
0001cd 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0001ce b3a4          in    r26,__lcd_direction
0001cf 6fa7          ori   r26,0xf7                ;set as output
0001d0 bba4          out   __lcd_direction,r26
0001d1 b3b5          in    r27,__lcd_port
0001d2 70bf          andi  r27,0xf
0001d3 81a8          ld    r26,y
0001d4 940e 0189 	CALL __lcd_write_nibble_G100
0001d6 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0001d7 c02b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001d8 93aa      	ST   -Y,R26
0001d9 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0001da 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
0001db 8078      	LDD  R7,Y+0
0001dc 81e8      	LD   R30,Y
0001dd 58e0      	SUBI R30,-LOW(128)
                +
0001de 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001e0 81e8      	LD   R30,Y
0001e1 54e0      	SUBI R30,-LOW(192)
                +
0001e2 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001e4 d041      	RCALL SUBOPT_0x5
0001e5 d040      	RCALL SUBOPT_0x5
0001e6 d03f      	RCALL SUBOPT_0x5
0001e7 dfdf      	RCALL __long_delay_G100
0001e8 e2a0      	LDI  R26,LOW(32)
0001e9 dfe2      	RCALL __lcd_init_write_G100
0001ea dfdc      	RCALL __long_delay_G100
0001eb e2a8      	LDI  R26,LOW(40)
0001ec d03d      	RCALL SUBOPT_0x6
0001ed e0a4      	LDI  R26,LOW(4)
0001ee d03b      	RCALL SUBOPT_0x6
0001ef e8a5      	LDI  R26,LOW(133)
0001f0 d039      	RCALL SUBOPT_0x6
0001f1 b3a4          in    r26,__lcd_direction
0001f2 70af          andi  r26,0xf                 ;set as input
0001f3 bba4          out   __lcd_direction,r26
0001f4 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0001f5 940e 01ab 	CALL _lcd_read_byte0_G100
0001f7 30e5      	CPI  R30,LOW(0x5)
0001f8 f011      	BREQ _0x200000B
0001f9 e0e0      	LDI  R30,LOW(0)
0001fa c008      	RJMP _0x2020001
                 _0x200000B:
0001fb 940e 0178 	CALL __lcd_ready
0001fd e0a6      	LDI  R26,LOW(6)
0001fe 940e 0193 	CALL __lcd_write_data
000200 940e 01b4 	CALL _lcd_clear
000202 e0e1      	LDI  R30,LOW(1)
                 _0x2020001:
000203 9621      	ADIW R28,1
000204 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000205 efef      	LDI  R30,LOW(255)
000206 e0f0      	LDI  R31,HIGH(255)
000207 93fa      	ST   -Y,R31
000208 93ea      	ST   -Y,R30
000209 e0e0      	LDI  R30,LOW(0)
00020a e0f0      	LDI  R31,HIGH(0)
00020b 93fa      	ST   -Y,R31
00020c 93ea      	ST   -Y,R30
00020d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1:
00020e e0e0      	LDI  R30,LOW(0)
00020f e0f0      	LDI  R31,HIGH(0)
000210 93fa      	ST   -Y,R31
000211 93ea      	ST   -Y,R30
000212 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x2:
000213 e0a0      	LDI  R26,LOW(0)
000214 e0b0      	LDI  R27,0
000215 940e 005c 	CALL _motor
000217 e5a8      	LDI  R26,LOW(7000)
000218 e1bb      	LDI  R27,HIGH(7000)
000219 940c 022e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00021b e0e1      	LDI  R30,LOW(65281)
00021c efff      	LDI  R31,HIGH(65281)
00021d 93fa      	ST   -Y,R31
00021e 93ea      	ST   -Y,R30
00021f cfee      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000220 940e 005c 	CALL _motor
000222 e5a8      	LDI  R26,LOW(7000)
000223 e1bb      	LDI  R27,HIGH(7000)
000224 940c 022e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000226 940e 01c7 	CALL __long_delay_G100
000228 e3a0      	LDI  R26,LOW(48)
000229 cfa2      	RJMP __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00022a 940e 0193 	CALL __lcd_write_data
00022c 940c 01c7 	JMP  __long_delay_G100
                 
                 
                 	.CSEG
                 _delay_ms:
00022e 9610      	adiw r26,0
00022f f039      	breq __delay_ms1
                 __delay_ms0:
                +
000230 ef8a     +LDI R24 , LOW ( 0xFA )
000231 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000232 9701     +SBIW R24 , 1
000233 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000234 95a8      	wdr
000235 9711      	sbiw r26,1
000236 f7c9      	brne __delay_ms0
                 __delay_ms1:
000237 9508      	ret
                 
                 __CPW02:
000238 2400      	CLR  R0
000239 160a      	CP   R0,R26
00023a 060b      	CPC  R0,R27
00023b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   7 r1 :   1 r2 :   0 r3 :   0 r4 :   1 r5 :   1 r6 :   0 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  74 r27:  39 r28:   3 r29:   1 r30: 142 r31:  41 
x  :   3 y  :  83 z  :   7 
Registers used: 17 out of 35 (48.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   3 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   3 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   8 brmi  :   0 brne  :   7 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  55 
cbi   :  14 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   9 cpi   :   9 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :   0 jmp   :  26 ld    :  11 ldd   :  39 ldi   :  90 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   3 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 
ori   :   2 out   :  52 pop   :   0 push  :   0 rcall :  17 ret   :  13 
reti  :   0 rjmp  :  12 rol   :   0 ror   :   0 sbc   :   0 sbci  :   2 
sbi   :  12 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  22 std   :  14 sts   :   2 sub   :   0 subi  :   6 swap  :   2 
tst   :   0 wdr   :   1 
Instructions used: 38 out of 116 (32.8%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000478   1134     10   1144   16384   7.0%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
