
AVRASM ver. 2.1.30  C:\Users\User\Desktop\Robotic\Footballist\Tests\Exam 3\Debug\List\exam 3.asm Mon Nov 27 12:22:01 2017

C:\Users\User\Desktop\Robotic\Footballist\Tests\Exam 3\Debug\List\exam 3.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\Exam 3\Debug\List\exam 3.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\Exam 3\Debug\List\exam 3.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x2000003:
00002a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00002b 0002      	.DW  0x02
00002c 0160      	.DW  __base_y_G100
00002d 0054      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00002e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000042 e5e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000043 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000044 9185      	LPM  R24,Z+
000045 9195      	LPM  R25,Z+
000046 9700      	SBIW R24,0
000047 f061      	BREQ __GLOBAL_INI_END
000048 91a5      	LPM  R26,Z+
000049 91b5      	LPM  R27,Z+
00004a 9005      	LPM  R0,Z+
00004b 9015      	LPM  R1,Z+
00004c 01bf      	MOVW R22,R30
00004d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004e 9005      	LPM  R0,Z+
00004f 920d      	ST   X+,R0
000050 9701      	SBIW R24,1
000051 f7e1      	BRNE __GLOBAL_INI_LOOP
000052 01fb      	MOVW R30,R22
000053 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000054 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000055 bfed      	OUT  SPL,R30
000056 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000057 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000058 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000059 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005a 940c 005c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;// I2C Bus functions
                 ;#include <i2c.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#asm
                     .equ __lcd_port = 0x15;PORTC
                 ; 0000 000B #endasm
                 ;#include <lcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0015 {
                 
                 	.CSEG
                 ; 0000 0016 ADMUX=adc_input | ADC_VREF_TYPE;
                 ;	adc_input -> Y+0
                 ; 0000 0017 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0018 delay_us(10);
                 ; 0000 0019 // Start the AD conversion
                 ; 0000 001A ADCSRA|=(1<<ADSC);
                 ; 0000 001B // Wait for the AD conversion to complete
                 ; 0000 001C while ((ADCSRA & (1<<ADIF))==0);
                 ; 0000 001D ADCSRA|=(1<<ADIF);
                 ; 0000 001E return ADCW;
                 ; 0000 001F }
                 ;
                 ;void main(void)
                 ; 0000 0022 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0023 // Declare your local variables here
                 ; 0000 0024 
                 ; 0000 0025 // Input/Output Ports initialization
                 ; 0000 0026 // Port A initialization
                 ; 0000 0027 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0028 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00005c e0e0      	LDI  R30,LOW(0)
00005d bbea      	OUT  0x1A,R30
                 ; 0000 0029 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00005e bbeb      	OUT  0x1B,R30
                 ; 0000 002B 
                 ; 0000 002C // Port B initialization
                 ; 0000 002D // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 002E DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00005f efe8      	LDI  R30,LOW(248)
000060 bbe7      	OUT  0x17,R30
                 ; 0000 002F // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 0030 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000061 e0e0      	LDI  R30,LOW(0)
000062 bbe8      	OUT  0x18,R30
                 ; 0000 0031 
                 ; 0000 0032 // Port C initialization
                 ; 0000 0033 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0034 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000063 bbe4      	OUT  0x14,R30
                 ; 0000 0035 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0036 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000064 bbe5      	OUT  0x15,R30
                 ; 0000 0037 
                 ; 0000 0038 // Port D initialization
                 ; 0000 0039 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 003A DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000065 efef      	LDI  R30,LOW(255)
000066 bbe1      	OUT  0x11,R30
                 ; 0000 003B // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 003C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000067 e0e0      	LDI  R30,LOW(0)
000068 bbe2      	OUT  0x12,R30
                 ; 0000 003D 
                 ; 0000 003E // Timer/Counter 0 initialization
                 ; 0000 003F // Clock source: System Clock
                 ; 0000 0040 // Clock value: 31.250 kHz
                 ; 0000 0041 // Mode: Fast PWM top=0xFF
                 ; 0000 0042 // OC0 output: Non-Inverted PWM
                 ; 0000 0043 // Timer Period: 8.192 ms
                 ; 0000 0044 // Output Pulse(s):
                 ; 0000 0045 // OC0 Period: 8.192 ms Width: 0 us
                 ; 0000 0046 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
000069 e6ec      	LDI  R30,LOW(108)
00006a bfe3      	OUT  0x33,R30
                 ; 0000 0047 TCNT0=0x00;
00006b e0e0      	LDI  R30,LOW(0)
00006c bfe2      	OUT  0x32,R30
                 ; 0000 0048 OCR0=0x00;
00006d bfec      	OUT  0x3C,R30
                 ; 0000 0049 
                 ; 0000 004A // Timer/Counter 1 initialization
                 ; 0000 004B // Clock source: System Clock
                 ; 0000 004C // Clock value: 31.250 kHz
                 ; 0000 004D // Mode: Fast PWM top=0x00FF
                 ; 0000 004E // OC1A output: Non-Inverted PWM
                 ; 0000 004F // OC1B output: Non-Inverted PWM
                 ; 0000 0050 // Noise Canceler: Off
                 ; 0000 0051 // Input Capture on Falling Edge
                 ; 0000 0052 // Timer Period: 8.192 ms
                 ; 0000 0053 // Output Pulse(s):
                 ; 0000 0054 // OC1A Period: 8.192 ms Width: 0 us// OC1B Period: 8.192 ms Width: 0 us
                 ; 0000 0055 // Timer1 Overflow Interrupt: Off
                 ; 0000 0056 // Input Capture Interrupt: Off
                 ; 0000 0057 // Compare A Match Interrupt: Off
                 ; 0000 0058 // Compare B Match Interrupt: Off
                 ; 0000 0059 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
00006e eae1      	LDI  R30,LOW(161)
00006f bdef      	OUT  0x2F,R30
                 ; 0000 005A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
000070 e0ec      	LDI  R30,LOW(12)
000071 bdee      	OUT  0x2E,R30
                 ; 0000 005B TCNT1H=0x00;
000072 e0e0      	LDI  R30,LOW(0)
000073 bded      	OUT  0x2D,R30
                 ; 0000 005C TCNT1L=0x00;
000074 bdec      	OUT  0x2C,R30
                 ; 0000 005D ICR1H=0x00;
000075 bde7      	OUT  0x27,R30
                 ; 0000 005E ICR1L=0x00;
000076 bde6      	OUT  0x26,R30
                 ; 0000 005F OCR1AH=0x00;
000077 bdeb      	OUT  0x2B,R30
                 ; 0000 0060 OCR1AL=0x00;
000078 bdea      	OUT  0x2A,R30
                 ; 0000 0061 OCR1BH=0x00;
000079 bde9      	OUT  0x29,R30
                 ; 0000 0062 OCR1BL=0x00;
00007a bde8      	OUT  0x28,R30
                 ; 0000 0063 
                 ; 0000 0064 // Timer/Counter 2 initialization
                 ; 0000 0065 // Clock source: System Clock
                 ; 0000 0066 // Clock value: 31.250 kHz
                 ; 0000 0067 // Mode: Fast PWM top=0xFF
                 ; 0000 0068 // OC2 output: Non-Inverted PWM
                 ; 0000 0069 // Timer Period: 8.192 ms
                 ; 0000 006A // Output Pulse(s):
                 ; 0000 006B // OC2 Period: 8.192 ms Width: 0 us
                 ; 0000 006C ASSR=0<<AS2;
00007b bde2      	OUT  0x22,R30
                 ; 0000 006D TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (1<<CS21) | (0<<CS20);
00007c e6ee      	LDI  R30,LOW(110)
00007d bde5      	OUT  0x25,R30
                 ; 0000 006E TCNT2=0x00;
00007e e0e0      	LDI  R30,LOW(0)
00007f bde4      	OUT  0x24,R30
                 ; 0000 006F OCR2=0x00;
000080 bde3      	OUT  0x23,R30
                 ; 0000 0070 
                 ; 0000 0071 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0072 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000081 bfe9      	OUT  0x39,R30
                 ; 0000 0073 
                 ; 0000 0074 // External Interrupt(s) initialization
                 ; 0000 0075 // INT0: Off
                 ; 0000 0076 // INT1: Off
                 ; 0000 0077 // INT2: Off
                 ; 0000 0078 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000082 bfe5      	OUT  0x35,R30
                 ; 0000 0079 MCUCSR=(0<<ISC2);
000083 bfe4      	OUT  0x34,R30
                 ; 0000 007A 
                 ; 0000 007B // USART initialization
                 ; 0000 007C // USART disabled
                 ; 0000 007D UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000084 b9ea      	OUT  0xA,R30
                 ; 0000 007E 
                 ; 0000 007F // Analog Comparator initialization
                 ; 0000 0080 // Analog Comparator: Off
                 ; 0000 0081 // The Analog Comparator's positive input is
                 ; 0000 0082 // connected to the AIN0 pin
                 ; 0000 0083 // The Analog Comparator's negative input is
                 ; 0000 0084 // connected to the AIN1 pin
                 ; 0000 0085 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000085 e8e0      	LDI  R30,LOW(128)
000086 b9e8      	OUT  0x8,R30
                 ; 0000 0086 
                 ; 0000 0087 // ADC initialization
                 ; 0000 0088 // ADC Clock frequency: 62.500 kHz
                 ; 0000 0089 // ADC Voltage Reference: AVCC pin
                 ; 0000 008A // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 008B ADMUX=ADC_VREF_TYPE;
000087 e4e0      	LDI  R30,LOW(64)
000088 b9e7      	OUT  0x7,R30
                 ; 0000 008C ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000089 e8e7      	LDI  R30,LOW(135)
00008a b9e6      	OUT  0x6,R30
                 ; 0000 008D SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00008b e0e0      	LDI  R30,LOW(0)
00008c bfe0      	OUT  0x30,R30
                 ; 0000 008E 
                 ; 0000 008F // SPI initialization
                 ; 0000 0090 // SPI disabled
                 ; 0000 0091 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00008d b9ed      	OUT  0xD,R30
                 ; 0000 0092 
                 ; 0000 0093 // TWI initialization
                 ; 0000 0094 // TWI disabled
                 ; 0000 0095 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00008e bfe6      	OUT  0x36,R30
                 ; 0000 0096 
                 ; 0000 0097 // Bit-Banged I2C Bus initialization
                 ; 0000 0098 // I2C Port: PORTB
                 ; 0000 0099 // I2C SDA bit: 1
                 ; 0000 009A // I2C SCL bit: 0
                 ; 0000 009B // Bit Rate: 100 kHz
                 ; 0000 009C // Note: I2C settings are specified in the
                 ; 0000 009D // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 009E i2c_init();
00008f 940e 012f 	CALL _i2c_init
                 ; 0000 009F 
                 ; 0000 00A0 // Alphanumeric LCD initialization
                 ; 0000 00A1 // Connections are specified in the
                 ; 0000 00A2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00A3 // RS - PORTC Bit 0
                 ; 0000 00A4 // RD - PORTC Bit 1
                 ; 0000 00A5 // EN - PORTC Bit 2
                 ; 0000 00A6 // D4 - PORTC Bit 4
                 ; 0000 00A7 // D5 - PORTC Bit 5
                 ; 0000 00A8 // D6 - PORTC Bit 6
                 ; 0000 00A9 // D7 - PORTC Bit 7
                 ; 0000 00AA // Characters/line: 16
                 ; 0000 00AB lcd_init(16);
000091 e1a0      	LDI  R26,LOW(16)
000092 940e 00fa 	CALL _lcd_init
                 ; 0000 00AC 
                 ; 0000 00AD while (1)
                 _0x6:
                 ; 0000 00AE       {
                 ; 0000 00AF       // Place your code here
                 ; 0000 00B0 
                 ; 0000 00B1       }
000094 cfff      	RJMP _0x6
                 ; 0000 00B2 }
                 _0x9:
000095 cfff      	RJMP _0x9
                 ; .FEND
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
000096 e0ff          ldi   r31,15
                 __lcd_delay0:
000097 95fa          dec   r31
000098 f7f1          brne  __lcd_delay0
000099 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
00009a b3a4          in    r26,__lcd_direction
00009b 70af          andi  r26,0xf                 ;set as input
00009c bba4          out   __lcd_direction,r26
00009d 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
00009e 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
00009f dff6      	RCALL __lcd_delay_G100
0000a0 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0000a1 dff4      	RCALL __lcd_delay_G100
0000a2 b3a3          in    r26,__lcd_pin
0000a3 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0000a4 dff1      	RCALL __lcd_delay_G100
0000a5 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0000a6 dfef      	RCALL __lcd_delay_G100
0000a7 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0000a8 fda7          sbrc  r26,__lcd_busy_flag
0000a9 cff5          rjmp  __lcd_busy
0000aa 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000ab 7fa0          andi  r26,0xf0
0000ac 2bab          or    r26,r27
0000ad bba5          out   __lcd_port,r26          ;write
0000ae 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0000af 940e 0096 	CALL __lcd_delay_G100
0000b1 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0000b2 940e 0096 	CALL __lcd_delay_G100
0000b4 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000b5 93aa      	ST   -Y,R26
0000b6 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0000b7 b3a4          in    r26,__lcd_direction
0000b8 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0000b9 bba4          out   __lcd_direction,r26
0000ba b3b5          in    r27,__lcd_port
0000bb 70bf          andi  r27,0xf
0000bc 81a8          ld    r26,y
0000bd dfed      	RCALL __lcd_write_nibble_G100
0000be 81a8          ld    r26,y
0000bf 95a2          swap  r26
0000c0 dfea      	RCALL __lcd_write_nibble_G100
0000c1 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0000c2 940c 0125 	JMP  _0x2020001
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
0000c4 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0000c5 940e 0096 	CALL __lcd_delay_G100
0000c7 b3e3          in    r30,__lcd_pin           ;read
0000c8 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0000c9 940e 0096 	CALL __lcd_delay_G100
0000cb 7fe0          andi  r30,0xf0
0000cc 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
0000cd 940e 0096 	CALL __lcd_delay_G100
0000cf dff4      	RCALL __lcd_read_nibble_G100
0000d0 2fae          mov   r26,r30
0000d1 dff2      	RCALL __lcd_read_nibble_G100
0000d2 98a9          cbi   __lcd_port,__lcd_rd     ;RD=0
0000d3 95e2          swap  r30
0000d4 2bea          or    r30,r26
0000d5 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0000d6 940e 009a 	CALL __lcd_ready
0000d8 e0a2      	LDI  R26,LOW(2)
0000d9 940e 00b5 	CALL __lcd_write_data
0000db 940e 009a 	CALL __lcd_ready
0000dd e0ac      	LDI  R26,LOW(12)
0000de 940e 00b5 	CALL __lcd_write_data
0000e0 940e 009a 	CALL __lcd_ready
0000e2 e0a1      	LDI  R26,LOW(1)
0000e3 940e 00b5 	CALL __lcd_write_data
0000e5 e0e0      	LDI  R30,LOW(0)
0000e6 2e4e      	MOV  R4,R30
0000e7 2e5e      	MOV  R5,R30
0000e8 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
0000e9 27aa          clr   r26
0000ea 27bb          clr   r27
                 __long_delay0:
0000eb 9711          sbiw  r26,1         ;2 cycles
0000ec f7f1          brne  __long_delay0 ;2 cycles
0000ed 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
0000ee 93aa      	ST   -Y,R26
0000ef 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0000f0 b3a4          in    r26,__lcd_direction
0000f1 6fa7          ori   r26,0xf7                ;set as output
0000f2 bba4          out   __lcd_direction,r26
0000f3 b3b5          in    r27,__lcd_port
0000f4 70bf          andi  r27,0xf
0000f5 81a8          ld    r26,y
0000f6 940e 00ab 	CALL __lcd_write_nibble_G100
0000f8 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0000f9 c02b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0000fa 93aa      	ST   -Y,R26
0000fb 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0000fc 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
0000fd 8078      	LDD  R7,Y+0
0000fe 81e8      	LD   R30,Y
0000ff 58e0      	SUBI R30,-LOW(128)
                +
000100 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000102 81e8      	LD   R30,Y
000103 54e0      	SUBI R30,-LOW(192)
                +
000104 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000106 d020      	RCALL SUBOPT_0x0
000107 d01f      	RCALL SUBOPT_0x0
000108 d01e      	RCALL SUBOPT_0x0
000109 dfdf      	RCALL __long_delay_G100
00010a e2a0      	LDI  R26,LOW(32)
00010b dfe2      	RCALL __lcd_init_write_G100
00010c dfdc      	RCALL __long_delay_G100
00010d e2a8      	LDI  R26,LOW(40)
00010e d01c      	RCALL SUBOPT_0x1
00010f e0a4      	LDI  R26,LOW(4)
000110 d01a      	RCALL SUBOPT_0x1
000111 e8a5      	LDI  R26,LOW(133)
000112 d018      	RCALL SUBOPT_0x1
000113 b3a4          in    r26,__lcd_direction
000114 70af          andi  r26,0xf                 ;set as input
000115 bba4          out   __lcd_direction,r26
000116 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000117 940e 00cd 	CALL _lcd_read_byte0_G100
000119 30e5      	CPI  R30,LOW(0x5)
00011a f011      	BREQ _0x200000B
00011b e0e0      	LDI  R30,LOW(0)
00011c c008      	RJMP _0x2020001
                 _0x200000B:
00011d 940e 009a 	CALL __lcd_ready
00011f e0a6      	LDI  R26,LOW(6)
000120 940e 00b5 	CALL __lcd_write_data
000122 940e 00d6 	CALL _lcd_clear
000124 e0e1      	LDI  R30,LOW(1)
                 _0x2020001:
000125 9621      	ADIW R28,1
000126 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000127 940e 00e9 	CALL __long_delay_G100
000129 e3a0      	LDI  R26,LOW(48)
00012a cfc3      	RJMP __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00012b 940e 00b5 	CALL __lcd_write_data
00012d 940c 00e9 	JMP  __long_delay_G100
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x18 ;PORTB
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
00012f 98c0      	cbi  __i2c_port,__scl_bit
000130 98c1      	cbi  __i2c_port,__sda_bit
000131 9ab8      	sbi  __i2c_dir,__scl_bit
000132 98b9      	cbi  __i2c_dir,__sda_bit
000133 c015      	rjmp __i2c_delay2
                 _i2c_start:
000134 98b9      	cbi  __i2c_dir,__sda_bit
000135 98b8      	cbi  __i2c_dir,__scl_bit
000136 27ee      	clr  r30
000137 0000      	nop
000138 9bb1      	sbis __i2c_pin,__sda_bit
000139 9508      	ret
00013a 9bb0      	sbis __i2c_pin,__scl_bit
00013b 9508      	ret
00013c d004      	rcall __i2c_delay1
00013d 9ab9      	sbi  __i2c_dir,__sda_bit
00013e d002      	rcall __i2c_delay1
00013f 9ab8      	sbi  __i2c_dir,__scl_bit
000140 e0e1      	ldi  r30,1
                 __i2c_delay1:
000141 e06d      	ldi  r22,13
000142 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000143 9ab9      	sbi  __i2c_dir,__sda_bit
000144 9ab8      	sbi  __i2c_dir,__scl_bit
000145 d003      	rcall __i2c_delay2
000146 98b8      	cbi  __i2c_dir,__scl_bit
000147 dff9      	rcall __i2c_delay1
000148 98b9      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000149 e16b      	ldi  r22,27
                 __i2c_delay2l:
00014a 956a      	dec  r22
00014b f7f1      	brne __i2c_delay2l
00014c 9508      	ret
                 _i2c_read:
00014d e078      	ldi  r23,8
                 __i2c_read0:
00014e 98b8      	cbi  __i2c_dir,__scl_bit
00014f dff1      	rcall __i2c_delay1
                 __i2c_read3:
000150 9bb0      	sbis __i2c_pin,__scl_bit
000151 cffe      	rjmp __i2c_read3
000152 dfee      	rcall __i2c_delay1
000153 9488      	clc
000154 99b1      	sbic __i2c_pin,__sda_bit
000155 9408      	sec
000156 9ab8      	sbi  __i2c_dir,__scl_bit
000157 dff1      	rcall __i2c_delay2
000158 1fee      	rol  r30
000159 957a      	dec  r23
00015a f799      	brne __i2c_read0
00015b 2f7a      	mov  r23,r26
00015c 2377      	tst  r23
00015d f411      	brne __i2c_read1
00015e 98b9      	cbi  __i2c_dir,__sda_bit
00015f c001      	rjmp __i2c_read2
                 __i2c_read1:
000160 9ab9      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
000161 dfdf      	rcall __i2c_delay1
000162 98b8      	cbi  __i2c_dir,__scl_bit
000163 dfe5      	rcall __i2c_delay2
000164 9ab8      	sbi  __i2c_dir,__scl_bit
000165 dfdb      	rcall __i2c_delay1
000166 98b9      	cbi  __i2c_dir,__sda_bit
000167 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
000168 e078      	ldi  r23,8
                 __i2c_write0:
000169 0faa      	lsl  r26
00016a f410      	brcc __i2c_write1
00016b 98b9      	cbi  __i2c_dir,__sda_bit
00016c c001      	rjmp __i2c_write2
                 __i2c_write1:
00016d 9ab9      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
00016e dfda      	rcall __i2c_delay2
00016f 98b8      	cbi  __i2c_dir,__scl_bit
000170 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
000171 9bb0      	sbis __i2c_pin,__scl_bit
000172 cffe      	rjmp __i2c_write3
000173 dfcd      	rcall __i2c_delay1
000174 9ab8      	sbi  __i2c_dir,__scl_bit
000175 957a      	dec  r23
000176 f791      	brne __i2c_write0
000177 98b9      	cbi  __i2c_dir,__sda_bit
000178 dfc8      	rcall __i2c_delay1
000179 98b8      	cbi  __i2c_dir,__scl_bit
00017a dfce      	rcall __i2c_delay2
00017b e0e1      	ldi  r30,1
00017c 99b1      	sbic __i2c_pin,__sda_bit
00017d 27ee      	clr  r30
00017e 9ab8      	sbi  __i2c_dir,__scl_bit
00017f cfc1      	rjmp __i2c_delay1
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   1 r5 :   1 r6 :   0 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   5 r23:   6 
r24:   7 r25:   2 r26:  43 r27:   8 r28:   2 r29:   1 r30:  87 r31:   5 
x  :   3 y  :   9 z  :   7 
Registers used: 18 out of 35 (51.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   1 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   9 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  20 
cbi   :  25 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   0 cpi   :   1 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :   0 jmp   :  24 ld    :   5 ldd   :   1 ldi   :  48 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   4 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   1 or    :   2 
ori   :   2 out   :  46 pop   :   0 push  :   0 rcall :  32 ret   :  11 
reti  :   0 rjmp  :  15 rol   :   1 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :  19 sbic  :   2 sbis  :   4 sbiw  :   4 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   6 std   :   0 sts   :   2 sub   :   0 subi  :   2 swap  :   2 
tst   :   1 wdr   :   0 
Instructions used: 40 out of 116 (34.5%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000300    758     10    768   16384   4.7%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
