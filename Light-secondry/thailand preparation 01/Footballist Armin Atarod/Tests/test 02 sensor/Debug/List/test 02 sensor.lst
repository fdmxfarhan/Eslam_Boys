
AVRASM ver. 2.1.30  C:\Users\User\Desktop\Robotic\Footballist\Tests\test 02 sensor\Debug\List\test 02 sensor.asm Fri Nov 17 11:48:19 2017

C:\Users\User\Desktop\Robotic\Footballist\Tests\test 02 sensor\Debug\List\test 02 sensor.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 02 sensor\Debug\List\test 02 sensor.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 02 sensor\Debug\List\test 02 sensor.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 02 sensor\Debug\List\test 02 sensor.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 02 sensor\Debug\List\test 02 sensor.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 02 sensor\Debug\List\test 02 sensor.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 02 sensor\Debug\List\test 02 sensor.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 02 sensor\Debug\List\test 02 sensor.asm(1095): warning: Register r10 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 02 sensor\Debug\List\test 02 sensor.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _I=R4
                 	.DEF _I_msb=R5
                 	.DEF _imin=R6
                 	.DEF _imin_msb=R7
                 	.DEF _min=R8
                 	.DEF _min_msb=R9
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0030 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 003a      	.DB  0x3A,0x0
                 _0x2000003:
00002b c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00002c 0002      	.DW  0x02
00002d 0160      	.DW  __base_y_G100
00002e 0056      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00002f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000030 94f8      	CLI
000031 27ee      	CLR  R30
000032 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000033 e0f1      	LDI  R31,1
000034 bffb      	OUT  GICR,R31
000035 bfeb      	OUT  GICR,R30
000036 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000037 e08d      	LDI  R24,(14-2)+1
000038 e0a2      	LDI  R26,2
000039 27bb      	CLR  R27
                 __CLEAR_REG:
00003a 93ed      	ST   X+,R30
00003b 958a      	DEC  R24
00003c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003e e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000040 93ed      	ST   X+,R30
000041 9701      	SBIW R24,1
000042 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000043 e5e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000044 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000045 9185      	LPM  R24,Z+
000046 9195      	LPM  R25,Z+
000047 9700      	SBIW R24,0
000048 f061      	BREQ __GLOBAL_INI_END
000049 91a5      	LPM  R26,Z+
00004a 91b5      	LPM  R27,Z+
00004b 9005      	LPM  R0,Z+
00004c 9015      	LPM  R1,Z+
00004d 01bf      	MOVW R22,R30
00004e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004f 9005      	LPM  R0,Z+
000050 920d      	ST   X+,R0
000051 9701      	SBIW R24,1
000052 f7e1      	BRNE __GLOBAL_INI_LOOP
000053 01fb      	MOVW R30,R22
000054 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000055 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000056 bfed      	OUT  SPL,R30
000057 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000058 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000059 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005a e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005b 940c 00ce 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;#asm
                     .equ __lcd_port = 0x15;PORTC
                 ; 0000 0007 #endasm
                 ;// Alphanumeric LCD functions
                 ;#include <lcd.h>
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0010 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0011 ADMUX=adc_input | ADC_VREF_TYPE;
00005d 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00005e 81e8      	LD   R30,Y
00005f 64e0      	ORI  R30,0x40
000060 b9e7      	OUT  0x7,R30
                 ; 0000 0012 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0013 delay_us(10);
                +
000061 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000062 958a     +DEC R24
000063 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0014 // Start the AD conversion
                 ; 0000 0015 ADCSRA|=(1<<ADSC);
000064 9a36      	SBI  0x6,6
                 ; 0000 0016 // Wait for the AD conversion to complete
                 ; 0000 0017 while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000065 9b34      	SBIS 0x6,4
000066 cffe      	RJMP _0x3
                 ; 0000 0018 ADCSRA|=(1<<ADIF);
000067 9a34      	SBI  0x6,4
                 ; 0000 0019 return ADCW;
000068 b1e4      	IN   R30,0x4
000069 b1f5      	IN   R31,0x4+1
00006a 940c 01d3 	JMP  _0x2020001
                 ; 0000 001A }
                 ; .FEND
                 ;
                 ;// Declare your global variables here
                 ;int I,imin;
                 ;int min;
                 ;void sensor()
                 ; 0000 0020 {
                 _sensor:
                 ; .FSTART _sensor
                 ; 0000 0021     min = 1023;
00006c efef      	LDI  R30,LOW(1023)
00006d e0f3      	LDI  R31,HIGH(1023)
00006e 014f      	MOVW R8,R30
                 ; 0000 0022     for(I=0 ; I<15 ; I++)
00006f 2444      	CLR  R4
000070 2455      	CLR  R5
                 _0x7:
000071 e0ef      	LDI  R30,LOW(15)
000072 e0f0      	LDI  R31,HIGH(15)
000073 164e      	CP   R4,R30
000074 065f      	CPC  R5,R31
000075 f594      	BRGE _0x8
                 ; 0000 0023     {
                 ; 0000 0024         PORTB.7 = (I/8)%2;
000076 01d2      	MOVW R26,R4
000077 e0e8      	LDI  R30,LOW(8)
000078 e0f0      	LDI  R31,HIGH(8)
000079 940e 01d5 	CALL SUBOPT_0x0
00007b f411      	BRNE _0x9
00007c 98c7      	CBI  0x18,7
00007d c001      	RJMP _0xA
                 _0x9:
00007e 9ac7      	SBI  0x18,7
                 _0xA:
                 ; 0000 0025         PORTB.6 = (I/4)%2;
00007f 01d2      	MOVW R26,R4
000080 e0e4      	LDI  R30,LOW(4)
000081 e0f0      	LDI  R31,HIGH(4)
000082 940e 01d5 	CALL SUBOPT_0x0
000084 f411      	BRNE _0xB
000085 98c6      	CBI  0x18,6
000086 c001      	RJMP _0xC
                 _0xB:
000087 9ac6      	SBI  0x18,6
                 _0xC:
                 ; 0000 0026         PORTB.5 = (I/2)%2;
000088 01d2      	MOVW R26,R4
000089 e0e2      	LDI  R30,LOW(2)
00008a e0f0      	LDI  R31,HIGH(2)
00008b 940e 01d5 	CALL SUBOPT_0x0
00008d f411      	BRNE _0xD
00008e 98c5      	CBI  0x18,5
00008f c001      	RJMP _0xE
                 _0xD:
000090 9ac5      	SBI  0x18,5
                 _0xE:
                 ; 0000 0027         PORTB.4 = (I/1)%2;
000091 01f2      	MOVW R30,R4
000092 e0a1      	LDI  R26,LOW(1)
000093 e0b0      	LDI  R27,HIGH(1)
000094 940e 0224 	CALL __MANDW12
000096 30e0      	CPI  R30,0
000097 f411      	BRNE _0xF
000098 98c4      	CBI  0x18,4
000099 c001      	RJMP _0x10
                 _0xF:
00009a 9ac4      	SBI  0x18,4
                 _0x10:
                 ; 0000 0028         if (read_adc(0) < min)
00009b e0a0      	LDI  R26,LOW(0)
00009c dfc0      	RCALL _read_adc
00009d 15e8      	CP   R30,R8
00009e 05f9      	CPC  R31,R9
00009f f420      	BRSH _0x11
                 ; 0000 0029         {
                 ; 0000 002A             min = read_adc(0);
0000a0 e0a0      	LDI  R26,LOW(0)
0000a1 dfbb      	RCALL _read_adc
0000a2 014f      	MOVW R8,R30
                 ; 0000 002B             imin = I;
0000a3 0132      	MOVW R6,R4
                 ; 0000 002C         }
                 ; 0000 002D     }
                 _0x11:
0000a4 01f2      	MOVW R30,R4
0000a5 9631      	ADIW R30,1
0000a6 012f      	MOVW R4,R30
0000a7 cfc9      	RJMP _0x7
                 _0x8:
                 ; 0000 002E     lcd_gotoxy(0,0);
0000a8 e0e0      	LDI  R30,LOW(0)
0000a9 93ea      	ST   -Y,R30
0000aa e0a0      	LDI  R26,LOW(0)
0000ab 940e 0147 	CALL _lcd_gotoxy
                 ; 0000 002F     lcd_putchar((imin/10)%10 + '0');
0000ad 01d3      	MOVW R26,R6
0000ae 940e 01dd 	CALL SUBOPT_0x1
                 ; 0000 0030     lcd_putchar((imin/1)%10 + '0');
0000b0 01d3      	MOVW R26,R6
0000b1 940e 01ea 	CALL SUBOPT_0x2
                 ; 0000 0031     lcd_putsf(":");
                +
0000b3 e5a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000b4 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000b5 940e 0184 	CALL _lcd_putsf
                 ; 0000 0032     lcd_putchar((min / 1000)%10 + '0');
0000b7 01d4      	MOVW R26,R8
0000b8 eee8      	LDI  R30,LOW(1000)
0000b9 e0f3      	LDI  R31,HIGH(1000)
0000ba 940e 0211 	CALL __DIVW21
0000bc 01df      	MOVW R26,R30
0000bd 940e 01ea 	CALL SUBOPT_0x2
                 ; 0000 0033     lcd_putchar((min / 100)%10 + '0');
0000bf 01d4      	MOVW R26,R8
0000c0 e6e4      	LDI  R30,LOW(100)
0000c1 e0f0      	LDI  R31,HIGH(100)
0000c2 940e 0211 	CALL __DIVW21
0000c4 01df      	MOVW R26,R30
0000c5 940e 01ea 	CALL SUBOPT_0x2
                 ; 0000 0034     lcd_putchar((min / 10)%10 + '0');
0000c7 01d4      	MOVW R26,R8
0000c8 940e 01dd 	CALL SUBOPT_0x1
                 ; 0000 0035     lcd_putchar((min / 1)%10 + '0');
0000ca 01d4      	MOVW R26,R8
0000cb 940e 01ea 	CALL SUBOPT_0x2
                 ; 0000 0036 }
0000cd 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0039 {
                 _main:
                 ; .FSTART _main
                 ; 0000 003A {
                 ; 0000 003B // Declare your local variables here
                 ; 0000 003C 
                 ; 0000 003D // Input/Output Ports initialization
                 ; 0000 003E // Port A initialization
                 ; 0000 003F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0040 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000ce e0e0      	LDI  R30,LOW(0)
0000cf bbea      	OUT  0x1A,R30
                 ; 0000 0041 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0042 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000d0 bbeb      	OUT  0x1B,R30
                 ; 0000 0043 
                 ; 0000 0044 // Port B initialization
                 ; 0000 0045 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0046 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000d1 efe8      	LDI  R30,LOW(248)
0000d2 bbe7      	OUT  0x17,R30
                 ; 0000 0047 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 0048 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000d3 e0e0      	LDI  R30,LOW(0)
0000d4 bbe8      	OUT  0x18,R30
                 ; 0000 0049 
                 ; 0000 004A // Port C initialization
                 ; 0000 004B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004C DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000d5 bbe4      	OUT  0x14,R30
                 ; 0000 004D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000d6 bbe5      	OUT  0x15,R30
                 ; 0000 004F 
                 ; 0000 0050 // Port D initialization
                 ; 0000 0051 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0052 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000d7 efef      	LDI  R30,LOW(255)
0000d8 bbe1      	OUT  0x11,R30
                 ; 0000 0053 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0054 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000d9 e0e0      	LDI  R30,LOW(0)
0000da bbe2      	OUT  0x12,R30
                 ; 0000 0055 
                 ; 0000 0056 // Timer/Counter 0 initialization
                 ; 0000 0057 // Clock source: System Clock
                 ; 0000 0058 // Clock value: 15.625 kHz
                 ; 0000 0059 // Mode: Fast PWM top=0xFF
                 ; 0000 005A // OC0 output: Non-Inverted PWM
                 ; 0000 005B // Timer Period: 16.384 ms
                 ; 0000 005C // Output Pulse(s):
                 ; 0000 005D // OC0 Period: 16.384 ms Width: 0 us
                 ; 0000 005E TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
0000db e6eb      	LDI  R30,LOW(107)
0000dc bfe3      	OUT  0x33,R30
                 ; 0000 005F TCNT0=0x00;
0000dd e0e0      	LDI  R30,LOW(0)
0000de bfe2      	OUT  0x32,R30
                 ; 0000 0060 OCR0=0x00;
0000df bfec      	OUT  0x3C,R30
                 ; 0000 0061 
                 ; 0000 0062 // Timer/Counter 1 initialization
                 ; 0000 0063 // Clock source: System Clock
                 ; 0000 0064 // Clock value: 15.625 kHz
                 ; 0000 0065 // Mode: Fast PWM top=0x00FF
                 ; 0000 0066 // OC1A output: Non-Inverted PWM
                 ; 0000 0067 // OC1B output: Non-Inverted PWM
                 ; 0000 0068 // Noise Canceler: Off
                 ; 0000 0069 // Input Capture on Falling Edge
                 ; 0000 006A // Timer Period: 16.384 ms
                 ; 0000 006B // Output Pulse(s):
                 ; 0000 006C // OC1A Period: 16.384 ms Width: 0 us// OC1B Period: 16.384 ms Width: 0 us
                 ; 0000 006D // Timer1 Overflow Interrupt: Off
                 ; 0000 006E // Input Capture Interrupt: Off
                 ; 0000 006F // Compare A Match Interrupt: Off
                 ; 0000 0070 // Compare B Match Interrupt: Off
                 ; 0000 0071 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
0000e0 eae1      	LDI  R30,LOW(161)
0000e1 bdef      	OUT  0x2F,R30
                 ; 0000 0072 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
0000e2 e0eb      	LDI  R30,LOW(11)
0000e3 bdee      	OUT  0x2E,R30
                 ; 0000 0073 TCNT1H=0x00;
0000e4 e0e0      	LDI  R30,LOW(0)
0000e5 bded      	OUT  0x2D,R30
                 ; 0000 0074 TCNT1L=0x00;
0000e6 bdec      	OUT  0x2C,R30
                 ; 0000 0075 ICR1H=0x00;
0000e7 bde7      	OUT  0x27,R30
                 ; 0000 0076 ICR1L=0x00;
0000e8 bde6      	OUT  0x26,R30
                 ; 0000 0077 OCR1AH=0x00;
0000e9 bdeb      	OUT  0x2B,R30
                 ; 0000 0078 OCR1AL=0x00;
0000ea bdea      	OUT  0x2A,R30
                 ; 0000 0079 OCR1BH=0x00;
0000eb bde9      	OUT  0x29,R30
                 ; 0000 007A OCR1BL=0x00;
0000ec bde8      	OUT  0x28,R30
                 ; 0000 007B 
                 ; 0000 007C // Timer/Counter 2 initialization
                 ; 0000 007D // Clock source: System Clock
                 ; 0000 007E // Clock value: 15.625 kHz
                 ; 0000 007F // Mode: Fast PWM top=0xFF
                 ; 0000 0080 // OC2 output: Non-Inverted PWM
                 ; 0000 0081 // Timer Period: 16.384 ms
                 ; 0000 0082 // Output Pulse(s):
                 ; 0000 0083 // OC2 Period: 16.384 ms Width: 0 us
                 ; 0000 0084 ASSR=0<<AS2;
0000ed bde2      	OUT  0x22,R30
                 ; 0000 0085 TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
0000ee e6ec      	LDI  R30,LOW(108)
0000ef bde5      	OUT  0x25,R30
                 ; 0000 0086 TCNT2=0x00;
0000f0 e0e0      	LDI  R30,LOW(0)
0000f1 bde4      	OUT  0x24,R30
                 ; 0000 0087 OCR2=0x00;
0000f2 bde3      	OUT  0x23,R30
                 ; 0000 0088 
                 ; 0000 0089 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 008A TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000f3 bfe9      	OUT  0x39,R30
                 ; 0000 008B 
                 ; 0000 008C // External Interrupt(s) initialization
                 ; 0000 008D // INT0: Off
                 ; 0000 008E // INT1: Off
                 ; 0000 008F // INT2: Off
                 ; 0000 0090 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000f4 bfe5      	OUT  0x35,R30
                 ; 0000 0091 MCUCSR=(0<<ISC2);
0000f5 bfe4      	OUT  0x34,R30
                 ; 0000 0092 
                 ; 0000 0093 // USART initialization
                 ; 0000 0094 // USART disabled
                 ; 0000 0095 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000f6 b9ea      	OUT  0xA,R30
                 ; 0000 0096 
                 ; 0000 0097 // Analog Comparator initialization
                 ; 0000 0098 // Analog Comparator: Off
                 ; 0000 0099 // The Analog Comparator's positive input is
                 ; 0000 009A // connected to the AIN0 pin
                 ; 0000 009B // The Analog Comparator's negative input is
                 ; 0000 009C // connected to the AIN1 pin
                 ; 0000 009D ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000f7 e8e0      	LDI  R30,LOW(128)
0000f8 b9e8      	OUT  0x8,R30
                 ; 0000 009E 
                 ; 0000 009F // ADC initialization
                 ; 0000 00A0 // ADC Clock frequency: 62.500 kHz
                 ; 0000 00A1 // ADC Voltage Reference: AVCC pin
                 ; 0000 00A2 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00A3 ADMUX=ADC_VREF_TYPE;
0000f9 e4e0      	LDI  R30,LOW(64)
0000fa b9e7      	OUT  0x7,R30
                 ; 0000 00A4 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000fb e8e4      	LDI  R30,LOW(132)
0000fc b9e6      	OUT  0x6,R30
                 ; 0000 00A5 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000fd e0e0      	LDI  R30,LOW(0)
0000fe bfe0      	OUT  0x30,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // SPI initialization
                 ; 0000 00A8 // SPI disabled
                 ; 0000 00A9 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000ff b9ed      	OUT  0xD,R30
                 ; 0000 00AA 
                 ; 0000 00AB // TWI initialization
                 ; 0000 00AC // TWI disabled
                 ; 0000 00AD TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000100 bfe6      	OUT  0x36,R30
                 ; 0000 00AE 
                 ; 0000 00AF // Alphanumeric LCD initialization
                 ; 0000 00B0 // Connections are specified in the
                 ; 0000 00B1 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00B2 // RS - PORTC Bit 0
                 ; 0000 00B3 // RD - PORTC Bit 1
                 ; 0000 00B4 // EN - PORTC Bit 2
                 ; 0000 00B5 // D4 - PORTC Bit 4
                 ; 0000 00B6 // D5 - PORTC Bit 5
                 ; 0000 00B7 // D6 - PORTC Bit 6
                 ; 0000 00B8 // D7 - PORTC Bit 7
                 ; 0000 00B9 // Characters/line: 16
                 ; 0000 00BA lcd_init(16);
000101 e1a0      	LDI  R26,LOW(16)
000102 940e 01a8 	CALL _lcd_init
                 ; 0000 00BB }
                 ; 0000 00BC while (1)
                 _0x12:
                 ; 0000 00BD       {
                 ; 0000 00BE       sensor();
000104 df67      	RCALL _sensor
                 ; 0000 00BF 
                 ; 0000 00C0       }
000105 cffe      	RJMP _0x12
                 ; 0000 00C1 }
                 _0x15:
000106 cfff      	RJMP _0x15
                 ; .FEND
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
000107 e0ff          ldi   r31,15
                 __lcd_delay0:
000108 95fa          dec   r31
000109 f7f1          brne  __lcd_delay0
00010a 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
00010b b3a4          in    r26,__lcd_direction
00010c 70af          andi  r26,0xf                 ;set as input
00010d bba4          out   __lcd_direction,r26
00010e 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
00010f 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000110 dff6      	RCALL __lcd_delay_G100
000111 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000112 dff4      	RCALL __lcd_delay_G100
000113 b3a3          in    r26,__lcd_pin
000114 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000115 dff1      	RCALL __lcd_delay_G100
000116 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000117 dfef      	RCALL __lcd_delay_G100
000118 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000119 fda7          sbrc  r26,__lcd_busy_flag
00011a cff5          rjmp  __lcd_busy
00011b 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00011c 7fa0          andi  r26,0xf0
00011d 2bab          or    r26,r27
00011e bba5          out   __lcd_port,r26          ;write
00011f 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000120 940e 0107 	CALL __lcd_delay_G100
000122 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000123 940e 0107 	CALL __lcd_delay_G100
000125 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000126 93aa      	ST   -Y,R26
000127 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000128 b3a4          in    r26,__lcd_direction
000129 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
00012a bba4          out   __lcd_direction,r26
00012b b3b5          in    r27,__lcd_port
00012c 70bf          andi  r27,0xf
00012d 81a8          ld    r26,y
00012e dfed      	RCALL __lcd_write_nibble_G100
00012f 81a8          ld    r26,y
000130 95a2          swap  r26
000131 dfea      	RCALL __lcd_write_nibble_G100
000132 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000133 940c 01d3 	JMP  _0x2020001
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
000135 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000136 940e 0107 	CALL __lcd_delay_G100
000138 b3e3          in    r30,__lcd_pin           ;read
000139 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
00013a 940e 0107 	CALL __lcd_delay_G100
00013c 7fe0          andi  r30,0xf0
00013d 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
00013e 940e 0107 	CALL __lcd_delay_G100
000140 dff4      	RCALL __lcd_read_nibble_G100
000141 2fae          mov   r26,r30
000142 dff2      	RCALL __lcd_read_nibble_G100
000143 98a9          cbi   __lcd_port,__lcd_rd     ;RD=0
000144 95e2          swap  r30
000145 2bea          or    r30,r26
000146 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000147 93aa      	ST   -Y,R26
000148 940e 010b 	CALL __lcd_ready
00014a 81e8      	LD   R30,Y
00014b e0f0      	LDI  R31,0
00014c 5ae0      	SUBI R30,LOW(-__base_y_G100)
00014d 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00014e 81e0      	LD   R30,Z
00014f 81a9      	LDD  R26,Y+1
000150 0fae      	ADD  R26,R30
000151 940e 0126 	CALL __lcd_write_data
000153 80b9      	LDD  R11,Y+1
000154 80a8      	LDD  R10,Y+0
000155 9622      	ADIW R28,2
000156 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000157 940e 010b 	CALL __lcd_ready
000159 e0a2      	LDI  R26,LOW(2)
00015a 940e 0126 	CALL __lcd_write_data
00015c 940e 010b 	CALL __lcd_ready
00015e e0ac      	LDI  R26,LOW(12)
00015f 940e 0126 	CALL __lcd_write_data
000161 940e 010b 	CALL __lcd_ready
000163 e0a1      	LDI  R26,LOW(1)
000164 940e 0126 	CALL __lcd_write_data
000166 e0e0      	LDI  R30,LOW(0)
000167 2eae      	MOV  R10,R30
000168 2ebe      	MOV  R11,R30
000169 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00016a 93aa      	ST   -Y,R26
00016b 93ef          push r30
00016c 93ff          push r31
00016d 81a8          ld   r26,y
00016e 9468          set
00016f 30aa          cpi  r26,10
000170 f019          breq __lcd_putchar1
000171 94e8          clt
000172 14bd      	CP   R11,R13
000173 f030      	BRLO _0x2000004
                 	__lcd_putchar1:
000174 94a3      	INC  R10
000175 e0e0      	LDI  R30,LOW(0)
000176 93ea      	ST   -Y,R30
000177 2daa      	MOV  R26,R10
000178 dfce      	RCALL _lcd_gotoxy
000179 f036      	brts __lcd_putchar0
                 _0x2000004:
00017a 94b3      	INC  R11
00017b df8f          rcall __lcd_ready
00017c 9aa8          sbi  __lcd_port,__lcd_rs ;RS=1
00017d 81a8      	LD   R26,Y
00017e 940e 0126 	CALL __lcd_write_data
                 __lcd_putchar0:
000180 91ff          pop  r31
000181 91ef          pop  r30
000182 940c 01d3 	JMP  _0x2020001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000184 93ba      	ST   -Y,R27
000185 93aa      	ST   -Y,R26
000186 931a      	ST   -Y,R17
                 _0x2000008:
000187 81e9      	LDD  R30,Y+1
000188 81fa      	LDD  R31,Y+1+1
000189 9631      	ADIW R30,1
00018a 83e9      	STD  Y+1,R30
00018b 83fa      	STD  Y+1+1,R31
00018c 9731      	SBIW R30,1
00018d 91e4      	LPM  R30,Z
00018e 2f1e      	MOV  R17,R30
00018f 30e0      	CPI  R30,0
000190 f019      	BREQ _0x200000A
000191 2fa1      	MOV  R26,R17
000192 dfd7      	RCALL _lcd_putchar
000193 cff3      	RJMP _0x2000008
                 _0x200000A:
000194 8118      	LDD  R17,Y+0
000195 9623      	ADIW R28,3
000196 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
000197 27aa          clr   r26
000198 27bb          clr   r27
                 __long_delay0:
000199 9711          sbiw  r26,1         ;2 cycles
00019a f7f1          brne  __long_delay0 ;2 cycles
00019b 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
00019c 93aa      	ST   -Y,R26
00019d 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00019e b3a4          in    r26,__lcd_direction
00019f 6fa7          ori   r26,0xf7                ;set as output
0001a0 bba4          out   __lcd_direction,r26
0001a1 b3b5          in    r27,__lcd_port
0001a2 70bf          andi  r27,0xf
0001a3 81a8          ld    r26,y
0001a4 940e 011c 	CALL __lcd_write_nibble_G100
0001a6 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0001a7 c02b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001a8 93aa      	ST   -Y,R26
0001a9 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0001aa 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
0001ab 80d8      	LDD  R13,Y+0
0001ac 81e8      	LD   R30,Y
0001ad 58e0      	SUBI R30,-LOW(128)
                +
0001ae 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001b0 81e8      	LD   R30,Y
0001b1 54e0      	SUBI R30,-LOW(192)
                +
0001b2 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001b4 d03d      	RCALL SUBOPT_0x3
0001b5 d03c      	RCALL SUBOPT_0x3
0001b6 d03b      	RCALL SUBOPT_0x3
0001b7 dfdf      	RCALL __long_delay_G100
0001b8 e2a0      	LDI  R26,LOW(32)
0001b9 dfe2      	RCALL __lcd_init_write_G100
0001ba dfdc      	RCALL __long_delay_G100
0001bb e2a8      	LDI  R26,LOW(40)
0001bc d039      	RCALL SUBOPT_0x4
0001bd e0a4      	LDI  R26,LOW(4)
0001be d037      	RCALL SUBOPT_0x4
0001bf e8a5      	LDI  R26,LOW(133)
0001c0 d035      	RCALL SUBOPT_0x4
0001c1 b3a4          in    r26,__lcd_direction
0001c2 70af          andi  r26,0xf                 ;set as input
0001c3 bba4          out   __lcd_direction,r26
0001c4 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0001c5 940e 013e 	CALL _lcd_read_byte0_G100
0001c7 30e5      	CPI  R30,LOW(0x5)
0001c8 f011      	BREQ _0x200000B
0001c9 e0e0      	LDI  R30,LOW(0)
0001ca c008      	RJMP _0x2020001
                 _0x200000B:
0001cb 940e 010b 	CALL __lcd_ready
0001cd e0a6      	LDI  R26,LOW(6)
0001ce 940e 0126 	CALL __lcd_write_data
0001d0 940e 0157 	CALL _lcd_clear
0001d2 e0e1      	LDI  R30,LOW(1)
                 _0x2020001:
0001d3 9621      	ADIW R28,1
0001d4 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
0001d5 940e 0211 	CALL __DIVW21
0001d7 e0a1      	LDI  R26,LOW(1)
0001d8 e0b0      	LDI  R27,HIGH(1)
0001d9 940e 0224 	CALL __MANDW12
0001db 30e0      	CPI  R30,0
0001dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
0001dd e0ea      	LDI  R30,LOW(10)
0001de e0f0      	LDI  R31,HIGH(10)
0001df 940e 0211 	CALL __DIVW21
0001e1 01df      	MOVW R26,R30
0001e2 e0ea      	LDI  R30,LOW(10)
0001e3 e0f0      	LDI  R31,HIGH(10)
0001e4 940e 0216 	CALL __MODW21
0001e6 5de0      	SUBI R30,-LOW(48)
0001e7 2fae      	MOV  R26,R30
0001e8 940c 016a 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2:
0001ea e0ea      	LDI  R30,LOW(10)
0001eb e0f0      	LDI  R31,HIGH(10)
0001ec 940e 0216 	CALL __MODW21
0001ee 5de0      	SUBI R30,-LOW(48)
0001ef 2fae      	MOV  R26,R30
0001f0 940c 016a 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0001f2 940e 0197 	CALL __long_delay_G100
0001f4 e3a0      	LDI  R26,LOW(48)
0001f5 cfa6      	RJMP __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0001f6 940e 0126 	CALL __lcd_write_data
0001f8 940c 0197 	JMP  __long_delay_G100
                 
                 
                 	.CSEG
                 __ANEGW1:
0001fa 95f1      	NEG  R31
0001fb 95e1      	NEG  R30
0001fc 40f0      	SBCI R31,0
0001fd 9508      	RET
                 
                 __DIVW21U:
0001fe 2400      	CLR  R0
0001ff 2411      	CLR  R1
000200 e190      	LDI  R25,16
                 __DIVW21U1:
000201 0faa      	LSL  R26
000202 1fbb      	ROL  R27
000203 1c00      	ROL  R0
000204 1c11      	ROL  R1
000205 1a0e      	SUB  R0,R30
000206 0a1f      	SBC  R1,R31
000207 f418      	BRCC __DIVW21U2
000208 0e0e      	ADD  R0,R30
000209 1e1f      	ADC  R1,R31
00020a c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00020b 60a1      	SBR  R26,1
                 __DIVW21U3:
00020c 959a      	DEC  R25
00020d f799      	BRNE __DIVW21U1
00020e 01fd      	MOVW R30,R26
00020f 01d0      	MOVW R26,R0
000210 9508      	RET
                 
                 __DIVW21:
000211 d01c      	RCALL __CHKSIGNW
000212 dfeb      	RCALL __DIVW21U
000213 f40e      	BRTC __DIVW211
000214 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000215 9508      	RET
                 
                 __MODW21:
000216 94e8      	CLT
000217 ffb7      	SBRS R27,7
000218 c004      	RJMP __MODW211
000219 95a0      	COM  R26
00021a 95b0      	COM  R27
00021b 9611      	ADIW R26,1
00021c 9468      	SET
                 __MODW211:
00021d fdf7      	SBRC R31,7
00021e dfdb      	RCALL __ANEGW1
00021f dfde      	RCALL __DIVW21U
000220 01fd      	MOVW R30,R26
000221 f40e      	BRTC __MODW212
000222 dfd7      	RCALL __ANEGW1
                 __MODW212:
000223 9508      	RET
                 
                 __MANDW12:
000224 94e8      	CLT
000225 fff7      	SBRS R31,7
000226 c002      	RJMP __MANDW121
000227 dfd2      	RCALL __ANEGW1
000228 9468      	SET
                 __MANDW121:
000229 23ea      	AND  R30,R26
00022a 23fb      	AND  R31,R27
00022b f40e      	BRTC __MANDW122
00022c dfcd      	RCALL __ANEGW1
                 __MANDW122:
00022d 9508      	RET
                 
                 __CHKSIGNW:
00022e 94e8      	CLT
00022f fff7      	SBRS R31,7
000230 c002      	RJMP __CHKSW1
000231 dfc8      	RCALL __ANEGW1
000232 9468      	SET
                 __CHKSW1:
000233 ffb7      	SBRS R27,7
000234 c006      	RJMP __CHKSW2
000235 95a0      	COM  R26
000236 95b0      	COM  R27
000237 9611      	ADIW R26,1
000238 f800      	BLD  R0,0
000239 9403      	INC  R0
00023a fa00      	BST  R0,0
                 __CHKSW2:
00023b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  12 r1 :   5 r2 :   0 r3 :   0 r4 :   9 r5 :   2 r6 :   3 r7 :   0 
r8 :   7 r9 :   1 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   4 r26:  82 r27:  18 r28:   4 r29:   1 r30: 136 r31:  32 
x  :   3 y  :  29 z  :   9 
Registers used: 23 out of 35 (65.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   7 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  11 brpl  :   0 brsh  :   1 brtc  :   3 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  41 
cbi   :  14 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   4 
cp    :   3 cpc   :   2 cpi   :   5 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  10 inc   :   3 jmp   :  28 ld    :  10 ldd   :   7 ldi   :  76 
lds   :   0 lpm   :   9 lsl   :   1 lsr   :   0 mov   :   8 movw  :  24 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   3 out   :  47 pop   :   2 push  :   2 rcall :  32 ret   :  18 
reti  :   0 rjmp  :  19 rol   :   3 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :  15 sbic  :   0 sbis  :   1 sbiw  :   5 sbr   :   1 sbrc  :   2 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  14 std   :   2 sts   :   2 sub   :   1 subi  :   5 swap  :   2 
tst   :   0 wdr   :   0 
Instructions used: 60 out of 116 (51.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000478   1132     12   1144   16384   7.0%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
