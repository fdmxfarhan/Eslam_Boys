
AVRASM ver. 2.1.30  C:\Users\User\Desktop\Robotic\Footballist\Tests\test 04 compass\Debug\List\test 04 compass.asm Mon Nov 27 10:31:51 2017

C:\Users\User\Desktop\Robotic\Footballist\Tests\test 04 compass\Debug\List\test 04 compass.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 04 compass\Debug\List\test 04 compass.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 04 compass\Debug\List\test 04 compass.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 04 compass\Debug\List\test 04 compass.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 04 compass\Debug\List\test 04 compass.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 04 compass\Debug\List\test 04 compass.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 04 compass\Debug\List\test 04 compass.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 04 compass\Debug\List\test 04 compass.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 04 compass\Debug\List\test 04 compass.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\User\Desktop\Robotic\Footballist\Tests\test 04 compass\Debug\List\test 04 compass.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _maxled=R6
                 	.DEF _maxled_msb=R7
                 	.DEF _lednumber=R8
                 	.DEF _lednumber_msb=R9
                 	.DEF _SL=R10
                 	.DEF _SL_msb=R11
                 	.DEF _SB=R12
                 	.DEF _SB_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0030 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 003a      	.DB  0x3A,0x0
                 _0x2000003:
00002b c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00002c 0002      	.DW  0x02
00002d 0166      	.DW  __base_y_G100
00002e 0056      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00002f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000030 94f8      	CLI
000031 27ee      	CLR  R30
000032 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000033 e0f1      	LDI  R31,1
000034 bffb      	OUT  GICR,R31
000035 bfeb      	OUT  GICR,R30
000036 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000037 e08d      	LDI  R24,(14-2)+1
000038 e0a2      	LDI  R26,2
000039 27bb      	CLR  R27
                 __CLEAR_REG:
00003a 93ed      	ST   X+,R30
00003b 958a      	DEC  R24
00003c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003e e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000040 93ed      	ST   X+,R30
000041 9701      	SBIW R24,1
000042 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000043 e5e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000044 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000045 9185      	LPM  R24,Z+
000046 9195      	LPM  R25,Z+
000047 9700      	SBIW R24,0
000048 f061      	BREQ __GLOBAL_INI_END
000049 91a5      	LPM  R26,Z+
00004a 91b5      	LPM  R27,Z+
00004b 9005      	LPM  R0,Z+
00004c 9015      	LPM  R1,Z+
00004d 01bf      	MOVW R22,R30
00004e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004f 9005      	LPM  R0,Z+
000050 920d      	ST   X+,R0
000051 9701      	SBIW R24,1
000052 f7e1      	BRNE __GLOBAL_INI_LOOP
000053 01fb      	MOVW R30,R22
000054 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000055 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000056 bfed      	OUT  SPL,R30
000057 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000058 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000059 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005a e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005b 940c 013b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;// I2C Bus functions
                 ;#include <i2c.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#asm
                     .equ __lcd_port = 0x15;PORTC
                 ; 0000 000B #endasm
                 ;
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;int i;
                 ;int maxled,lednumber;
                 ;int SL,SB,SR;
                 ;int v;
                 ;int cmp,c;
                 ;
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 001D {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 001E ADMUX=adc_input | ADC_VREF_TYPE;
00005d 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00005e 81e8      	LD   R30,Y
00005f 64e0      	ORI  R30,0x40
000060 b9e7      	OUT  0x7,R30
                 ; 0000 001F // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0020 delay_us(10);
                +
000061 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000062 958a     +DEC R24
000063 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0021 // Start the AD conversion
                 ; 0000 0022 ADCSRA|=(1<<ADSC);
000064 9a36      	SBI  0x6,6
                 ; 0000 0023 // Wait for the AD conversion to complete
                 ; 0000 0024 while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000065 9b34      	SBIS 0x6,4
000066 cffe      	RJMP _0x3
                 ; 0000 0025 ADCSRA|=(1<<ADIF);
000067 9a34      	SBI  0x6,4
                 ; 0000 0026 return ADCW;
000068 b1e4      	IN   R30,0x4
000069 b1f5      	IN   R31,0x4+1
00006a 940c 0217 	JMP  _0x2020001
                 ; 0000 0027 }
                 ; .FEND
                 ;
                 ;
                 ;#define EEPROM_BUS_ADDRESS 0xc0
                 ;/* read/ a byte from the EEPROM */
                 ;unsigned char compass_read(unsigned char address)
                 ; 0000 002D  {
                 _compass_read:
                 ; .FSTART _compass_read
                 ; 0000 002E     unsigned char data;
                 ; 0000 002F     delay_us(100);
00006c 93aa      	ST   -Y,R26
00006d 931a      	ST   -Y,R17
                 ;	address -> Y+1
                 ;	data -> R17
00006e d1aa      	RCALL SUBOPT_0x0
                 ; 0000 0030     i2c_start();
00006f 940e 0262 	CALL _i2c_start
                 ; 0000 0031     delay_us(100);
000071 d1a7      	RCALL SUBOPT_0x0
                 ; 0000 0032     i2c_write(EEPROM_BUS_ADDRESS);
000072 eca0      	LDI  R26,LOW(192)
000073 d1aa      	RCALL SUBOPT_0x1
                 ; 0000 0033     delay_us(100);
                 ; 0000 0034     i2c_write(address);
000074 81a9      	LDD  R26,Y+1
000075 d1a8      	RCALL SUBOPT_0x1
                 ; 0000 0035     delay_us(100);
                 ; 0000 0036     i2c_start();
000076 940e 0262 	CALL _i2c_start
                 ; 0000 0037     delay_us(100);
000078 d1a0      	RCALL SUBOPT_0x0
                 ; 0000 0038     i2c_write(EEPROM_BUS_ADDRESS | 1);
000079 eca1      	LDI  R26,LOW(193)
00007a d1a3      	RCALL SUBOPT_0x1
                 ; 0000 0039     delay_us(100);
                 ; 0000 003A     data=i2c_read(0);
00007b e0a0      	LDI  R26,LOW(0)
00007c 940e 027b 	CALL _i2c_read
00007e 2f1e      	MOV  R17,R30
                 ; 0000 003B     delay_us(100);
00007f d199      	RCALL SUBOPT_0x0
                 ; 0000 003C     i2c_stop();
000080 940e 0271 	CALL _i2c_stop
                 ; 0000 003D     delay_us(100);
000082 d196      	RCALL SUBOPT_0x0
                 ; 0000 003E     return data;
000083 2fe1      	MOV  R30,R17
000084 8118      	LDD  R17,Y+0
000085 c129      	RJMP _0x2020002
                 ; 0000 003F  }
                 ; .FEND
                 ;
                 ;void sensor()
                 ; 0000 0042 {
                 _sensor:
                 ; .FSTART _sensor
                 ; 0000 0043     maxled = 1023;
000086 efef      	LDI  R30,LOW(1023)
000087 e0f3      	LDI  R31,HIGH(1023)
000088 013f      	MOVW R6,R30
                 ; 0000 0044     for(i = 0 ; i<16 ; i++)
000089 2444      	CLR  R4
00008a 2455      	CLR  R5
                 _0x7:
00008b e1e0      	LDI  R30,LOW(16)
00008c e0f0      	LDI  R31,HIGH(16)
00008d 164e      	CP   R4,R30
00008e 065f      	CPC  R5,R31
00008f f57c      	BRGE _0x8
                 ; 0000 0045     {
                 ; 0000 0046         PORTB.7 = (i/8)%2;
000090 01d2      	MOVW R26,R4
000091 e0e8      	LDI  R30,LOW(8)
000092 e0f0      	LDI  R31,HIGH(8)
000093 d18d      	RCALL SUBOPT_0x2
000094 f411      	BRNE _0x9
000095 98c7      	CBI  0x18,7
000096 c001      	RJMP _0xA
                 _0x9:
000097 9ac7      	SBI  0x18,7
                 _0xA:
                 ; 0000 0047         PORTB.6 = (i/4)%2;
000098 01d2      	MOVW R26,R4
000099 e0e4      	LDI  R30,LOW(4)
00009a e0f0      	LDI  R31,HIGH(4)
00009b d185      	RCALL SUBOPT_0x2
00009c f411      	BRNE _0xB
00009d 98c6      	CBI  0x18,6
00009e c001      	RJMP _0xC
                 _0xB:
00009f 9ac6      	SBI  0x18,6
                 _0xC:
                 ; 0000 0048         PORTB.5 = (i/2)%2;
0000a0 01d2      	MOVW R26,R4
0000a1 e0e2      	LDI  R30,LOW(2)
0000a2 e0f0      	LDI  R31,HIGH(2)
0000a3 d17d      	RCALL SUBOPT_0x2
0000a4 f411      	BRNE _0xD
0000a5 98c5      	CBI  0x18,5
0000a6 c001      	RJMP _0xE
                 _0xD:
0000a7 9ac5      	SBI  0x18,5
                 _0xE:
                 ; 0000 0049         PORTB.4 = (i/1)%2;
0000a8 01f2      	MOVW R30,R4
0000a9 e0a1      	LDI  R26,LOW(1)
0000aa e0b0      	LDI  R27,HIGH(1)
0000ab 940e 02e2 	CALL __MANDW12
0000ad 30e0      	CPI  R30,0
0000ae f411      	BRNE _0xF
0000af 98c4      	CBI  0x18,4
0000b0 c001      	RJMP _0x10
                 _0xF:
0000b1 9ac4      	SBI  0x18,4
                 _0x10:
                 ; 0000 004A         if (read_adc(0) < maxled)
0000b2 e0a0      	LDI  R26,LOW(0)
0000b3 dfa9      	RCALL _read_adc
0000b4 15e6      	CP   R30,R6
0000b5 05f7      	CPC  R31,R7
0000b6 f420      	BRSH _0x11
                 ; 0000 004B         {
                 ; 0000 004C             lednumber = i;
0000b7 0142      	MOVW R8,R4
                 ; 0000 004D             maxled = read_adc(0);
0000b8 e0a0      	LDI  R26,LOW(0)
0000b9 dfa3      	RCALL _read_adc
0000ba 013f      	MOVW R6,R30
                 ; 0000 004E         }
                 ; 0000 004F     }
                 _0x11:
0000bb 01f2      	MOVW R30,R4
0000bc 9631      	ADIW R30,1
0000bd 012f      	MOVW R4,R30
0000be cfcc      	RJMP _0x7
                 _0x8:
                 ; 0000 0050 
                 ; 0000 0051     {
                 ; 0000 0052     {
                 ; 0000 0053     lcd_gotoxy(0,0);
0000bf e0e0      	LDI  R30,LOW(0)
0000c0 93ea      	ST   -Y,R30
0000c1 e0a0      	LDI  R26,LOW(0)
0000c2 d0dd      	RCALL _lcd_gotoxy
                 ; 0000 0054     lcd_putchar((lednumber/10)%10 + '0');
0000c3 01d4      	MOVW R26,R8
0000c4 d164      	RCALL SUBOPT_0x3
                 ; 0000 0055     lcd_putchar((lednumber/1)%10 + '0');
0000c5 01d4      	MOVW R26,R8
0000c6 d16e      	RCALL SUBOPT_0x4
                 ; 0000 0056     lcd_putsf(":");
                +
0000c7 e5a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000c8 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000c9 d113      	RCALL _lcd_putsf
                 ; 0000 0057     lcd_putchar((maxled/1000)%10 + '0');
0000ca 01d3      	MOVW R26,R6
0000cb eee8      	LDI  R30,LOW(1000)
0000cc e0f3      	LDI  R31,HIGH(1000)
0000cd d16e      	RCALL SUBOPT_0x5
                 ; 0000 0058     lcd_putchar((maxled/100)%10 + '0');
0000ce 01d3      	MOVW R26,R6
0000cf d170      	RCALL SUBOPT_0x6
                 ; 0000 0059     lcd_putchar((maxled/10)%10 + '0');
0000d0 01d3      	MOVW R26,R6
0000d1 d157      	RCALL SUBOPT_0x3
                 ; 0000 005A     lcd_putchar((maxled/1)%10 + '0');
0000d2 01d3      	MOVW R26,R6
0000d3 d161      	RCALL SUBOPT_0x4
                 ; 0000 005B     }
                 ; 0000 005C 
                 ; 0000 005D     {
                 ; 0000 005E     {
                 ; 0000 005F     SL = read_adc(3);
0000d4 e0a3      	LDI  R26,LOW(3)
0000d5 df87      	RCALL _read_adc
0000d6 015f      	MOVW R10,R30
                 ; 0000 0060     lcd_gotoxy(0,1);
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 d16a      	RCALL SUBOPT_0x7
                 ; 0000 0061     lcd_putchar('L');
0000d9 e4ac      	LDI  R26,LOW(76)
0000da d0e2      	RCALL _lcd_putchar
                 ; 0000 0062     lcd_putchar((SL/100)%10 + '0');
0000db 01d5      	MOVW R26,R10
0000dc d163      	RCALL SUBOPT_0x6
                 ; 0000 0063     lcd_putchar((SL/10)%10 + '0');
0000dd 01d5      	MOVW R26,R10
0000de d14a      	RCALL SUBOPT_0x3
                 ; 0000 0064     lcd_putchar((SL/1)%10 + '0');
0000df 01d5      	MOVW R26,R10
0000e0 d154      	RCALL SUBOPT_0x4
                 ; 0000 0065     }
                 ; 0000 0066 
                 ; 0000 0067     {
                 ; 0000 0068     SB = read_adc(1);
0000e1 e0a1      	LDI  R26,LOW(1)
0000e2 df7a      	RCALL _read_adc
0000e3 016f      	MOVW R12,R30
                 ; 0000 0069     lcd_gotoxy(5,1);
0000e4 e0e5      	LDI  R30,LOW(5)
0000e5 d15d      	RCALL SUBOPT_0x7
                 ; 0000 006A     lcd_putchar('B');
0000e6 e4a2      	LDI  R26,LOW(66)
0000e7 d0d5      	RCALL _lcd_putchar
                 ; 0000 006B     lcd_putchar((SB/100)%10 + '0');
0000e8 01d6      	MOVW R26,R12
0000e9 d156      	RCALL SUBOPT_0x6
                 ; 0000 006C     lcd_putchar((SB/10)%10 + '0');
0000ea 01d6      	MOVW R26,R12
0000eb d13d      	RCALL SUBOPT_0x3
                 ; 0000 006D     lcd_putchar((SB/1)%10 + '0');
0000ec 01d6      	MOVW R26,R12
0000ed d147      	RCALL SUBOPT_0x4
                 ; 0000 006E     }
                 ; 0000 006F 
                 ; 0000 0070     {
                 ; 0000 0071     SR = read_adc(2);
0000ee e0a2      	LDI  R26,LOW(2)
0000ef df6d      	RCALL _read_adc
0000f0 93e0 0160 	STS  _SR,R30
0000f2 93f0 0161 	STS  _SR+1,R31
                 ; 0000 0072     lcd_gotoxy(10,1);
0000f4 e0ea      	LDI  R30,LOW(10)
0000f5 d14d      	RCALL SUBOPT_0x7
                 ; 0000 0073     lcd_putchar('R');
0000f6 e5a2      	LDI  R26,LOW(82)
0000f7 d0c5      	RCALL _lcd_putchar
                 ; 0000 0074     lcd_putchar((SR/100)%10 + '0');
0000f8 d14d      	RCALL SUBOPT_0x8
0000f9 d146      	RCALL SUBOPT_0x6
                 ; 0000 0075     lcd_putchar((SR/10)%10 + '0');
0000fa d14b      	RCALL SUBOPT_0x8
0000fb d12d      	RCALL SUBOPT_0x3
                 ; 0000 0076     lcd_putchar((SR/1)%10 + '0');
0000fc d149      	RCALL SUBOPT_0x8
0000fd d137      	RCALL SUBOPT_0x4
                 ; 0000 0077     }
                 ; 0000 0078     }
                 ; 0000 0079 
                 ; 0000 007A     {
                 ; 0000 007B     cmp = compass_read(1) - c;
0000fe e0a1      	LDI  R26,LOW(1)
0000ff df6c      	RCALL _compass_read
000100 e0f0      	LDI  R31,0
000101 91a0 0164 	LDS  R26,_c
000103 91b0 0165 	LDS  R27,_c+1
000105 1bea      	SUB  R30,R26
000106 0bfb      	SBC  R31,R27
000107 93e0 0162 	STS  _cmp,R30
000109 93f0 0163 	STS  _cmp+1,R31
                 ; 0000 007C     if (cmp > 128) cmp -= 255;
00010b d13f      	RCALL SUBOPT_0x9
00010c 38a1      	CPI  R26,LOW(0x81)
00010d e0e0      	LDI  R30,HIGH(0x81)
00010e 07be      	CPC  R27,R30
00010f f024      	BRLT _0x12
000110 d13f      	RCALL SUBOPT_0xA
000111 5fef      	SUBI R30,LOW(255)
000112 40f0      	SBCI R31,HIGH(255)
000113 c008      	RJMP _0x1B
                 ; 0000 007D     else if (cmp < -128) cmp += 255;
                 _0x12:
000114 d136      	RCALL SUBOPT_0x9
000115 38a0      	CPI  R26,LOW(0xFF80)
000116 efef      	LDI  R30,HIGH(0xFF80)
000117 07be      	CPC  R27,R30
000118 f43c      	BRGE _0x14
000119 d136      	RCALL SUBOPT_0xA
00011a 50e1      	SUBI R30,LOW(-255)
00011b 4fff      	SBCI R31,HIGH(-255)
                 _0x1B:
00011c 93e0 0162 	STS  _cmp,R30
00011e 93f0 0163 	STS  _cmp+1,R31
                 ; 0000 007E     lcd_gotoxy(8,0);
                 _0x14:
000120 e0e8      	LDI  R30,LOW(8)
000121 93ea      	ST   -Y,R30
000122 e0a0      	LDI  R26,LOW(0)
000123 d07c      	RCALL _lcd_gotoxy
                 ; 0000 007F     if (cmp >= 0)
000124 91a0 0163 	LDS  R26,_cmp+1
000126 23aa      	TST  R26
000127 f01a      	BRMI _0x15
                 ; 0000 0080     {
                 ; 0000 0081         lcd_putchar('+');
000128 e2ab      	LDI  R26,LOW(43)
000129 d093      	RCALL _lcd_putchar
                 ; 0000 0082     }
                 ; 0000 0083     else
00012a c009      	RJMP _0x16
                 _0x15:
                 ; 0000 0084     {
                 ; 0000 0085         lcd_putchar('-');
00012b e2ad      	LDI  R26,LOW(45)
00012c d090      	RCALL _lcd_putchar
                 ; 0000 0086         cmp = -cmp;
00012d d122      	RCALL SUBOPT_0xA
00012e 940e 02b8 	CALL __ANEGW1
000130 93e0 0162 	STS  _cmp,R30
000132 93f0 0163 	STS  _cmp+1,R31
                 ; 0000 0087     }
                 _0x16:
                 ; 0000 0088     lcd_putchar((cmp/100)%10 + '0');
000134 d116      	RCALL SUBOPT_0x9
000135 d10a      	RCALL SUBOPT_0x6
                 ; 0000 0089     lcd_putchar((cmp/10)%10 + '0');
000136 d114      	RCALL SUBOPT_0x9
000137 d0f1      	RCALL SUBOPT_0x3
                 ; 0000 008A     lcd_putchar((cmp/1)%10 + '0');
000138 d112      	RCALL SUBOPT_0x9
000139 d0fb      	RCALL SUBOPT_0x4
                 ; 0000 008B 
                 ; 0000 008C     }
                 ; 0000 008D     }
                 ; 0000 008E 
                 ; 0000 008F }
00013a 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0092 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0093 {
                 ; 0000 0094 // Declare your local variables here
                 ; 0000 0095 
                 ; 0000 0096 // Input/Output Ports initialization
                 ; 0000 0097 // Port A initialization
                 ; 0000 0098 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0099 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00013b e0e0      	LDI  R30,LOW(0)
00013c bbea      	OUT  0x1A,R30
                 ; 0000 009A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 009B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00013d bbeb      	OUT  0x1B,R30
                 ; 0000 009C 
                 ; 0000 009D // Port B initialization
                 ; 0000 009E // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 009F DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00013e efe8      	LDI  R30,LOW(248)
00013f bbe7      	OUT  0x17,R30
                 ; 0000 00A0 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 00A1 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000140 e0e0      	LDI  R30,LOW(0)
000141 bbe8      	OUT  0x18,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // Port C initialization
                 ; 0000 00A4 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00A5 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000142 bbe4      	OUT  0x14,R30
                 ; 0000 00A6 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00A7 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000143 bbe5      	OUT  0x15,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // Port D initialization
                 ; 0000 00AA // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00AB DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000144 efef      	LDI  R30,LOW(255)
000145 bbe1      	OUT  0x11,R30
                 ; 0000 00AC // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 00AD PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000146 e0e0      	LDI  R30,LOW(0)
000147 bbe2      	OUT  0x12,R30
                 ; 0000 00AE 
                 ; 0000 00AF // Timer/Counter 0 initialization
                 ; 0000 00B0 // Clock source: System Clock
                 ; 0000 00B1 // Clock value: 31.250 kHz
                 ; 0000 00B2 // Mode: Fast PWM top=0xFF
                 ; 0000 00B3 // OC0 output: Non-Inverted PWM
                 ; 0000 00B4 // Timer Period: 8.192 ms
                 ; 0000 00B5 // Output Pulse(s):
                 ; 0000 00B6 // OC0 Period: 8.192 ms Width: 0 us
                 ; 0000 00B7 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
000148 e6ec      	LDI  R30,LOW(108)
000149 bfe3      	OUT  0x33,R30
                 ; 0000 00B8 TCNT0=0x00;
00014a e0e0      	LDI  R30,LOW(0)
00014b bfe2      	OUT  0x32,R30
                 ; 0000 00B9 OCR0=0x00;
00014c bfec      	OUT  0x3C,R30
                 ; 0000 00BA 
                 ; 0000 00BB // Timer/Counter 1 initialization
                 ; 0000 00BC // Clock source: System Clock
                 ; 0000 00BD // Clock value: 31.250 kHz
                 ; 0000 00BE // Mode: Fast PWM top=0x00FF
                 ; 0000 00BF // OC1A output: Non-Inverted PWM
                 ; 0000 00C0 // OC1B output: Non-Inverted PWM
                 ; 0000 00C1 // Noise Canceler: Off
                 ; 0000 00C2 // Input Capture on Falling Edge
                 ; 0000 00C3 // Timer Period: 8.192 ms
                 ; 0000 00C4 // Output Pulse(s):
                 ; 0000 00C5 // OC1A Period: 8.192 ms Width: 0 us// OC1B Period: 8.192 ms Width: 0 us
                 ; 0000 00C6 // Timer1 Overflow Interrupt: Off
                 ; 0000 00C7 // Input Capture Interrupt: Off
                 ; 0000 00C8 // Compare A Match Interrupt: Off
                 ; 0000 00C9 // Compare B Match Interrupt: Off
                 ; 0000 00CA TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
00014d eae1      	LDI  R30,LOW(161)
00014e bdef      	OUT  0x2F,R30
                 ; 0000 00CB TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
00014f e0ec      	LDI  R30,LOW(12)
000150 bdee      	OUT  0x2E,R30
                 ; 0000 00CC TCNT1H=0x00;
000151 e0e0      	LDI  R30,LOW(0)
000152 bded      	OUT  0x2D,R30
                 ; 0000 00CD TCNT1L=0x00;
000153 bdec      	OUT  0x2C,R30
                 ; 0000 00CE ICR1H=0x00;
000154 bde7      	OUT  0x27,R30
                 ; 0000 00CF ICR1L=0x00;
000155 bde6      	OUT  0x26,R30
                 ; 0000 00D0 OCR1AH=0x00;
000156 bdeb      	OUT  0x2B,R30
                 ; 0000 00D1 OCR1AL=0x00;
000157 bdea      	OUT  0x2A,R30
                 ; 0000 00D2 OCR1BH=0x00;
000158 bde9      	OUT  0x29,R30
                 ; 0000 00D3 OCR1BL=0x00;
000159 bde8      	OUT  0x28,R30
                 ; 0000 00D4 
                 ; 0000 00D5 // Timer/Counter 2 initialization
                 ; 0000 00D6 // Clock source: System Clock
                 ; 0000 00D7 // Clock value: 31.250 kHz
                 ; 0000 00D8 // Mode: Fast PWM top=0xFF
                 ; 0000 00D9 // OC2 output: Non-Inverted PWM
                 ; 0000 00DA // Timer Period: 8.192 ms
                 ; 0000 00DB // Output Pulse(s):
                 ; 0000 00DC // OC2 Period: 8.192 ms Width: 0 us
                 ; 0000 00DD ASSR=0<<AS2;
00015a bde2      	OUT  0x22,R30
                 ; 0000 00DE TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (1<<CS21) | (0<<CS20);
00015b e6ee      	LDI  R30,LOW(110)
00015c bde5      	OUT  0x25,R30
                 ; 0000 00DF TCNT2=0x00;
00015d e0e0      	LDI  R30,LOW(0)
00015e bde4      	OUT  0x24,R30
                 ; 0000 00E0 OCR2=0x00;
00015f bde3      	OUT  0x23,R30
                 ; 0000 00E1 
                 ; 0000 00E2 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00E3 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000160 bfe9      	OUT  0x39,R30
                 ; 0000 00E4 
                 ; 0000 00E5 // External Interrupt(s) initialization
                 ; 0000 00E6 // INT0: Off
                 ; 0000 00E7 // INT1: Off
                 ; 0000 00E8 // INT2: Off
                 ; 0000 00E9 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000161 bfe5      	OUT  0x35,R30
                 ; 0000 00EA MCUCSR=(0<<ISC2);
000162 bfe4      	OUT  0x34,R30
                 ; 0000 00EB 
                 ; 0000 00EC // USART initialization
                 ; 0000 00ED // USART disabled
                 ; 0000 00EE UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000163 b9ea      	OUT  0xA,R30
                 ; 0000 00EF 
                 ; 0000 00F0 // Analog Comparator initialization
                 ; 0000 00F1 // Analog Comparator: Off
                 ; 0000 00F2 // The Analog Comparator's positive input is
                 ; 0000 00F3 // connected to the AIN0 pin
                 ; 0000 00F4 // The Analog Comparator's negative input is
                 ; 0000 00F5 // connected to the AIN1 pin
                 ; 0000 00F6 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000164 e8e0      	LDI  R30,LOW(128)
000165 b9e8      	OUT  0x8,R30
                 ; 0000 00F7 
                 ; 0000 00F8 // ADC initialization
                 ; 0000 00F9 // ADC Clock frequency: 62.500 kHz
                 ; 0000 00FA // ADC Voltage Reference: AVCC pin
                 ; 0000 00FB // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00FC ADMUX=ADC_VREF_TYPE;
000166 e4e0      	LDI  R30,LOW(64)
000167 b9e7      	OUT  0x7,R30
                 ; 0000 00FD ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000168 e8e7      	LDI  R30,LOW(135)
000169 b9e6      	OUT  0x6,R30
                 ; 0000 00FE SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00016a e0e0      	LDI  R30,LOW(0)
00016b bfe0      	OUT  0x30,R30
                 ; 0000 00FF 
                 ; 0000 0100 // SPI initialization
                 ; 0000 0101 // SPI disabled
                 ; 0000 0102 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00016c b9ed      	OUT  0xD,R30
                 ; 0000 0103 
                 ; 0000 0104 // TWI initialization
                 ; 0000 0105 // TWI disabled
                 ; 0000 0106 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00016d bfe6      	OUT  0x36,R30
                 ; 0000 0107 
                 ; 0000 0108 // Bit-Banged I2C Bus initialization
                 ; 0000 0109 // I2C Port: PORTB
                 ; 0000 010A // I2C SDA bit: 1
                 ; 0000 010B // I2C SCL bit: 0
                 ; 0000 010C // Bit Rate: 100 kHz
                 ; 0000 010D // Note: I2C settings are specified in the
                 ; 0000 010E // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 010F i2c_init();
00016e 940e 025d 	CALL _i2c_init
                 ; 0000 0110 
                 ; 0000 0111 // Alphanumeric LCD initialization
                 ; 0000 0112 // Connections are specified in the
                 ; 0000 0113 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0114 // RS - PORTC Bit 0
                 ; 0000 0115 // RD - PORTC Bit 1
                 ; 0000 0116 // EN - PORTC Bit 2
                 ; 0000 0117 // D4 - PORTC Bit 4
                 ; 0000 0118 // D5 - PORTC Bit 5
                 ; 0000 0119 // D6 - PORTC Bit 6
                 ; 0000 011A // D7 - PORTC Bit 7
                 ; 0000 011B // Characters/line: 16
                 ; 0000 011C lcd_init(16);
000170 e1a0      	LDI  R26,LOW(16)
000171 d07e      	RCALL _lcd_init
                 ; 0000 011D }
                 ; 0000 011E 
                 ; 0000 011F c = compass_read(1);
000172 e0a1      	LDI  R26,LOW(1)
000173 def8      	RCALL _compass_read
000174 e0f0      	LDI  R31,0
000175 93e0 0164 	STS  _c,R30
000177 93f0 0165 	STS  _c+1,R31
                 ; 0000 0120 
                 ; 0000 0121 delay_ms(3000);
000179 eba8      	LDI  R26,LOW(3000)
00017a e0bb      	LDI  R27,HIGH(3000)
00017b 940e 02ae 	CALL _delay_ms
                 ; 0000 0122 
                 ; 0000 0123 while (1)
                 _0x17:
                 ; 0000 0124       {
                 ; 0000 0125             sensor();
00017d df08      	RCALL _sensor
                 ; 0000 0126 
                 ; 0000 0127       }
00017e cffe      	RJMP _0x17
                 ; 0000 0128 }
                 _0x1A:
00017f cfff      	RJMP _0x1A
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000180 93aa      	ST   -Y,R26
000181 b3e5      	IN   R30,0x15
000182 70ef      	ANDI R30,LOW(0xF)
000183 2fae      	MOV  R26,R30
000184 81e8      	LD   R30,Y
000185 7fe0      	ANDI R30,LOW(0xF0)
000186 2bea      	OR   R30,R26
000187 bbe5      	OUT  0x15,R30
                +
000188 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000189 958a     +DEC R24
00018a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00018b 9aaa      	SBI  0x15,2
                +
00018c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00018d 958a     +DEC R24
00018e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00018f 98aa      	CBI  0x15,2
                +
000190 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000191 958a     +DEC R24
000192 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000193 c083      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000194 93aa      	ST   -Y,R26
000195 81a8      	LD   R26,Y
000196 dfe9      	RCALL __lcd_write_nibble_G100
000197 81e8          ld    r30,y
000198 95e2          swap  r30
000199 83e8          st    y,r30
00019a 81a8      	LD   R26,Y
00019b dfe4      	RCALL __lcd_write_nibble_G100
                +
00019c e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00019d 958a     +DEC R24
00019e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00019f c077      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001a0 93aa      	ST   -Y,R26
0001a1 81e8      	LD   R30,Y
0001a2 e0f0      	LDI  R31,0
0001a3 59ea      	SUBI R30,LOW(-__base_y_G100)
0001a4 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0001a5 81e0      	LD   R30,Z
0001a6 81a9      	LDD  R26,Y+1
0001a7 0fae      	ADD  R26,R30
0001a8 dfeb      	RCALL __lcd_write_data
0001a9 81e9      	LDD  R30,Y+1
0001aa 93e0 016a 	STS  __lcd_x,R30
0001ac 81e8      	LD   R30,Y
0001ad 93e0 016b 	STS  __lcd_y,R30
                 _0x2020002:
0001af 9622      	ADIW R28,2
0001b0 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001b1 e0a2      	LDI  R26,LOW(2)
0001b2 d0a2      	RCALL SUBOPT_0xB
0001b3 e0ac      	LDI  R26,LOW(12)
0001b4 dfdf      	RCALL __lcd_write_data
0001b5 e0a1      	LDI  R26,LOW(1)
0001b6 d09e      	RCALL SUBOPT_0xB
0001b7 e0e0      	LDI  R30,LOW(0)
0001b8 93e0 016b 	STS  __lcd_y,R30
0001ba 93e0 016a 	STS  __lcd_x,R30
0001bc 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001bd 93aa      	ST   -Y,R26
0001be 81a8      	LD   R26,Y
0001bf 30aa      	CPI  R26,LOW(0xA)
0001c0 f031      	BREQ _0x2000005
0001c1 91e0 016c 	LDS  R30,__lcd_maxx
0001c3 91a0 016a 	LDS  R26,__lcd_x
0001c5 17ae      	CP   R26,R30
0001c6 f060      	BRLO _0x2000004
                 _0x2000005:
0001c7 e0e0      	LDI  R30,LOW(0)
0001c8 93ea      	ST   -Y,R30
0001c9 91a0 016b 	LDS  R26,__lcd_y
0001cb 5faf      	SUBI R26,-LOW(1)
0001cc 93a0 016b 	STS  __lcd_y,R26
0001ce dfd1      	RCALL _lcd_gotoxy
0001cf 81a8      	LD   R26,Y
0001d0 30aa      	CPI  R26,LOW(0xA)
0001d1 f409      	BRNE _0x2000007
0001d2 c044      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
0001d3 91e0 016a 	LDS  R30,__lcd_x
0001d5 5fef      	SUBI R30,-LOW(1)
0001d6 93e0 016a 	STS  __lcd_x,R30
0001d8 9aa8      	SBI  0x15,0
0001d9 81a8      	LD   R26,Y
0001da dfb9      	RCALL __lcd_write_data
0001db 98a8      	CBI  0x15,0
0001dc c03a      	RJMP _0x2020001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0001dd 93ba      	ST   -Y,R27
0001de 93aa      	ST   -Y,R26
0001df 931a      	ST   -Y,R17
                 _0x200000B:
0001e0 81e9      	LDD  R30,Y+1
0001e1 81fa      	LDD  R31,Y+1+1
0001e2 9631      	ADIW R30,1
0001e3 83e9      	STD  Y+1,R30
0001e4 83fa      	STD  Y+1+1,R31
0001e5 9731      	SBIW R30,1
0001e6 91e4      	LPM  R30,Z
0001e7 2f1e      	MOV  R17,R30
0001e8 30e0      	CPI  R30,0
0001e9 f019      	BREQ _0x200000D
0001ea 2fa1      	MOV  R26,R17
0001eb dfd1      	RCALL _lcd_putchar
0001ec cff3      	RJMP _0x200000B
                 _0x200000D:
0001ed 8118      	LDD  R17,Y+0
0001ee 9623      	ADIW R28,3
0001ef 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001f0 93aa      	ST   -Y,R26
0001f1 b3e4      	IN   R30,0x14
0001f2 6fe0      	ORI  R30,LOW(0xF0)
0001f3 bbe4      	OUT  0x14,R30
0001f4 9aa2      	SBI  0x14,2
0001f5 9aa0      	SBI  0x14,0
0001f6 9aa1      	SBI  0x14,1
0001f7 98aa      	CBI  0x15,2
0001f8 98a8      	CBI  0x15,0
0001f9 98a9      	CBI  0x15,1
0001fa 81e8      	LD   R30,Y
0001fb 93e0 016c 	STS  __lcd_maxx,R30
0001fd 58e0      	SUBI R30,-LOW(128)
                +
0001fe 93e0 0168+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000200 81e8      	LD   R30,Y
000201 54e0      	SUBI R30,-LOW(192)
                +
000202 93e0 0169+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000204 e1a4      	LDI  R26,LOW(20)
000205 e0b0      	LDI  R27,0
000206 940e 02ae 	CALL _delay_ms
000208 d051      	RCALL SUBOPT_0xC
000209 d050      	RCALL SUBOPT_0xC
00020a d04f      	RCALL SUBOPT_0xC
00020b e2a0      	LDI  R26,LOW(32)
00020c df73      	RCALL __lcd_write_nibble_G100
00020d d00b      	RCALL SUBOPT_0x0
00020e e2a8      	LDI  R26,LOW(40)
00020f df84      	RCALL __lcd_write_data
000210 e0a4      	LDI  R26,LOW(4)
000211 df82      	RCALL __lcd_write_data
000212 e8a5      	LDI  R26,LOW(133)
000213 df80      	RCALL __lcd_write_data
000214 e0a6      	LDI  R26,LOW(6)
000215 df7e      	RCALL __lcd_write_data
000216 df9a      	RCALL _lcd_clear
                 _0x2020001:
000217 9621      	ADIW R28,1
000218 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _SR:
000160           	.BYTE 0x2
                 _cmp:
000162           	.BYTE 0x2
                 _c:
000164           	.BYTE 0x2
                 __base_y_G100:
000166           	.BYTE 0x4
                 __lcd_x:
00016a           	.BYTE 0x1
                 __lcd_y:
00016b           	.BYTE 0x1
                 __lcd_maxx:
00016c           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x0:
                +
000219 ec88     +LDI R24 , LOW ( 200 )
00021a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00021b 9701     +SBIW R24 , 1
00021c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00021d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00021e 940e 0296 	CALL _i2c_write
000220 cff8      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
000221 940e 02cf 	CALL __DIVW21
000223 e0a1      	LDI  R26,LOW(1)
000224 e0b0      	LDI  R27,HIGH(1)
000225 940e 02e2 	CALL __MANDW12
000227 30e0      	CPI  R30,0
000228 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:52 WORDS
                 SUBOPT_0x3:
000229 e0ea      	LDI  R30,LOW(10)
00022a e0f0      	LDI  R31,HIGH(10)
00022b 940e 02cf 	CALL __DIVW21
00022d 01df      	MOVW R26,R30
00022e e0ea      	LDI  R30,LOW(10)
00022f e0f0      	LDI  R31,HIGH(10)
000230 940e 02d4 	CALL __MODW21
000232 5de0      	SUBI R30,-LOW(48)
000233 2fae      	MOV  R26,R30
000234 cf88      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:63 WORDS
                 SUBOPT_0x4:
000235 e0ea      	LDI  R30,LOW(10)
000236 e0f0      	LDI  R31,HIGH(10)
000237 940e 02d4 	CALL __MODW21
000239 5de0      	SUBI R30,-LOW(48)
00023a 2fae      	MOV  R26,R30
00023b cf81      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x5:
00023c 940e 02cf 	CALL __DIVW21
00023e 01df      	MOVW R26,R30
00023f cff5      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
000240 e6e4      	LDI  R30,LOW(100)
000241 e0f0      	LDI  R31,HIGH(100)
000242 cff9      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000243 93ea      	ST   -Y,R30
000244 e0a1      	LDI  R26,LOW(1)
000245 cf5a      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000246 91a0 0160 	LDS  R26,_SR
000248 91b0 0161 	LDS  R27,_SR+1
00024a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
00024b 91a0 0162 	LDS  R26,_cmp
00024d 91b0 0163 	LDS  R27,_cmp+1
00024f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000250 91e0 0162 	LDS  R30,_cmp
000252 91f0 0163 	LDS  R31,_cmp+1
000254 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000255 df3e      	RCALL __lcd_write_data
000256 e0a3      	LDI  R26,LOW(3)
000257 e0b0      	LDI  R27,0
000258 940c 02ae 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
00025a e3a0      	LDI  R26,LOW(48)
00025b df24      	RCALL __lcd_write_nibble_G100
00025c cfbc      	RJMP SUBOPT_0x0
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x18 ;PORTB
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
00025d 98c0      	cbi  __i2c_port,__scl_bit
00025e 98c1      	cbi  __i2c_port,__sda_bit
00025f 9ab8      	sbi  __i2c_dir,__scl_bit
000260 98b9      	cbi  __i2c_dir,__sda_bit
000261 c015      	rjmp __i2c_delay2
                 _i2c_start:
000262 98b9      	cbi  __i2c_dir,__sda_bit
000263 98b8      	cbi  __i2c_dir,__scl_bit
000264 27ee      	clr  r30
000265 0000      	nop
000266 9bb1      	sbis __i2c_pin,__sda_bit
000267 9508      	ret
000268 9bb0      	sbis __i2c_pin,__scl_bit
000269 9508      	ret
00026a d004      	rcall __i2c_delay1
00026b 9ab9      	sbi  __i2c_dir,__sda_bit
00026c d002      	rcall __i2c_delay1
00026d 9ab8      	sbi  __i2c_dir,__scl_bit
00026e e0e1      	ldi  r30,1
                 __i2c_delay1:
00026f e06d      	ldi  r22,13
000270 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000271 9ab9      	sbi  __i2c_dir,__sda_bit
000272 9ab8      	sbi  __i2c_dir,__scl_bit
000273 d003      	rcall __i2c_delay2
000274 98b8      	cbi  __i2c_dir,__scl_bit
000275 dff9      	rcall __i2c_delay1
000276 98b9      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000277 e16b      	ldi  r22,27
                 __i2c_delay2l:
000278 956a      	dec  r22
000279 f7f1      	brne __i2c_delay2l
00027a 9508      	ret
                 _i2c_read:
00027b e078      	ldi  r23,8
                 __i2c_read0:
00027c 98b8      	cbi  __i2c_dir,__scl_bit
00027d dff1      	rcall __i2c_delay1
                 __i2c_read3:
00027e 9bb0      	sbis __i2c_pin,__scl_bit
00027f cffe      	rjmp __i2c_read3
000280 dfee      	rcall __i2c_delay1
000281 9488      	clc
000282 99b1      	sbic __i2c_pin,__sda_bit
000283 9408      	sec
000284 9ab8      	sbi  __i2c_dir,__scl_bit
000285 dff1      	rcall __i2c_delay2
000286 1fee      	rol  r30
000287 957a      	dec  r23
000288 f799      	brne __i2c_read0
000289 2f7a      	mov  r23,r26
00028a 2377      	tst  r23
00028b f411      	brne __i2c_read1
00028c 98b9      	cbi  __i2c_dir,__sda_bit
00028d c001      	rjmp __i2c_read2
                 __i2c_read1:
00028e 9ab9      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
00028f dfdf      	rcall __i2c_delay1
000290 98b8      	cbi  __i2c_dir,__scl_bit
000291 dfe5      	rcall __i2c_delay2
000292 9ab8      	sbi  __i2c_dir,__scl_bit
000293 dfdb      	rcall __i2c_delay1
000294 98b9      	cbi  __i2c_dir,__sda_bit
000295 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
000296 e078      	ldi  r23,8
                 __i2c_write0:
000297 0faa      	lsl  r26
000298 f410      	brcc __i2c_write1
000299 98b9      	cbi  __i2c_dir,__sda_bit
00029a c001      	rjmp __i2c_write2
                 __i2c_write1:
00029b 9ab9      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
00029c dfda      	rcall __i2c_delay2
00029d 98b8      	cbi  __i2c_dir,__scl_bit
00029e dfd0      	rcall __i2c_delay1
                 __i2c_write3:
00029f 9bb0      	sbis __i2c_pin,__scl_bit
0002a0 cffe      	rjmp __i2c_write3
0002a1 dfcd      	rcall __i2c_delay1
0002a2 9ab8      	sbi  __i2c_dir,__scl_bit
0002a3 957a      	dec  r23
0002a4 f791      	brne __i2c_write0
0002a5 98b9      	cbi  __i2c_dir,__sda_bit
0002a6 dfc8      	rcall __i2c_delay1
0002a7 98b8      	cbi  __i2c_dir,__scl_bit
0002a8 dfce      	rcall __i2c_delay2
0002a9 e0e1      	ldi  r30,1
0002aa 99b1      	sbic __i2c_pin,__sda_bit
0002ab 27ee      	clr  r30
0002ac 9ab8      	sbi  __i2c_dir,__scl_bit
0002ad cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
0002ae 9610      	adiw r26,0
0002af f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002b0 ed80     +LDI R24 , LOW ( 0x7D0 )
0002b1 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002b2 9701     +SBIW R24 , 1
0002b3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002b4 95a8      	wdr
0002b5 9711      	sbiw r26,1
0002b6 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002b7 9508      	ret
                 
                 __ANEGW1:
0002b8 95f1      	NEG  R31
0002b9 95e1      	NEG  R30
0002ba 40f0      	SBCI R31,0
0002bb 9508      	RET
                 
                 __DIVW21U:
0002bc 2400      	CLR  R0
0002bd 2411      	CLR  R1
0002be e190      	LDI  R25,16
                 __DIVW21U1:
0002bf 0faa      	LSL  R26
0002c0 1fbb      	ROL  R27
0002c1 1c00      	ROL  R0
0002c2 1c11      	ROL  R1
0002c3 1a0e      	SUB  R0,R30
0002c4 0a1f      	SBC  R1,R31
0002c5 f418      	BRCC __DIVW21U2
0002c6 0e0e      	ADD  R0,R30
0002c7 1e1f      	ADC  R1,R31
0002c8 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002c9 60a1      	SBR  R26,1
                 __DIVW21U3:
0002ca 959a      	DEC  R25
0002cb f799      	BRNE __DIVW21U1
0002cc 01fd      	MOVW R30,R26
0002cd 01d0      	MOVW R26,R0
0002ce 9508      	RET
                 
                 __DIVW21:
0002cf d01c      	RCALL __CHKSIGNW
0002d0 dfeb      	RCALL __DIVW21U
0002d1 f40e      	BRTC __DIVW211
0002d2 dfe5      	RCALL __ANEGW1
                 __DIVW211:
0002d3 9508      	RET
                 
                 __MODW21:
0002d4 94e8      	CLT
0002d5 ffb7      	SBRS R27,7
0002d6 c004      	RJMP __MODW211
0002d7 95a0      	COM  R26
0002d8 95b0      	COM  R27
0002d9 9611      	ADIW R26,1
0002da 9468      	SET
                 __MODW211:
0002db fdf7      	SBRC R31,7
0002dc dfdb      	RCALL __ANEGW1
0002dd dfde      	RCALL __DIVW21U
0002de 01fd      	MOVW R30,R26
0002df f40e      	BRTC __MODW212
0002e0 dfd7      	RCALL __ANEGW1
                 __MODW212:
0002e1 9508      	RET
                 
                 __MANDW12:
0002e2 94e8      	CLT
0002e3 fff7      	SBRS R31,7
0002e4 c002      	RJMP __MANDW121
0002e5 dfd2      	RCALL __ANEGW1
0002e6 9468      	SET
                 __MANDW121:
0002e7 23ea      	AND  R30,R26
0002e8 23fb      	AND  R31,R27
0002e9 f40e      	BRTC __MANDW122
0002ea dfcd      	RCALL __ANEGW1
                 __MANDW122:
0002eb 9508      	RET
                 
                 __CHKSIGNW:
0002ec 94e8      	CLT
0002ed fff7      	SBRS R31,7
0002ee c002      	RJMP __CHKSW1
0002ef dfc8      	RCALL __ANEGW1
0002f0 9468      	SET
                 __CHKSW1:
0002f1 ffb7      	SBRS R27,7
0002f2 c006      	RJMP __CHKSW2
0002f3 95a0      	COM  R26
0002f4 95b0      	COM  R27
0002f5 9611      	ADIW R26,1
0002f6 f800      	BLD  R0,0
0002f7 9403      	INC  R0
0002f8 fa00      	BST  R0,0
                 __CHKSW2:
0002f9 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  12 r1 :   5 r2 :   0 r3 :   0 r4 :   9 r5 :   2 r6 :   7 r7 :   1 
r8 :   3 r9 :   0 r10:   4 r11:   0 r12:   4 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   8 r18:   0 r19:   0 r20:   0 r21:   0 r22:   5 r23:   6 
r24:  21 r25:   6 r26: 104 r27:  21 r28:   4 r29:   1 r30: 176 r31:  39 
x  :   3 y  :  37 z  :   9 
Registers used: 23 out of 35 (65.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   8 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   4 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   1 brmi  :   1 brne  :  21 brpl  :   0 brsh  :   1 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  16 
cbi   :  24 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 
cp    :   3 cpc   :   4 cpi   :   7 cpse  :   0 dec   :  10 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   1 jmp   :  24 ld    :  13 ldd   :   7 ldi   : 116 
lds   :  13 lpm   :   9 lsl   :   2 lsr   :   0 mov   :   8 movw  :  31 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   1 or    :   1 
ori   :   2 out   :  44 pop   :   0 push  :   0 rcall : 105 ret   :  20 
reti  :   0 rjmp  :  37 rol   :   4 ror   :   0 sbc   :   2 sbci  :   4 
sbi   :  22 sbic  :   2 sbis  :   5 sbiw  :   7 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  19 std   :   2 sts   :  19 sub   :   2 subi  :   9 swap  :   1 
tst   :   2 wdr   :   1 
Instructions used: 66 out of 116 (56.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005f4   1512     12   1524   16384   9.3%
[.dseg] 0x000060 0x00016d      0     13     13    1024   1.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
