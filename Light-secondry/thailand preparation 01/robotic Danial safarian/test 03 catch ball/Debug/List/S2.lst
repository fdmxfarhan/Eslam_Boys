
AVRASM ver. 2.1.30  C:\Users\danial sara\Desktop\robotic A\test 03 catch ball\Debug\List\S2.asm Mon Nov 27 09:11:29 2017

C:\Users\danial sara\Desktop\robotic A\test 03 catch ball\Debug\List\S2.asm(1095): warning: Register r4 already defined by the .DEF directive
C:\Users\danial sara\Desktop\robotic A\test 03 catch ball\Debug\List\S2.asm(1096): warning: Register r5 already defined by the .DEF directive
C:\Users\danial sara\Desktop\robotic A\test 03 catch ball\Debug\List\S2.asm(1097): warning: Register r6 already defined by the .DEF directive
C:\Users\danial sara\Desktop\robotic A\test 03 catch ball\Debug\List\S2.asm(1098): warning: Register r7 already defined by the .DEF directive
C:\Users\danial sara\Desktop\robotic A\test 03 catch ball\Debug\List\S2.asm(1099): warning: Register r8 already defined by the .DEF directive
C:\Users\danial sara\Desktop\robotic A\test 03 catch ball\Debug\List\S2.asm(1100): warning: Register r9 already defined by the .DEF directive
C:\Users\danial sara\Desktop\robotic A\test 03 catch ball\Debug\List\S2.asm(1101): warning: Register r10 already defined by the .DEF directive
C:\Users\danial sara\Desktop\robotic A\test 03 catch ball\Debug\List\S2.asm(1102): warning: Register r11 already defined by the .DEF directive
C:\Users\danial sara\Desktop\robotic A\test 03 catch ball\Debug\List\S2.asm(1103): warning: Register r12 already defined by the .DEF directive
C:\Users\danial sara\Desktop\robotic A\test 03 catch ball\Debug\List\S2.asm(1104): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.31 Evaluation
                 ;(C) Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _sh=R4
                 	.DEF _sh_msb=R5
                 	.DEF _imin=R6
                 	.DEF _imin_msb=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _min=R10
                 	.DEF _min_msb=R11
                 	.DEF _v=R12
                 	.DEF _v_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 00ff      	.DB  0xFF,0x0
                 
                 _0x2000003:
000034 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000035 0002      	.DW  0x02
000036 000c      	.DW  0x0C
000037 0066      	.DW  __REG_VARS*2
                 
000038 0002      	.DW  0x02
000039 0160      	.DW  __base_y_G100
00003a 0068      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 0108 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#asm
                  .equ __lcd_port=0x15;PORTC
                 ; 0000 0008 #endasm
                 ;
                 ;#include <lcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0013 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0014 ADMUX=adc_input | ADC_VREF_TYPE;
000069 931a      	ST   -Y,R17
00006a 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
00006b 2fe1      	MOV  R30,R17
00006c b9e7      	OUT  0x7,R30
                 ; 0000 0015 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0016 delay_us(10);
                +
00006d e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00006e 958a     +DEC R24
00006f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0017 // Start the AD conversion
                 ; 0000 0018 ADCSRA|=(1<<ADSC);
000070 9a36      	SBI  0x6,6
                 ; 0000 0019 // Wait for the AD conversion to complete
                 ; 0000 001A while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000071 9b34      	SBIS 0x6,4
000072 cffe      	RJMP _0x3
                 ; 0000 001B ADCSRA|=(1<<ADIF);
000073 9a34      	SBI  0x6,4
                 ; 0000 001C return ADCW;
000074 b1e4      	IN   R30,0x4
000075 b1f5      	IN   R31,0x4+1
000076 9119      	LD   R17,Y+
000077 9508      	RET
                 ; 0000 001D }
                 ; .FEND
                 ;int sh;
                 ;int imin;
                 ;int i;
                 ;int min;
                 ;int v=255;
                 ;void sensor()
                 ; 0000 0024     {
                 _sensor:
                 ; .FSTART _sensor
                 ; 0000 0025     min=1023;
000078 efef      	LDI  R30,LOW(1023)
000079 e0f3      	LDI  R31,HIGH(1023)
00007a 015f      	MOVW R10,R30
                 ; 0000 0026     for(i=0 ; i<16 ; i++)
00007b 2488      	CLR  R8
00007c 2499      	CLR  R9
                 _0x7:
00007d e1e0      	LDI  R30,LOW(16)
00007e e0f0      	LDI  R31,HIGH(16)
00007f 168e      	CP   R8,R30
000080 069f      	CPC  R9,R31
000081 f574      	BRGE _0x8
                 ; 0000 0027         {
                 ; 0000 0028         PORTB.7=(i/8)%2;
000082 01d4      	MOVW R26,R8
000083 e0e8      	LDI  R30,LOW(8)
000084 e0f0      	LDI  R31,HIGH(8)
000085 d24f      	RCALL SUBOPT_0x0
000086 f411      	BRNE _0x9
000087 98c7      	CBI  0x18,7
000088 c001      	RJMP _0xA
                 _0x9:
000089 9ac7      	SBI  0x18,7
                 _0xA:
                 ; 0000 0029         PORTB.6=(i/4)%2;
00008a 01d4      	MOVW R26,R8
00008b e0e4      	LDI  R30,LOW(4)
00008c e0f0      	LDI  R31,HIGH(4)
00008d d247      	RCALL SUBOPT_0x0
00008e f411      	BRNE _0xB
00008f 98c6      	CBI  0x18,6
000090 c001      	RJMP _0xC
                 _0xB:
000091 9ac6      	SBI  0x18,6
                 _0xC:
                 ; 0000 002A         PORTB.5=(i/2)%2;
000092 01d4      	MOVW R26,R8
000093 e0e2      	LDI  R30,LOW(2)
000094 e0f0      	LDI  R31,HIGH(2)
000095 d23f      	RCALL SUBOPT_0x0
000096 f411      	BRNE _0xD
000097 98c5      	CBI  0x18,5
000098 c001      	RJMP _0xE
                 _0xD:
000099 9ac5      	SBI  0x18,5
                 _0xE:
                 ; 0000 002B         PORTB.4=(i/1)%2;
00009a 01f4      	MOVW R30,R8
00009b e0a1      	LDI  R26,LOW(1)
00009c e0b0      	LDI  R27,HIGH(1)
00009d d2cf      	RCALL __MANDW12
00009e 30e0      	CPI  R30,0
00009f f411      	BRNE _0xF
0000a0 98c4      	CBI  0x18,4
0000a1 c001      	RJMP _0x10
                 _0xF:
0000a2 9ac4      	SBI  0x18,4
                 _0x10:
                 ; 0000 002C         if(read_adc(0)<min)
0000a3 e0a0      	LDI  R26,LOW(0)
0000a4 dfc4      	RCALL _read_adc
0000a5 15ea      	CP   R30,R10
0000a6 05fb      	CPC  R31,R11
0000a7 f420      	BRSH _0x11
                 ; 0000 002D             {
                 ; 0000 002E             min=read_adc(0);
0000a8 e0a0      	LDI  R26,LOW(0)
0000a9 dfbf      	RCALL _read_adc
0000aa 015f      	MOVW R10,R30
                 ; 0000 002F             imin=i;
0000ab 0134      	MOVW R6,R8
                 ; 0000 0030             }
                 ; 0000 0031         }
                 _0x11:
0000ac 01f4      	MOVW R30,R8
0000ad 9631      	ADIW R30,1
0000ae 014f      	MOVW R8,R30
0000af cfcd      	RJMP _0x7
                 _0x8:
                 ; 0000 0032     lcd_gotoxy(0,0);
0000b0 e0e0      	LDI  R30,LOW(0)
0000b1 93ea      	ST   -Y,R30
0000b2 e0a0      	LDI  R26,LOW(0)
0000b3 d197      	RCALL _lcd_gotoxy
                 ; 0000 0033     lcd_putchar((imin/10)%10+'0');
0000b4 01d3      	MOVW R26,R6
0000b5 d225      	RCALL SUBOPT_0x1
                 ; 0000 0034     lcd_putchar(imin%10+'0');
0000b6 01d3      	MOVW R26,R6
0000b7 d22d      	RCALL SUBOPT_0x2
                 ; 0000 0035     lcd_putchar(':');
0000b8 e3aa      	LDI  R26,LOW(58)
0000b9 d1b2      	RCALL _lcd_putchar
                 ; 0000 0036     lcd_putchar((min/1000)%10+'0');
0000ba 01d5      	MOVW R26,R10
0000bb eee8      	LDI  R30,LOW(1000)
0000bc e0f3      	LDI  R31,HIGH(1000)
0000bd d29c      	RCALL __DIVW21
0000be 01df      	MOVW R26,R30
0000bf d225      	RCALL SUBOPT_0x2
                 ; 0000 0037     lcd_putchar((min/100)%10+'0');
0000c0 01d5      	MOVW R26,R10
0000c1 d229      	RCALL SUBOPT_0x3
                 ; 0000 0038     lcd_putchar((min/10)%10+'0');
0000c2 01d5      	MOVW R26,R10
0000c3 d217      	RCALL SUBOPT_0x1
                 ; 0000 0039     lcd_putchar((min/1)%10+'0');
0000c4 01d5      	MOVW R26,R10
0000c5 d21f      	RCALL SUBOPT_0x2
                 ; 0000 003A 
                 ; 0000 003B     sh=read_adc(7);
0000c6 e0a7      	LDI  R26,LOW(7)
0000c7 dfa1      	RCALL _read_adc
0000c8 012f      	MOVW R4,R30
                 ; 0000 003C     lcd_gotoxy(0,1);
0000c9 e0e0      	LDI  R30,LOW(0)
0000ca 93ea      	ST   -Y,R30
0000cb e0a1      	LDI  R26,LOW(1)
0000cc d17e      	RCALL _lcd_gotoxy
                 ; 0000 003D     lcd_putchar((sh/100)%10+'0');
0000cd 01d2      	MOVW R26,R4
0000ce d21c      	RCALL SUBOPT_0x3
                 ; 0000 003E     lcd_putchar((sh/10)%10+'0');
0000cf 01d2      	MOVW R26,R4
0000d0 d20a      	RCALL SUBOPT_0x1
                 ; 0000 003F     lcd_putchar((sh/1)%10+'0');
0000d1 01d2      	MOVW R26,R4
0000d2 d212      	RCALL SUBOPT_0x2
                 ; 0000 0040     }
0000d3 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void motor(int ml1 , int ml2 ,int mr2 ,int mr1)
                 ; 0000 0044     {
                 _motor:
                 ; .FSTART _motor
                 ; 0000 0045     ////////////////////////////////////////////////mr1
                 ; 0000 0046     if(mr1>=0)
0000d4 d260      	RCALL __SAVELOCR6
0000d5 018d      	MOVW R16,R26
                +
0000d6 812e     +LDD R18 , Y + 6
0000d7 813f     +LDD R19 , Y + 6 + 1
                 	__GETWRS 18,19,6
                +
0000d8 8548     +LDD R20 , Y + 8
0000d9 8559     +LDD R21 , Y + 8 + 1
                 	__GETWRS 20,21,8
                 ;	ml1 -> Y+10
                 ;	ml2 -> R20,R21
                 ;	mr2 -> R18,R19
                 ;	mr1 -> R16,R17
0000da 2311      	TST  R17
0000db f01a      	BRMI _0x12
                 ; 0000 0047         {
                 ; 0000 0048         PORTD.0=0;
0000dc 9890      	CBI  0x12,0
                 ; 0000 0049         OCR0=mr1;
0000dd bf0c      	OUT  0x3C,R16
                 ; 0000 004A         }
                 ; 0000 004B     else
0000de c004      	RJMP _0x15
                 _0x12:
                 ; 0000 004C         {
                 ; 0000 004D         PORTD.0=1;
0000df 9a90      	SBI  0x12,0
                 ; 0000 004E         OCR0=mr1+255;
0000e0 2fe0      	MOV  R30,R16
0000e1 50e1      	SUBI R30,-LOW(255)
0000e2 bfec      	OUT  0x3C,R30
                 ; 0000 004F         }
                 _0x15:
                 ; 0000 0050     ////////////////////////////////////////////////mr2
                 ; 0000 0051     if(mr2>=0)
0000e3 2333      	TST  R19
0000e4 f022      	BRMI _0x18
                 ; 0000 0052         {
                 ; 0000 0053         PORTD.1=0;
0000e5 9891      	CBI  0x12,1
                 ; 0000 0054         OCR1B=mr2;
                +
0000e6 bd39     +OUT 40 + 1 , R19
0000e7 bd28     +OUT 40 , R18
                 	__OUTWR 18,19,40
                 ; 0000 0055         }
                 ; 0000 0056     else
0000e8 c006      	RJMP _0x1B
                 _0x18:
                 ; 0000 0057         {
                 ; 0000 0058         PORTD.1=1;
0000e9 9a91      	SBI  0x12,1
                 ; 0000 0059         OCR1B=mr2+255;
0000ea 01f9      	MOVW R30,R18
0000eb 50e1      	SUBI R30,LOW(-255)
0000ec 4fff      	SBCI R31,HIGH(-255)
0000ed bdf9      	OUT  0x28+1,R31
0000ee bde8      	OUT  0x28,R30
                 ; 0000 005A         }
                 _0x1B:
                 ; 0000 005B     ////////////////////////////////////////////////ml2
                 ; 0000 005C 
                 ; 0000 005D     if(ml2>=0)
0000ef 2355      	TST  R21
0000f0 f022      	BRMI _0x1E
                 ; 0000 005E         {
                 ; 0000 005F         PORTD.2=0;
0000f1 9892      	CBI  0x12,2
                 ; 0000 0060         OCR1A=ml2;
                +
0000f2 bd5b     +OUT 42 + 1 , R21
0000f3 bd4a     +OUT 42 , R20
                 	__OUTWR 20,21,42
                 ; 0000 0061         }
                 ; 0000 0062     else
0000f4 c006      	RJMP _0x21
                 _0x1E:
                 ; 0000 0063         {
                 ; 0000 0064         PORTD.2=1;
0000f5 9a92      	SBI  0x12,2
                 ; 0000 0065         OCR1A=ml2+255;
0000f6 01fa      	MOVW R30,R20
0000f7 50e1      	SUBI R30,LOW(-255)
0000f8 4fff      	SBCI R31,HIGH(-255)
0000f9 bdfb      	OUT  0x2A+1,R31
0000fa bdea      	OUT  0x2A,R30
                 ; 0000 0066         }
                 _0x21:
                 ; 0000 0067     ////////////////////////////////////////////////ml1
                 ; 0000 0068 
                 ; 0000 0069     if(ml1>=0)
0000fb 85ab      	LDD  R26,Y+11
0000fc 23aa      	TST  R26
0000fd f01a      	BRMI _0x24
                 ; 0000 006A         {
                 ; 0000 006B         PORTD.3=0;
0000fe 9893      	CBI  0x12,3
                 ; 0000 006C         OCR2=ml1;
0000ff 85ea      	LDD  R30,Y+10
000100 c003      	RJMP _0x51
                 ; 0000 006D         }
                 ; 0000 006E     else
                 _0x24:
                 ; 0000 006F         {
                 ; 0000 0070         PORTD.3=1;
000101 9a93      	SBI  0x12,3
                 ; 0000 0071         OCR2=ml1+255;
000102 85ea      	LDD  R30,Y+10
000103 50e1      	SUBI R30,-LOW(255)
                 _0x51:
000104 bde3      	OUT  0x23,R30
                 ; 0000 0072         }
                 ; 0000 0073     }
000105 d236      	RCALL __LOADLOCR6
000106 962c      	ADIW R28,12
000107 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0076 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0077 {
                 ; 0000 0078 // Declare your local variables here
                 ; 0000 0079 
                 ; 0000 007A // Input/Output Ports initialization
                 ; 0000 007B // Port A initialization
                 ; 0000 007C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007D DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000108 e0e0      	LDI  R30,LOW(0)
000109 bbea      	OUT  0x1A,R30
                 ; 0000 007E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 007F PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00010a bbeb      	OUT  0x1B,R30
                 ; 0000 0080 
                 ; 0000 0081 // Port B initialization
                 ; 0000 0082 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0083 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00010b efe8      	LDI  R30,LOW(248)
00010c bbe7      	OUT  0x17,R30
                 ; 0000 0084 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 0085 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00010d e0e0      	LDI  R30,LOW(0)
00010e bbe8      	OUT  0x18,R30
                 ; 0000 0086 
                 ; 0000 0087 // Port C initialization
                 ; 0000 0088 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0089 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00010f bbe4      	OUT  0x14,R30
                 ; 0000 008A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 008B PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000110 bbe5      	OUT  0x15,R30
                 ; 0000 008C 
                 ; 0000 008D // Port D initialization
                 ; 0000 008E // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 008F DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000111 efef      	LDI  R30,LOW(255)
000112 bbe1      	OUT  0x11,R30
                 ; 0000 0090 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0091 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000113 e0e0      	LDI  R30,LOW(0)
000114 bbe2      	OUT  0x12,R30
                 ; 0000 0092 
                 ; 0000 0093 // Timer/Counter 0 initialization
                 ; 0000 0094 // Clock source: System Clock
                 ; 0000 0095 // Clock value: 15.625 kHz
                 ; 0000 0096 // Mode: Fast PWM top=0xFF
                 ; 0000 0097 // OC0 output: Non-Inverted PWM
                 ; 0000 0098 // Timer Period: 16.384 ms
                 ; 0000 0099 // Output Pulse(s):
                 ; 0000 009A // OC0 Period: 16.384 ms Width: 0 us
                 ; 0000 009B TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
000115 e6eb      	LDI  R30,LOW(107)
000116 bfe3      	OUT  0x33,R30
                 ; 0000 009C TCNT0=0x00;
000117 e0e0      	LDI  R30,LOW(0)
000118 bfe2      	OUT  0x32,R30
                 ; 0000 009D OCR0=0x00;
000119 bfec      	OUT  0x3C,R30
                 ; 0000 009E 
                 ; 0000 009F // Timer/Counter 1 initialization
                 ; 0000 00A0 // Clock source: System Clock
                 ; 0000 00A1 // Clock value: 15.625 kHz
                 ; 0000 00A2 // Mode: Fast PWM top=0x00FF
                 ; 0000 00A3 // OC1A output: Non-Inverted PWM
                 ; 0000 00A4 // OC1B output: Non-Inverted PWM
                 ; 0000 00A5 // Noise Canceler: Off
                 ; 0000 00A6 // Input Capture on Falling Edge
                 ; 0000 00A7 // Timer Period: 16.384 ms
                 ; 0000 00A8 // Output Pulse(s):
                 ; 0000 00A9 // OC1A Period: 16.384 ms Width: 0 us// OC1B Period: 16.384 ms Width: 0 us
                 ; 0000 00AA // Timer1 Overflow Interrupt: Off
                 ; 0000 00AB // Input Capture Interrupt: Off
                 ; 0000 00AC // Compare A Match Interrupt: Off
                 ; 0000 00AD // Compare B Match Interrupt: Off
                 ; 0000 00AE TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
00011a eae1      	LDI  R30,LOW(161)
00011b bdef      	OUT  0x2F,R30
                 ; 0000 00AF TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
00011c e0eb      	LDI  R30,LOW(11)
00011d bdee      	OUT  0x2E,R30
                 ; 0000 00B0 TCNT1H=0x00;
00011e e0e0      	LDI  R30,LOW(0)
00011f bded      	OUT  0x2D,R30
                 ; 0000 00B1 TCNT1L=0x00;
000120 bdec      	OUT  0x2C,R30
                 ; 0000 00B2 ICR1H=0x00;
000121 bde7      	OUT  0x27,R30
                 ; 0000 00B3 ICR1L=0x00;
000122 bde6      	OUT  0x26,R30
                 ; 0000 00B4 OCR1AH=0x00;
000123 bdeb      	OUT  0x2B,R30
                 ; 0000 00B5 OCR1AL=0x00;
000124 bdea      	OUT  0x2A,R30
                 ; 0000 00B6 OCR1BH=0x00;
000125 bde9      	OUT  0x29,R30
                 ; 0000 00B7 OCR1BL=0x00;
000126 bde8      	OUT  0x28,R30
                 ; 0000 00B8 
                 ; 0000 00B9 // Timer/Counter 2 initialization
                 ; 0000 00BA // Clock source: System Clock
                 ; 0000 00BB // Clock value: 15.625 kHz
                 ; 0000 00BC // Mode: Fast PWM top=0xFF
                 ; 0000 00BD // OC2 output: Non-Inverted PWM
                 ; 0000 00BE // Timer Period: 16.384 ms
                 ; 0000 00BF // Output Pulse(s):
                 ; 0000 00C0 // OC2 Period: 16.384 ms Width: 0 us
                 ; 0000 00C1 ASSR=0<<AS2;
000127 bde2      	OUT  0x22,R30
                 ; 0000 00C2 TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
000128 e6ec      	LDI  R30,LOW(108)
000129 bde5      	OUT  0x25,R30
                 ; 0000 00C3 TCNT2=0x00;
00012a e0e0      	LDI  R30,LOW(0)
00012b bde4      	OUT  0x24,R30
                 ; 0000 00C4 OCR2=0x00;
00012c bde3      	OUT  0x23,R30
                 ; 0000 00C5 
                 ; 0000 00C6 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00C7 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00012d bfe9      	OUT  0x39,R30
                 ; 0000 00C8 
                 ; 0000 00C9 // External Interrupt(s) initialization
                 ; 0000 00CA // INT0: Off
                 ; 0000 00CB // INT1: Off
                 ; 0000 00CC // INT2: Off
                 ; 0000 00CD MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00012e bfe5      	OUT  0x35,R30
                 ; 0000 00CE MCUCSR=(0<<ISC2);
00012f bfe4      	OUT  0x34,R30
                 ; 0000 00CF 
                 ; 0000 00D0 // USART initialization
                 ; 0000 00D1 // USART disabled
                 ; 0000 00D2 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000130 b9ea      	OUT  0xA,R30
                 ; 0000 00D3 
                 ; 0000 00D4 // Analog Comparator initialization
                 ; 0000 00D5 // Analog Comparator: Off
                 ; 0000 00D6 // The Analog Comparator's positive input is
                 ; 0000 00D7 // connected to the AIN0 pin
                 ; 0000 00D8 // The Analog Comparator's negative input is
                 ; 0000 00D9 // connected to the AIN1 pin
                 ; 0000 00DA ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000131 e8e0      	LDI  R30,LOW(128)
000132 b9e8      	OUT  0x8,R30
                 ; 0000 00DB 
                 ; 0000 00DC // ADC initialization
                 ; 0000 00DD // ADC Clock frequency: 62.500 kHz
                 ; 0000 00DE // ADC Voltage Reference: AREF pin
                 ; 0000 00DF // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00E0 ADMUX=ADC_VREF_TYPE;
000133 e0e0      	LDI  R30,LOW(0)
000134 b9e7      	OUT  0x7,R30
                 ; 0000 00E1 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000135 e8e4      	LDI  R30,LOW(132)
000136 b9e6      	OUT  0x6,R30
                 ; 0000 00E2 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000137 e0e0      	LDI  R30,LOW(0)
000138 bfe0      	OUT  0x30,R30
                 ; 0000 00E3 
                 ; 0000 00E4 // SPI initialization
                 ; 0000 00E5 // SPI disabled
                 ; 0000 00E6 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000139 b9ed      	OUT  0xD,R30
                 ; 0000 00E7 
                 ; 0000 00E8 // TWI initialization
                 ; 0000 00E9 // TWI disabled
                 ; 0000 00EA TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00013a bfe6      	OUT  0x36,R30
                 ; 0000 00EB 
                 ; 0000 00EC // Alphanumeric LCD initialization
                 ; 0000 00ED // Connections are specified in the
                 ; 0000 00EE // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00EF // RS - PORTC Bit 0
                 ; 0000 00F0 // RD - PORTC Bit 1
                 ; 0000 00F1 // EN - PORTC Bit 2
                 ; 0000 00F2 // D4 - PORTC Bit 4
                 ; 0000 00F3 // D5 - PORTC Bit 5
                 ; 0000 00F4 // D6 - PORTC Bit 6
                 ; 0000 00F5 // D7 - PORTC Bit 7
                 ; 0000 00F6 // Characters/line: 16
                 ; 0000 00F7 lcd_init(16);
00013b e1a0      	LDI  R26,LOW(16)
00013c d165      	RCALL _lcd_init
                 ; 0000 00F8 }
                 ; 0000 00F9 while (1)
                 _0x2A:
                 ; 0000 00FA       {
                 ; 0000 00FB       sensor();
00013d df3a      	RCALL _sensor
                 ; 0000 00FC       if(min<=800)
00013e e2e0      	LDI  R30,LOW(800)
00013f e0f3      	LDI  R31,HIGH(800)
000140 15ea      	CP   R30,R10
000141 05fb      	CPC  R31,R11
000142 f40c      	BRGE PC+2
000143 c0b7      	RJMP _0x2D
                 ; 0000 00FD           {
                 ; 0000 00FE           if(imin==0) motor(v,v,-v,-v);
000144 2c06      	MOV  R0,R6
000145 2807      	OR   R0,R7
000146 f421      	BRNE _0x2E
000147 d1a8      	RCALL SUBOPT_0x4
000148 01f6      	MOVW R30,R12
000149 d1f9      	RCALL __ANEGW1
00014a c0a9      	RJMP _0x52
                 ; 0000 00FF           else if(imin==1) motor(v,-v/2,-v,v/2);                        //motor(v,v/2,-v,-v/2);
                 _0x2E:
00014b e0e1      	LDI  R30,LOW(1)
00014c e0f0      	LDI  R31,HIGH(1)
00014d 15e6      	CP   R30,R6
00014e 05f7      	CPC  R31,R7
00014f f439      	BRNE _0x30
000150 d1a4      	RCALL SUBOPT_0x5
000151 d1a8      	RCALL SUBOPT_0x6
000152 d1ae      	RCALL SUBOPT_0x7
000153 e0e2      	LDI  R30,LOW(2)
000154 e0f0      	LDI  R31,HIGH(2)
000155 d204      	RCALL __DIVW21
000156 c0a1      	RJMP _0x53
                 ; 0000 0100           else if(imin==2) motor(v,-v,-v,v);                            //motor(v,0,-v,0);
                 _0x30:
000157 e0e2      	LDI  R30,LOW(2)
000158 e0f0      	LDI  R31,HIGH(2)
000159 15e6      	CP   R30,R6
00015a 05f7      	CPC  R31,R7
00015b f429      	BRNE _0x32
00015c d198      	RCALL SUBOPT_0x5
00015d 93fa      	ST   -Y,R31
00015e 93ea      	ST   -Y,R30
00015f d1a1      	RCALL SUBOPT_0x7
000160 c098      	RJMP _0x54
                 ; 0000 0101           else if(imin==3) motor(v/2,-v,-v/2,v);                        //motor(v,-v/2,-v,v/2);
                 _0x32:
000161 e0e3      	LDI  R30,LOW(3)
000162 e0f0      	LDI  R31,HIGH(3)
000163 15e6      	CP   R30,R6
000164 05f7      	CPC  R31,R7
000165 f431      	BRNE _0x34
000166 d1a0      	RCALL SUBOPT_0x8
000167 d1a4      	RCALL SUBOPT_0x9
000168 d1a3      	RCALL SUBOPT_0x9
000169 d190      	RCALL SUBOPT_0x6
00016a 01d6      	MOVW R26,R12
00016b c08d      	RJMP _0x54
                 ; 0000 0102           else if(imin==4) motor(0,-v,0,v);                             //motor(v,-v,-v,v);
                 _0x34:
00016c e0e4      	LDI  R30,LOW(4)
00016d e0f0      	LDI  R31,HIGH(4)
00016e 15e6      	CP   R30,R6
00016f 05f7      	CPC  R31,R7
000170 f429      	BRNE _0x36
000171 e0e0      	LDI  R30,LOW(0)
000172 e0f0      	LDI  R31,HIGH(0)
000173 d198      	RCALL SUBOPT_0x9
000174 d19c      	RCALL SUBOPT_0xA
000175 c083      	RJMP _0x54
                 ; 0000 0103           else if(imin==5) motor(-v/2,-v,v/2,v);                        //motor(v/2,-v,-v/2,v);
                 _0x36:
000176 e0e5      	LDI  R30,LOW(5)
000177 e0f0      	LDI  R31,HIGH(5)
000178 15e6      	CP   R30,R6
000179 05f7      	CPC  R31,R7
00017a f431      	BRNE _0x38
00017b 01f6      	MOVW R30,R12
00017c d1c6      	RCALL __ANEGW1
00017d d17c      	RCALL SUBOPT_0x6
00017e d182      	RCALL SUBOPT_0x7
00017f d199      	RCALL SUBOPT_0xB
000180 c078      	RJMP _0x54
                 ; 0000 0104           else if(imin==6) motor(-v,-v,v,v);                            //motor(0,-v,0,v);
                 _0x38:
000181 e0e6      	LDI  R30,LOW(6)
000182 e0f0      	LDI  R31,HIGH(6)
000183 15e6      	CP   R30,R6
000184 05f7      	CPC  R31,R7
000185 f429      	BRNE _0x3A
000186 01f6      	MOVW R30,R12
000187 d1bb      	RCALL __ANEGW1
000188 d183      	RCALL SUBOPT_0x9
000189 d196      	RCALL SUBOPT_0xC
00018a c06e      	RJMP _0x54
                 ; 0000 0105           else if(imin==7) motor(-v,-v/2,v,v/2);                        //motor(-v/2,-v,v/2,v);
                 _0x3A:
00018b e0e7      	LDI  R30,LOW(7)
00018c e0f0      	LDI  R31,HIGH(7)
00018d 15e6      	CP   R30,R6
00018e 05f7      	CPC  R31,R7
00018f f441      	BRNE _0x3C
000190 01f6      	MOVW R30,R12
000191 d1b1      	RCALL __ANEGW1
000192 d179      	RCALL SUBOPT_0x9
000193 d166      	RCALL SUBOPT_0x6
000194 92da      	ST   -Y,R13
000195 92ca      	ST   -Y,R12
000196 d170      	RCALL SUBOPT_0x8
000197 c060      	RJMP _0x53
                 ; 0000 0106           else if(imin==8) motor(0,-v,0,v);                             //motor(-v,-v,v,v);
                 _0x3C:
000198 e0e8      	LDI  R30,LOW(8)
000199 e0f0      	LDI  R31,HIGH(8)
00019a 15e6      	CP   R30,R6
00019b 05f7      	CPC  R31,R7
00019c f429      	BRNE _0x3E
00019d e0e0      	LDI  R30,LOW(0)
00019e e0f0      	LDI  R31,HIGH(0)
00019f d16c      	RCALL SUBOPT_0x9
0001a0 d170      	RCALL SUBOPT_0xA
0001a1 c057      	RJMP _0x54
                 ; 0000 0107           else if(imin==9) motor(-v/2,-v,v/2,v);                        //motor(-v,-v/2,v,v/2);
                 _0x3E:
0001a2 e0e9      	LDI  R30,LOW(9)
0001a3 e0f0      	LDI  R31,HIGH(9)
0001a4 15e6      	CP   R30,R6
0001a5 05f7      	CPC  R31,R7
0001a6 f431      	BRNE _0x40
0001a7 01f6      	MOVW R30,R12
0001a8 d19a      	RCALL __ANEGW1
0001a9 d150      	RCALL SUBOPT_0x6
0001aa d156      	RCALL SUBOPT_0x7
0001ab d16d      	RCALL SUBOPT_0xB
0001ac c04c      	RJMP _0x54
                 ; 0000 0108           else if(imin==10)motor(-v,-v,v,v);                            //motor(-v,0,v,0);
                 _0x40:
0001ad e0ea      	LDI  R30,LOW(10)
0001ae e0f0      	LDI  R31,HIGH(10)
0001af 15e6      	CP   R30,R6
0001b0 05f7      	CPC  R31,R7
0001b1 f429      	BRNE _0x42
0001b2 01f6      	MOVW R30,R12
0001b3 d18f      	RCALL __ANEGW1
0001b4 d157      	RCALL SUBOPT_0x9
0001b5 d16a      	RCALL SUBOPT_0xC
0001b6 c042      	RJMP _0x54
                 ; 0000 0109           else if(imin==11)motor(-v,-v/2,v,v/2);                        //motor(-v,v/2,v,-v/2);
                 _0x42:
0001b7 e0eb      	LDI  R30,LOW(11)
0001b8 e0f0      	LDI  R31,HIGH(11)
0001b9 15e6      	CP   R30,R6
0001ba 05f7      	CPC  R31,R7
0001bb f441      	BRNE _0x44
0001bc 01f6      	MOVW R30,R12
0001bd d185      	RCALL __ANEGW1
0001be d14d      	RCALL SUBOPT_0x9
0001bf d13a      	RCALL SUBOPT_0x6
0001c0 92da      	ST   -Y,R13
0001c1 92ca      	ST   -Y,R12
0001c2 d144      	RCALL SUBOPT_0x8
0001c3 c034      	RJMP _0x53
                 ; 0000 010A           else if(imin==12)motor(-v,0,v,0);                             //motor(-v,v,v,-v);
                 _0x44:
0001c4 e0ec      	LDI  R30,LOW(12)
0001c5 e0f0      	LDI  R31,HIGH(12)
0001c6 15e6      	CP   R30,R6
0001c7 05f7      	CPC  R31,R7
0001c8 f439      	BRNE _0x46
0001c9 d15c      	RCALL SUBOPT_0xD
0001ca d160      	RCALL SUBOPT_0xE
0001cb 92da      	ST   -Y,R13
0001cc 92ca      	ST   -Y,R12
0001cd e0a0      	LDI  R26,LOW(0)
0001ce e0b0      	LDI  R27,0
0001cf c029      	RJMP _0x54
                 ; 0000 010B           else if(imin==13)motor(-v,v/2,v,-v/2);                        //motor(-v/2,v,v/2,-v);
                 _0x46:
0001d0 e0ed      	LDI  R30,LOW(13)
0001d1 e0f0      	LDI  R31,HIGH(13)
0001d2 15e6      	CP   R30,R6
0001d3 05f7      	CPC  R31,R7
0001d4 f461      	BRNE _0x48
0001d5 d12b      	RCALL SUBOPT_0x7
0001d6 e0e2      	LDI  R30,LOW(2)
0001d7 e0f0      	LDI  R31,HIGH(2)
0001d8 d181      	RCALL __DIVW21
0001d9 93fa      	ST   -Y,R31
0001da 93ea      	ST   -Y,R30
0001db d119      	RCALL SUBOPT_0x5
0001dc 01df      	MOVW R26,R30
0001dd e0e2      	LDI  R30,LOW(2)
0001de e0f0      	LDI  R31,HIGH(2)
0001df d17a      	RCALL __DIVW21
0001e0 c017      	RJMP _0x53
                 ; 0000 010C           else if(imin==14)motor(-v,v,v,-v);                            //motor(0,v,0,-v);
                 _0x48:
0001e1 e0ee      	LDI  R30,LOW(14)
0001e2 e0f0      	LDI  R31,HIGH(14)
0001e3 15e6      	CP   R30,R6
0001e4 05f7      	CPC  R31,R7
0001e5 f419      	BRNE _0x4A
0001e6 d13f      	RCALL SUBOPT_0xD
0001e7 d108      	RCALL SUBOPT_0x4
0001e8 c00d      	RJMP _0x55
                 ; 0000 010D           else if(imin==15)motor(-v/2,v,v/2,-v);                        //motor(v/2,v,-v/2,-v);
                 _0x4A:
0001e9 e0ef      	LDI  R30,LOW(15)
0001ea e0f0      	LDI  R31,HIGH(15)
0001eb 15e6      	CP   R30,R6
0001ec 05f7      	CPC  R31,R7
0001ed f461      	BRNE _0x4C
0001ee 01f6      	MOVW R30,R12
0001ef d153      	RCALL __ANEGW1
0001f0 d109      	RCALL SUBOPT_0x6
0001f1 92da      	ST   -Y,R13
0001f2 92ca      	ST   -Y,R12
0001f3 d113      	RCALL SUBOPT_0x8
                 _0x52:
0001f4 93fa      	ST   -Y,R31
0001f5 93ea      	ST   -Y,R30
                 _0x55:
0001f6 01f6      	MOVW R30,R12
0001f7 d14b      	RCALL __ANEGW1
                 _0x53:
0001f8 01df      	MOVW R26,R30
                 _0x54:
0001f9 deda      	RCALL _motor
                 ; 0000 010E           }
                 _0x4C:
                 ; 0000 010F       else
0001fa c013      	RJMP _0x4D
                 _0x2D:
                 ; 0000 0110       {
                 ; 0000 0111         if(sh < 200) motor(-255,-255,255,255);
0001fb ece8      	LDI  R30,LOW(200)
0001fc e0f0      	LDI  R31,HIGH(200)
0001fd 164e      	CP   R4,R30
0001fe 065f      	CPC  R5,R31
0001ff f444      	BRGE _0x4E
000200 d12f      	RCALL SUBOPT_0xF
000201 d12e      	RCALL SUBOPT_0xF
000202 efef      	LDI  R30,LOW(255)
000203 e0f0      	LDI  R31,HIGH(255)
000204 93fa      	ST   -Y,R31
000205 93ea      	ST   -Y,R30
000206 efaf      	LDI  R26,LOW(255)
000207 c004      	RJMP _0x56
                 ; 0000 0112         else motor(0,0,0,0);
                 _0x4E:
000208 d122      	RCALL SUBOPT_0xE
000209 d121      	RCALL SUBOPT_0xE
00020a d120      	RCALL SUBOPT_0xE
00020b e0a0      	LDI  R26,LOW(0)
                 _0x56:
00020c e0b0      	LDI  R27,0
00020d dec6      	RCALL _motor
                 ; 0000 0113       }
                 _0x4D:
                 ; 0000 0114       }
00020e cf2e      	RJMP _0x2A
                 ; 0000 0115 }
                 _0x50:
00020f cfff      	RJMP _0x50
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
000210 e0ff          ldi   r31,15
                 __lcd_delay0:
000211 95fa          dec   r31
000212 f7f1          brne  __lcd_delay0
000213 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000214 b3a4          in    r26,__lcd_direction
000215 70af          andi  r26,0xf                 ;set as input
000216 bba4          out   __lcd_direction,r26
000217 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000218 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000219 dff6      	RCALL __lcd_delay_G100
00021a 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00021b dff4      	RCALL __lcd_delay_G100
00021c b3a3          in    r26,__lcd_pin
00021d 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
00021e dff1      	RCALL __lcd_delay_G100
00021f 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000220 dfef      	RCALL __lcd_delay_G100
000221 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000222 fda7          sbrc  r26,__lcd_busy_flag
000223 cff5          rjmp  __lcd_busy
000224 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000225 7fa0          andi  r26,0xf0
000226 2bab          or    r26,r27
000227 bba5          out   __lcd_port,r26          ;write
000228 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000229 dfe6      	RCALL __lcd_delay_G100
00022a 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
00022b dfe4      	RCALL __lcd_delay_G100
00022c 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00022d 93aa      	ST   -Y,R26
00022e 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00022f b3a4          in    r26,__lcd_direction
000230 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000231 bba4          out   __lcd_direction,r26
000232 b3b5          in    r27,__lcd_port
000233 70bf          andi  r27,0xf
000234 81a8          ld    r26,y
000235 dfef      	RCALL __lcd_write_nibble_G100
000236 81a8          ld    r26,y
000237 95a2          swap  r26
000238 dfec      	RCALL __lcd_write_nibble_G100
000239 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
00023a 940c 02d3 	JMP  _0x2080001
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
00023c 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00023d dfd2      	RCALL __lcd_delay_G100
00023e b3e3          in    r30,__lcd_pin           ;read
00023f 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000240 dfcf      	RCALL __lcd_delay_G100
000241 7fe0          andi  r30,0xf0
000242 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
000243 dfcc      	RCALL __lcd_delay_G100
000244 dff7      	RCALL __lcd_read_nibble_G100
000245 2fae          mov   r26,r30
000246 dff5      	RCALL __lcd_read_nibble_G100
000247 98a9          cbi   __lcd_port,__lcd_rd     ;RD=0
000248 95e2          swap  r30
000249 2bea          or    r30,r26
00024a 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00024b 93aa      	ST   -Y,R26
00024c dfc7      	RCALL __lcd_ready
00024d 81e8      	LD   R30,Y
00024e e0f0      	LDI  R31,0
00024f 5ae0      	SUBI R30,LOW(-__base_y_G100)
000250 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000251 81e0      	LD   R30,Z
000252 81a9      	LDD  R26,Y+1
000253 0fae      	ADD  R26,R30
000254 dfd8      	RCALL __lcd_write_data
000255 81e9      	LDD  R30,Y+1
000256 93e0 0164 	STS  __lcd_x,R30
000258 81e8      	LD   R30,Y
000259 93e0 0165 	STS  __lcd_y,R30
00025b 9622      	ADIW R28,2
00025c 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00025d dfb6      	RCALL __lcd_ready
00025e e0a2      	LDI  R26,LOW(2)
00025f dfcd      	RCALL __lcd_write_data
000260 dfb3      	RCALL __lcd_ready
000261 e0ac      	LDI  R26,LOW(12)
000262 dfca      	RCALL __lcd_write_data
000263 dfb0      	RCALL __lcd_ready
000264 e0a1      	LDI  R26,LOW(1)
000265 dfc7      	RCALL __lcd_write_data
000266 e0e0      	LDI  R30,LOW(0)
000267 93e0 0165 	STS  __lcd_y,R30
000269 93e0 0164 	STS  __lcd_x,R30
00026b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00026c 93aa      	ST   -Y,R26
00026d 93ef          push r30
00026e 93ff          push r31
00026f 81a8          ld   r26,y
000270 9468          set
000271 30aa          cpi  r26,10
000272 f039          breq __lcd_putchar1
000273 94e8          clt
000274 91e0 0166 	LDS  R30,__lcd_maxx
000276 91a0 0164 	LDS  R26,__lcd_x
000278 17ae      	CP   R26,R30
000279 f058      	BRLO _0x2000004
                 	__lcd_putchar1:
00027a 91e0 0165 	LDS  R30,__lcd_y
00027c 5fef      	SUBI R30,-LOW(1)
00027d 93e0 0165 	STS  __lcd_y,R30
00027f e0e0      	LDI  R30,LOW(0)
000280 93ea      	ST   -Y,R30
000281 91a0 0165 	LDS  R26,__lcd_y
000283 dfc7      	RCALL _lcd_gotoxy
000284 f04e      	brts __lcd_putchar0
                 _0x2000004:
000285 91e0 0164 	LDS  R30,__lcd_x
000287 5fef      	SUBI R30,-LOW(1)
000288 93e0 0164 	STS  __lcd_x,R30
00028a df89          rcall __lcd_ready
00028b 9aa8          sbi  __lcd_port,__lcd_rs ;RS=1
00028c 81a8      	LD   R26,Y
00028d df9f      	RCALL __lcd_write_data
                 __lcd_putchar0:
00028e 91ff          pop  r31
00028f 91ef          pop  r30
000290 940c 02d3 	JMP  _0x2080001
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
000292 27aa          clr   r26
000293 27bb          clr   r27
                 __long_delay0:
000294 9711          sbiw  r26,1         ;2 cycles
000295 f7f1          brne  __long_delay0 ;2 cycles
000296 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
000297 93aa      	ST   -Y,R26
000298 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000299 b3a4          in    r26,__lcd_direction
00029a 6fa7          ori   r26,0xf7                ;set as output
00029b bba4          out   __lcd_direction,r26
00029c b3b5          in    r27,__lcd_port
00029d 70bf          andi  r27,0xf
00029e 81a8          ld    r26,y
00029f df85      	RCALL __lcd_write_nibble_G100
0002a0 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0002a1 c031      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002a2 93aa      	ST   -Y,R26
0002a3 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0002a4 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
0002a5 81e8      	LD   R30,Y
0002a6 93e0 0166 	STS  __lcd_maxx,R30
0002a8 58e0      	SUBI R30,-LOW(128)
                +
0002a9 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0002ab 81e8      	LD   R30,Y
0002ac 54e0      	SUBI R30,-LOW(192)
                +
0002ad 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002af dfe2      	RCALL __long_delay_G100
0002b0 e3a0      	LDI  R26,LOW(48)
0002b1 dfe5      	RCALL __lcd_init_write_G100
0002b2 dfdf      	RCALL __long_delay_G100
0002b3 e3a0      	LDI  R26,LOW(48)
0002b4 dfe2      	RCALL __lcd_init_write_G100
0002b5 dfdc      	RCALL __long_delay_G100
0002b6 e3a0      	LDI  R26,LOW(48)
0002b7 dfdf      	RCALL __lcd_init_write_G100
0002b8 dfd9      	RCALL __long_delay_G100
0002b9 e2a0      	LDI  R26,LOW(32)
0002ba dfdc      	RCALL __lcd_init_write_G100
0002bb dfd6      	RCALL __long_delay_G100
0002bc e2a8      	LDI  R26,LOW(40)
0002bd df6f      	RCALL __lcd_write_data
0002be dfd3      	RCALL __long_delay_G100
0002bf e0a4      	LDI  R26,LOW(4)
0002c0 df6c      	RCALL __lcd_write_data
0002c1 dfd0      	RCALL __long_delay_G100
0002c2 e8a5      	LDI  R26,LOW(133)
0002c3 df69      	RCALL __lcd_write_data
0002c4 dfcd      	RCALL __long_delay_G100
0002c5 b3a4          in    r26,__lcd_direction
0002c6 70af          andi  r26,0xf                 ;set as input
0002c7 bba4          out   __lcd_direction,r26
0002c8 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0002c9 df79      	RCALL _lcd_read_byte0_G100
0002ca 30e5      	CPI  R30,LOW(0x5)
0002cb f011      	BREQ _0x200000B
0002cc e0e0      	LDI  R30,LOW(0)
0002cd c005      	RJMP _0x2080001
                 _0x200000B:
0002ce df45      	RCALL __lcd_ready
0002cf e0a6      	LDI  R26,LOW(6)
0002d0 df5c      	RCALL __lcd_write_data
0002d1 df8b      	RCALL _lcd_clear
0002d2 e0e1      	LDI  R30,LOW(1)
                 _0x2080001:
0002d3 9621      	ADIW R28,1
0002d4 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 __lcd_x:
000164           	.BYTE 0x1
                 __lcd_y:
000165           	.BYTE 0x1
                 __lcd_maxx:
000166           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
0002d5 d084      	RCALL __DIVW21
0002d6 e0a1      	LDI  R26,LOW(1)
0002d7 e0b0      	LDI  R27,HIGH(1)
0002d8 d094      	RCALL __MANDW12
0002d9 30e0      	CPI  R30,0
0002da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x1:
0002db e0ea      	LDI  R30,LOW(10)
0002dc e0f0      	LDI  R31,HIGH(10)
0002dd d07c      	RCALL __DIVW21
0002de 01df      	MOVW R26,R30
0002df e0ea      	LDI  R30,LOW(10)
0002e0 e0f0      	LDI  R31,HIGH(10)
0002e1 d07d      	RCALL __MODW21
0002e2 5de0      	SUBI R30,-LOW(48)
0002e3 2fae      	MOV  R26,R30
0002e4 cf87      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x2:
0002e5 e0ea      	LDI  R30,LOW(10)
0002e6 e0f0      	LDI  R31,HIGH(10)
0002e7 d077      	RCALL __MODW21
0002e8 5de0      	SUBI R30,-LOW(48)
0002e9 2fae      	MOV  R26,R30
0002ea cf81      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
0002eb e6e4      	LDI  R30,LOW(100)
0002ec e0f0      	LDI  R31,HIGH(100)
0002ed d06c      	RCALL __DIVW21
0002ee 01df      	MOVW R26,R30
0002ef cff5      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0002f0 92da      	ST   -Y,R13
0002f1 92ca      	ST   -Y,R12
0002f2 92da      	ST   -Y,R13
0002f3 92ca      	ST   -Y,R12
0002f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0002f5 92da      	ST   -Y,R13
0002f6 92ca      	ST   -Y,R12
0002f7 01f6      	MOVW R30,R12
0002f8 d04a      	RCALL __ANEGW1
0002f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:28 WORDS
                 SUBOPT_0x6:
0002fa 01df      	MOVW R26,R30
0002fb e0e2      	LDI  R30,LOW(2)
0002fc e0f0      	LDI  R31,HIGH(2)
0002fd d05c      	RCALL __DIVW21
0002fe 93fa      	ST   -Y,R31
0002ff 93ea      	ST   -Y,R30
000300 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x7:
000301 01f6      	MOVW R30,R12
000302 d040      	RCALL __ANEGW1
000303 93fa      	ST   -Y,R31
000304 93ea      	ST   -Y,R30
000305 01d6      	MOVW R26,R12
000306 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
000307 01d6      	MOVW R26,R12
000308 e0e2      	LDI  R30,LOW(2)
000309 e0f0      	LDI  R31,HIGH(2)
00030a d04f      	RCALL __DIVW21
00030b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x9:
00030c 93fa      	ST   -Y,R31
00030d 93ea      	ST   -Y,R30
00030e 01f6      	MOVW R30,R12
00030f d033      	RCALL __ANEGW1
000310 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
000311 93fa      	ST   -Y,R31
000312 93ea      	ST   -Y,R30
000313 e0e0      	LDI  R30,LOW(0)
000314 e0f0      	LDI  R31,HIGH(0)
000315 93fa      	ST   -Y,R31
000316 93ea      	ST   -Y,R30
000317 01d6      	MOVW R26,R12
000318 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000319 e0e2      	LDI  R30,LOW(2)
00031a e0f0      	LDI  R31,HIGH(2)
00031b d03e      	RCALL __DIVW21
00031c 93fa      	ST   -Y,R31
00031d 93ea      	ST   -Y,R30
00031e 01d6      	MOVW R26,R12
00031f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
000320 93fa      	ST   -Y,R31
000321 93ea      	ST   -Y,R30
000322 92da      	ST   -Y,R13
000323 92ca      	ST   -Y,R12
000324 01d6      	MOVW R26,R12
000325 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000326 01f6      	MOVW R30,R12
000327 d01b      	RCALL __ANEGW1
000328 93fa      	ST   -Y,R31
000329 93ea      	ST   -Y,R30
00032a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xE:
00032b e0e0      	LDI  R30,LOW(0)
00032c e0f0      	LDI  R31,HIGH(0)
00032d 93fa      	ST   -Y,R31
00032e 93ea      	ST   -Y,R30
00032f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000330 e0e1      	LDI  R30,LOW(65281)
000331 efff      	LDI  R31,HIGH(65281)
000332 93fa      	ST   -Y,R31
000333 93ea      	ST   -Y,R30
000334 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000335 935a      	ST   -Y,R21
                 __SAVELOCR5:
000336 934a      	ST   -Y,R20
                 __SAVELOCR4:
000337 933a      	ST   -Y,R19
                 __SAVELOCR3:
000338 932a      	ST   -Y,R18
                 __SAVELOCR2:
000339 931a      	ST   -Y,R17
00033a 930a      	ST   -Y,R16
00033b 9508      	RET
                 
                 __LOADLOCR6:
00033c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00033d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00033e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00033f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000340 8119      	LDD  R17,Y+1
000341 8108      	LD   R16,Y
000342 9508      	RET
                 
                 __ANEGW1:
000343 95f1      	NEG  R31
000344 95e1      	NEG  R30
000345 40f0      	SBCI R31,0
000346 9508      	RET
                 
                 __DIVW21U:
000347 2400      	CLR  R0
000348 2411      	CLR  R1
000349 e190      	LDI  R25,16
                 __DIVW21U1:
00034a 0faa      	LSL  R26
00034b 1fbb      	ROL  R27
00034c 1c00      	ROL  R0
00034d 1c11      	ROL  R1
00034e 1a0e      	SUB  R0,R30
00034f 0a1f      	SBC  R1,R31
000350 f418      	BRCC __DIVW21U2
000351 0e0e      	ADD  R0,R30
000352 1e1f      	ADC  R1,R31
000353 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000354 60a1      	SBR  R26,1
                 __DIVW21U3:
000355 959a      	DEC  R25
000356 f799      	BRNE __DIVW21U1
000357 01fd      	MOVW R30,R26
000358 01d0      	MOVW R26,R0
000359 9508      	RET
                 
                 __DIVW21:
00035a d01c      	RCALL __CHKSIGNW
00035b dfeb      	RCALL __DIVW21U
00035c f40e      	BRTC __DIVW211
00035d dfe5      	RCALL __ANEGW1
                 __DIVW211:
00035e 9508      	RET
                 
                 __MODW21:
00035f 94e8      	CLT
000360 ffb7      	SBRS R27,7
000361 c004      	RJMP __MODW211
000362 95b1      	NEG  R27
000363 95a1      	NEG  R26
000364 40b0      	SBCI R27,0
000365 9468      	SET
                 __MODW211:
000366 fdf7      	SBRC R31,7
000367 dfdb      	RCALL __ANEGW1
000368 dfde      	RCALL __DIVW21U
000369 01fd      	MOVW R30,R26
00036a f40e      	BRTC __MODW212
00036b dfd7      	RCALL __ANEGW1
                 __MODW212:
00036c 9508      	RET
                 
                 __MANDW12:
00036d 94e8      	CLT
00036e fff7      	SBRS R31,7
00036f c002      	RJMP __MANDW121
000370 dfd2      	RCALL __ANEGW1
000371 9468      	SET
                 __MANDW121:
000372 23ea      	AND  R30,R26
000373 23fb      	AND  R31,R27
000374 f40e      	BRTC __MANDW122
000375 dfcd      	RCALL __ANEGW1
                 __MANDW122:
000376 9508      	RET
                 
                 __CHKSIGNW:
000377 94e8      	CLT
000378 fff7      	SBRS R31,7
000379 c002      	RJMP __CHKSW1
00037a dfc8      	RCALL __ANEGW1
00037b 9468      	SET
                 __CHKSW1:
00037c ffb7      	SBRS R27,7
00037d c006      	RJMP __CHKSW2
00037e 95b1      	NEG  R27
00037f 95a1      	NEG  R26
000380 40b0      	SBCI R27,0
000381 f800      	BLD  R0,0
000382 9403      	INC  R0
000383 fa00      	BST  R0,0
                 __CHKSW2:
000384 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  14 r1 :   5 r2 :   0 r3 :   0 r4 :   5 r5 :   1 r6 :  19 r7 :  16 
r8 :   9 r9 :   2 r10:   8 r11:   2 r12:  27 r13:   8 r14:   0 r15:   0 
r16:   5 r17:   7 r18:   5 r19:   5 r20:   5 r21:   5 r22:   2 r23:   0 
r24:   9 r25:   4 r26: 102 r27:  20 r28:   4 r29:   1 r30: 233 r31:  94 
x  :   3 y  :  84 z  :   8 
Registers used: 30 out of 35 (85.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   4 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   3 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   4 brne  :  27 brpl  :   0 brsh  :   1 brtc  :   3 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :  18 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   0 
cp    :  20 cpc   :  19 cpi   :   4 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  10 inc   :   1 jmp   :  24 ld    :  12 ldd   :  14 ldi   : 143 
lds   :   5 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   7 movw  :  53 
mul   :   0 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   3 
ori   :   2 out   :  58 pop   :   2 push  :   2 rcall : 147 ret   :  33 
reti  :   0 rjmp  :  42 rol   :   3 ror   :   0 sbc   :   1 sbci  :   6 
sbi   :  19 sbic  :   0 sbis  :   1 sbiw  :   4 sbr   :   1 sbrc  :   2 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  62 std   :   0 sts   :   9 sub   :   1 subi  :  11 swap  :   2 
tst   :   4 wdr   :   0 
Instructions used: 60 out of 116 (51.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00070a   1766     36   1802   16384  11.0%
[.dseg] 0x000060 0x000167      0      7      7    1024   0.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
