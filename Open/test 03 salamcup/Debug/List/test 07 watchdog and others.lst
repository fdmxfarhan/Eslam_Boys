
AVRASM ver. 2.1.30  D:\project\Eslam boys\Open\test 03 salamcup\Debug\List\test 07 watchdog and others.asm Mon Mar 12 11:18:35 2018

D:\project\Eslam boys\Open\test 03 salamcup\Debug\List\test 07 watchdog and others.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\project\Eslam boys\Open\test 03 salamcup\Debug\List\test 07 watchdog and others.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\project\Eslam boys\Open\test 03 salamcup\Debug\List\test 07 watchdog and others.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\project\Eslam boys\Open\test 03 salamcup\Debug\List\test 07 watchdog and others.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\project\Eslam boys\Open\test 03 salamcup\Debug\List\test 07 watchdog and others.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\project\Eslam boys\Open\test 03 salamcup\Debug\List\test 07 watchdog and others.asm(1093): warning: Register r9 already defined by the .DEF directive
D:\project\Eslam boys\Open\test 03 salamcup\Debug\List\test 07 watchdog and others.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\project\Eslam boys\Open\test 03 salamcup\Debug\List\test 07 watchdog and others.asm(1095): warning: Register r11 already defined by the .DEF directive
D:\project\Eslam boys\Open\test 03 salamcup\Debug\List\test 07 watchdog and others.asm(1096): warning: Register r12 already defined by the .DEF directive
D:\project\Eslam boys\Open\test 03 salamcup\Debug\List\test 07 watchdog and others.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _SR=R4
                 	.DEF _SR_msb=R5
                 	.DEF _SB=R6
                 	.DEF _SB_msb=R7
                 	.DEF _SL=R8
                 	.DEF _SL_msb=R9
                 	.DEF _SKF=R10
                 	.DEF _SKF_msb=R11
                 	.DEF _SKL=R12
                 	.DEF _SKL_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x6:
D:\project\Eslam boys\Open\test 03 salamcup\Debug\List\test 07 watchdog and others.asm(1129): warning: .cseg .db misalignment - padding zero byte
00002a 0096      	.DB  0x96
                 _0x7:
D:\project\Eslam boys\Open\test 03 salamcup\Debug\List\test 07 watchdog and others.asm(1131): warning: .cseg .db misalignment - padding zero byte
00002b 0054      	.DB  0x54
                 _0x0:
00002c 3d58
00002d 5900
00002e 003d      	.DB  0x58,0x3D,0x0,0x59,0x3D,0x0
                 _0x2000003:
00002f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000030 0001      	.DW  0x01
000031 0166      	.DW  _v
000032 0054      	.DW  _0x6*2
                 
000033 0001      	.DW  0x01
000034 016a      	.DW  _addres
000035 0056      	.DW  _0x7*2
                 
000036 0002      	.DW  0x02
000037 0179      	.DW  __base_y_G100
000038 005e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000039 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003a 94f8      	CLI
00003b 27ee      	CLR  R30
00003c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003d e0f1      	LDI  R31,1
00003e bffb      	OUT  GICR,R31
00003f bfeb      	OUT  GICR,R30
000040 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000041 e08d      	LDI  R24,(14-2)+1
000042 e0a2      	LDI  R26,2
000043 27bb      	CLR  R27
                 __CLEAR_REG:
000044 93ed      	ST   X+,R30
000045 958a      	DEC  R24
000046 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000047 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000048 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000049 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004a 93ed      	ST   X+,R30
00004b 9701      	SBIW R24,1
00004c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004d e6e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004f 9185      	LPM  R24,Z+
000050 9195      	LPM  R25,Z+
000051 9700      	SBIW R24,0
000052 f061      	BREQ __GLOBAL_INI_END
000053 91a5      	LPM  R26,Z+
000054 91b5      	LPM  R27,Z+
000055 9005      	LPM  R0,Z+
000056 9015      	LPM  R1,Z+
000057 01bf      	MOVW R22,R30
000058 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000059 9005      	LPM  R0,Z+
00005a 920d      	ST   X+,R0
00005b 9701      	SBIW R24,1
00005c f7e1      	BRNE __GLOBAL_INI_LOOP
00005d 01fb      	MOVW R30,R22
00005e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000060 bfed      	OUT  SPL,R30
000061 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000062 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000063 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000064 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000065 940c 04c5 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <i2c.h>
                 ;
                 ;#asm
                     .equ __lcd_port=0x15;PORTC
                 ; 0000 0007 #endasm
                 ;#include <lcd.h>
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 000B {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 000C ADMUX=adc_input | ADC_VREF_TYPE;
000067 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000068 81e8      	LD   R30,Y
000069 64e0      	ORI  R30,0x40
00006a b9e7      	OUT  0x7,R30
                 ; 0000 000D // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 000E delay_us(10);
                +
00006b e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00006c 958a     +DEC R24
00006d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 000F // Start the AD conversion
                 ; 0000 0010 ADCSRA|=(1<<ADSC);
00006e 9a36      	SBI  0x6,6
                 ; 0000 0011 // Wait for the AD conversion to complete
                 ; 0000 0012 while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
00006f 9b34      	SBIS 0x6,4
000070 cffe      	RJMP _0x3
                 ; 0000 0013 ADCSRA|=(1<<ADIF);
000071 9a34      	SBI  0x6,4
                 ; 0000 0014 return ADCW;
000072 b1e4      	IN   R30,0x4
000073 b1f5      	IN   R31,0x4+1
000074 9621      	ADIW R28,1
000075 9508      	RET
                 ; 0000 0015 }
                 ; .FEND
                 ;
                 ;
                 ;int SR,SB,SL,SKF,SKL,SKR,SKB;
                 ;int cmp;
                 ;eeprom int c;
                 ;int v=150;
                 
                 	.DSEG
                 ;int k;
                 ;
                 ;
                 ;
                 ;
                 ;#define I2C_7BIT_DEVICE_ADDRESS 0x54
                 ;#define EEPROM_BUS_ADDRES (I2C_7BIT_DEVICE_ADDRESS << 1)
                 ;
                 ;unsigned char addres=0x54;
                 ;/* read a byte from the EEPROM */
                 ;unsigned char read()
                 ; 0000 0027 {
                 
                 	.CSEG
                 _read:
                 ; .FSTART _read
                 ; 0000 0028 unsigned char data;
                 ; 0000 0029 i2c_start();
000076 931a      	ST   -Y,R17
                 ;	data -> R17
000077 940e 07ba 	CALL _i2c_start
                 ; 0000 002A i2c_write(EEPROM_BUS_ADDRES | 0);
000079 eaa8      	LDI  R26,LOW(168)
00007a 940e 07ee 	CALL _i2c_write
                 ; 0000 002B /*send MSB of address */
                 ; 0000 002C i2c_write(addres >> 8);
00007c 91a0 016a 	LDS  R26,_addres
00007e e0e8      	LDI  R30,LOW(8)
00007f 940e 0814 	CALL __LSRB12
000081 2fae      	MOV  R26,R30
000082 940e 07ee 	CALL _i2c_write
                 ; 0000 002D /* send LSB of address */
                 ; 0000 002E i2c_write((unsigned char) addres);
000084 91a0 016a 	LDS  R26,_addres
000086 940e 07ee 	CALL _i2c_write
                 ; 0000 002F i2c_start();
000088 940e 07ba 	CALL _i2c_start
                 ; 0000 0030 i2c_write(EEPROM_BUS_ADDRES | 1);
00008a eaa9      	LDI  R26,LOW(169)
00008b 940e 07ee 	CALL _i2c_write
                 ; 0000 0031 data=i2c_read(0);
00008d e0a0      	LDI  R26,LOW(0)
00008e 940e 07d3 	CALL _i2c_read
000090 2f1e      	MOV  R17,R30
                 ; 0000 0032 i2c_stop();
000091 940e 07c9 	CALL _i2c_stop
                 ; 0000 0033 return data;
000093 2fe1      	MOV  R30,R17
000094 9119      	LD   R17,Y+
000095 9508      	RET
                 ; 0000 0034 }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;#define EEPROM_BUS_ADDRESS 0xc0
                 ;unsigned char compass_read(unsigned char address)
                 ; 0000 003B  {
                 _compass_read:
                 ; .FSTART _compass_read
                 ; 0000 003C     unsigned char data;
                 ; 0000 003D     delay_us(100);
000096 93aa      	ST   -Y,R26
000097 931a      	ST   -Y,R17
                 ;	address -> Y+1
                 ;	data -> R17
000098 940e 06c9 	CALL SUBOPT_0x0
                 ; 0000 003E     i2c_start();
00009a 940e 07ba 	CALL _i2c_start
                 ; 0000 003F     delay_us(100);
00009c 940e 06c9 	CALL SUBOPT_0x0
                 ; 0000 0040     i2c_write(EEPROM_BUS_ADDRESS);
00009e eca0      	LDI  R26,LOW(192)
00009f 940e 06ce 	CALL SUBOPT_0x1
                 ; 0000 0041     delay_us(100);
                 ; 0000 0042     i2c_write(address);
0000a1 81a9      	LDD  R26,Y+1
0000a2 940e 06ce 	CALL SUBOPT_0x1
                 ; 0000 0043     delay_us(100);
                 ; 0000 0044     i2c_start();
0000a4 940e 07ba 	CALL _i2c_start
                 ; 0000 0045     delay_us(100);
0000a6 940e 06c9 	CALL SUBOPT_0x0
                 ; 0000 0046     i2c_write(EEPROM_BUS_ADDRESS | 1);
0000a8 eca1      	LDI  R26,LOW(193)
0000a9 940e 06ce 	CALL SUBOPT_0x1
                 ; 0000 0047     delay_us(100);
                 ; 0000 0048     data=i2c_read(0);
0000ab e0a0      	LDI  R26,LOW(0)
0000ac 940e 07d3 	CALL _i2c_read
0000ae 2f1e      	MOV  R17,R30
                 ; 0000 0049     delay_us(100);
0000af 940e 06c9 	CALL SUBOPT_0x0
                 ; 0000 004A     i2c_stop();
0000b1 940e 07c9 	CALL _i2c_stop
                 ; 0000 004B     delay_us(100);
0000b3 940e 06c9 	CALL SUBOPT_0x0
                 ; 0000 004C     return data;
0000b5 2fe1      	MOV  R30,R17
0000b6 8118      	LDD  R17,Y+0
0000b7 9622      	ADIW R28,2
0000b8 9508      	RET
                 ; 0000 004D  }
                 ; .FEND
                 ;
                 ;int x, y, w, h, ch, sn;
                 ;char a,out=0 ;
                 ;
                 ;void read_pixy()
                 ; 0000 0053       {
                 _read_pixy:
                 ; .FSTART _read_pixy
                 ; 0000 0054       a=read();
0000b9 940e 06d1 	CALL SUBOPT_0x2
                 ; 0000 0055       //b=getchar();
                 ; 0000 0056       if(a==0xaa)
0000bb 3aaa      	CPI  R26,LOW(0xAA)
0000bc f009      	BREQ PC+2
0000bd c05c      	RJMP _0x8
                 ; 0000 0057         {
                 ; 0000 0058         a=read();
0000be 940e 06d1 	CALL SUBOPT_0x2
                 ; 0000 0059         if(a==0x55){
0000c0 35a5      	CPI  R26,LOW(0x55)
0000c1 f009      	BREQ PC+2
0000c2 c057      	RJMP _0x9
                 ; 0000 005A         read();
0000c3 dfb2      	RCALL _read
                 ; 0000 005B         ch = read();
0000c4 dfb1      	RCALL _read
0000c5 e0f0      	LDI  R31,0
0000c6 940e 06d8 	CALL SUBOPT_0x3
                 ; 0000 005C         ch+= read() * 255;
0000c8 efaf      	LDI  R26,LOW(255)
0000c9 9fea      	MUL  R30,R26
0000ca 01f0      	MOVW R30,R0
0000cb 91a0 0173 	LDS  R26,_ch
0000cd 91b0 0174 	LDS  R27,_ch+1
0000cf 0fea      	ADD  R30,R26
0000d0 1ffb      	ADC  R31,R27
0000d1 940e 06d8 	CALL SUBOPT_0x3
                 ; 0000 005D         sn = read();
0000d3 e0f0      	LDI  R31,0
0000d4 940e 06de 	CALL SUBOPT_0x4
                 ; 0000 005E         sn += read() * 255;
0000d6 efaf      	LDI  R26,LOW(255)
0000d7 9fea      	MUL  R30,R26
0000d8 01f0      	MOVW R30,R0
0000d9 91a0 0175 	LDS  R26,_sn
0000db 91b0 0176 	LDS  R27,_sn+1
0000dd 0fea      	ADD  R30,R26
0000de 1ffb      	ADC  R31,R27
0000df 940e 06de 	CALL SUBOPT_0x4
                 ; 0000 005F         x = read();
0000e1 e0f0      	LDI  R31,0
0000e2 940e 06e4 	CALL SUBOPT_0x5
                 ; 0000 0060         x+=read()*255;
0000e4 efaf      	LDI  R26,LOW(255)
0000e5 9fea      	MUL  R30,R26
0000e6 01f0      	MOVW R30,R0
0000e7 940e 06ea 	CALL SUBOPT_0x6
0000e9 0fea      	ADD  R30,R26
0000ea 1ffb      	ADC  R31,R27
0000eb 940e 06e4 	CALL SUBOPT_0x5
                 ; 0000 0061         y = read();
0000ed e0f0      	LDI  R31,0
0000ee 940e 06ef 	CALL SUBOPT_0x7
                 ; 0000 0062         y += read() * 255;
0000f0 efaf      	LDI  R26,LOW(255)
0000f1 9fea      	MUL  R30,R26
0000f2 01f0      	MOVW R30,R0
0000f3 940e 06f5 	CALL SUBOPT_0x8
0000f5 0fea      	ADD  R30,R26
0000f6 1ffb      	ADC  R31,R27
0000f7 940e 06ef 	CALL SUBOPT_0x7
                 ; 0000 0063         w = read();
0000f9 e0f0      	LDI  R31,0
0000fa 940e 06fa 	CALL SUBOPT_0x9
                 ; 0000 0064         w += read() * 255;
0000fc efaf      	LDI  R26,LOW(255)
0000fd 9fea      	MUL  R30,R26
0000fe 01f0      	MOVW R30,R0
0000ff 91a0 016f 	LDS  R26,_w
000101 91b0 0170 	LDS  R27,_w+1
000103 0fea      	ADD  R30,R26
000104 1ffb      	ADC  R31,R27
000105 940e 06fa 	CALL SUBOPT_0x9
                 ; 0000 0065         h = read();
000107 e0f0      	LDI  R31,0
000108 93e0 0171 	STS  _h,R30
00010a 93f0 0172 	STS  _h+1,R31
                 ; 0000 0066         h += read() * 255;
00010c df69      	RCALL _read
00010d efaf      	LDI  R26,LOW(255)
00010e 9fea      	MUL  R30,R26
00010f 01f0      	MOVW R30,R0
000110 91a0 0171 	LDS  R26,_h
000112 91b0 0172 	LDS  R27,_h+1
000114 0fea      	ADD  R30,R26
000115 1ffb      	ADC  R31,R27
000116 93e0 0171 	STS  _h,R30
000118 93f0 0172 	STS  _h+1,R31
                 ; 0000 0067         }}
                 _0x9:
                 ; 0000 0068       lcd_gotoxy(0,0);
                 _0x8:
00011a e0e0      	LDI  R30,LOW(0)
00011b 940e 0700 	CALL SUBOPT_0xA
                 ; 0000 0069       lcd_putsf("X=");
                +
00011d e5a8     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
00011e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
00011f 940e 0677 	CALL _lcd_putsf
                 ; 0000 006A       lcd_putchar((x/100)%10+'0');
000121 940e 06ea 	CALL SUBOPT_0x6
000123 940e 0704 	CALL SUBOPT_0xB
                 ; 0000 006B       lcd_putchar((x/10)%10+'0');
000125 940e 06ea 	CALL SUBOPT_0x6
000127 940e 0711 	CALL SUBOPT_0xC
                 ; 0000 006C       lcd_putchar((x/1)%10+'0');
000129 940e 06ea 	CALL SUBOPT_0x6
00012b 940e 071e 	CALL SUBOPT_0xD
                 ; 0000 006D 
                 ; 0000 006E       lcd_gotoxy(6,0);
00012d e0e6      	LDI  R30,LOW(6)
00012e 940e 0700 	CALL SUBOPT_0xA
                 ; 0000 006F       lcd_putsf("Y=");
                +
000130 e5ab     +LDI R26 , LOW ( 2 * _0x0 + ( 3 ) )
000131 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 3 ) )
                 	__POINTW2FN _0x0,3
000132 940e 0677 	CALL _lcd_putsf
                 ; 0000 0070       lcd_putchar((y/100)%10+'0');
000134 940e 06f5 	CALL SUBOPT_0x8
000136 940e 0704 	CALL SUBOPT_0xB
                 ; 0000 0071       lcd_putchar((y/10)%10+'0');
000138 940e 06f5 	CALL SUBOPT_0x8
00013a 940e 0711 	CALL SUBOPT_0xC
                 ; 0000 0072       lcd_putchar((y/1)%10+'0');
00013c 940e 06f5 	CALL SUBOPT_0x8
00013e 940e 071e 	CALL SUBOPT_0xD
                 ; 0000 0073       }
000140 9508      	RET
                 ; .FEND
                 ;
                 ;void sensor()
                 ; 0000 0076     {
                 _sensor:
                 ; .FSTART _sensor
                 ; 0000 0077     #asm("wdr");
000141 95a8      	wdr
                 ; 0000 0078     if(PINC.3==1) c = compass_read(1);
000142 9b9b      	SBIS 0x13,3
000143 c007      	RJMP _0xA
000144 e0a1      	LDI  R26,LOW(1)
000145 df50      	RCALL _compass_read
000146 e0a0      	LDI  R26,LOW(_c)
000147 e0b0      	LDI  R27,HIGH(_c)
000148 e0f0      	LDI  R31,0
000149 940e 086d 	CALL __EEPROMWRW
                 ; 0000 0079     {
                 _0xA:
                 ; 0000 007A     #asm("wdr");
00014b 95a8      	wdr
                 ; 0000 007B     SB=read_adc(1);
00014c e0a1      	LDI  R26,LOW(1)
00014d df19      	RCALL _read_adc
00014e 013f      	MOVW R6,R30
                 ; 0000 007C     SR=read_adc(2);
00014f e0a2      	LDI  R26,LOW(2)
000150 df16      	RCALL _read_adc
000151 012f      	MOVW R4,R30
                 ; 0000 007D     SL=read_adc(3);
000152 e0a3      	LDI  R26,LOW(3)
000153 df13      	RCALL _read_adc
000154 014f      	MOVW R8,R30
                 ; 0000 007E     SKF=read_adc(4);
000155 e0a4      	LDI  R26,LOW(4)
000156 df10      	RCALL _read_adc
000157 015f      	MOVW R10,R30
                 ; 0000 007F     SKR=read_adc(5);
000158 e0a5      	LDI  R26,LOW(5)
000159 df0d      	RCALL _read_adc
00015a 93e0 0160 	STS  _SKR,R30
00015c 93f0 0161 	STS  _SKR+1,R31
                 ; 0000 0080     SKL=read_adc(7);
00015e e0a7      	LDI  R26,LOW(7)
00015f df07      	RCALL _read_adc
000160 016f      	MOVW R12,R30
                 ; 0000 0081     SKB=read_adc(6);
000161 e0a6      	LDI  R26,LOW(6)
000162 df04      	RCALL _read_adc
000163 93e0 0162 	STS  _SKB,R30
000165 93f0 0163 	STS  _SKB+1,R31
                 ; 0000 0082     }
                 ; 0000 0083 
                 ; 0000 0084     {
                 ; 0000 0085     #asm("wdr");
000167 95a8      	wdr
                 ; 0000 0086     lcd_gotoxy(12,1);
000168 e0ec      	LDI  R30,LOW(12)
000169 940e 0726 	CALL SUBOPT_0xE
                 ; 0000 0087     //lcd_putchar('K');
                 ; 0000 0088     lcd_putchar((SKL/100)%10+'0');
00016b 01d6      	MOVW R26,R12
00016c 940e 0704 	CALL SUBOPT_0xB
                 ; 0000 0089     lcd_putchar((SKL/10)%10+'0');
00016e 01d6      	MOVW R26,R12
00016f 940e 0711 	CALL SUBOPT_0xC
                 ; 0000 008A     lcd_putchar((SKL/1)%10+'0');
000171 01d6      	MOVW R26,R12
000172 940e 071e 	CALL SUBOPT_0xD
                 ; 0000 008B     lcd_gotoxy(8,1);
000174 e0e8      	LDI  R30,LOW(8)
000175 940e 0726 	CALL SUBOPT_0xE
                 ; 0000 008C     //lcd_putchar('B');
                 ; 0000 008D     lcd_putchar((SKB/100)%10+'0');
000177 940e 072a 	CALL SUBOPT_0xF
000179 940e 0704 	CALL SUBOPT_0xB
                 ; 0000 008E     lcd_putchar((SKB/10)%10+'0');
00017b 940e 072a 	CALL SUBOPT_0xF
00017d 940e 0711 	CALL SUBOPT_0xC
                 ; 0000 008F     lcd_putchar((SKB/1)%10+'0');
00017f 940e 072a 	CALL SUBOPT_0xF
000181 940e 071e 	CALL SUBOPT_0xD
                 ; 0000 0090     lcd_gotoxy(4,1);
000183 e0e4      	LDI  R30,LOW(4)
000184 940e 0726 	CALL SUBOPT_0xE
                 ; 0000 0091     //lcd_putchar('R');
                 ; 0000 0092     lcd_putchar((SKR/100)%10+'0');
000186 940e 072f 	CALL SUBOPT_0x10
000188 940e 0704 	CALL SUBOPT_0xB
                 ; 0000 0093     lcd_putchar((SKR/10)%10+'0');
00018a 940e 072f 	CALL SUBOPT_0x10
00018c 940e 0711 	CALL SUBOPT_0xC
                 ; 0000 0094     lcd_putchar((SKR/1)%10+'0');
00018e 940e 072f 	CALL SUBOPT_0x10
000190 940e 071e 	CALL SUBOPT_0xD
                 ; 0000 0095 
                 ; 0000 0096     lcd_gotoxy(0,1);
000192 e0e0      	LDI  R30,LOW(0)
000193 940e 0726 	CALL SUBOPT_0xE
                 ; 0000 0097     lcd_putchar((SKF/100)%10+'0');
000195 01d5      	MOVW R26,R10
000196 940e 0704 	CALL SUBOPT_0xB
                 ; 0000 0098     lcd_putchar((SKF/10)%10+'0');
000198 01d5      	MOVW R26,R10
000199 940e 0711 	CALL SUBOPT_0xC
                 ; 0000 0099     lcd_putchar((SKF/1)%10+'0');
00019b 01d5      	MOVW R26,R10
00019c 940e 071e 	CALL SUBOPT_0xD
                 ; 0000 009A 
                 ; 0000 009B //    lcd_gotoxy(0,1);
                 ; 0000 009C //    //lcd_putchar('K');
                 ; 0000 009D //    lcd_putchar((SL/100)%10+'0');
                 ; 0000 009E //    lcd_putchar((SL/10)%10+'0');
                 ; 0000 009F //    lcd_putchar((SL/1)%10+'0');
                 ; 0000 00A0 //    lcd_gotoxy(4,1);
                 ; 0000 00A1 //    //lcd_putchar('B');
                 ; 0000 00A2 //    lcd_putchar((SB/100)%10+'0');
                 ; 0000 00A3 //    lcd_putchar((SB/10)%10+'0');
                 ; 0000 00A4 //    lcd_putchar((SB/1)%10+'0');
                 ; 0000 00A5 //    lcd_gotoxy(8,1);
                 ; 0000 00A6 //    //lcd_putchar('R');
                 ; 0000 00A7 //    lcd_putchar((SR/100)%10+'0');
                 ; 0000 00A8 //    lcd_putchar((SR/10)%10+'0');
                 ; 0000 00A9 //    lcd_putchar((SR/1)%10+'0');
                 ; 0000 00AA     }
                 ; 0000 00AB 
                 ; 0000 00AC     k=SL-SR;
00019e 01f4      	MOVW R30,R8
00019f 19e4      	SUB  R30,R4
0001a0 09f5      	SBC  R31,R5
0001a1 93e0 0168 	STS  _k,R30
0001a3 93f0 0169 	STS  _k+1,R31
                 ; 0000 00AD 
                 ; 0000 00AE 
                 ; 0000 00AF     {
                 ; 0000 00B0     #asm("wdr");
0001a5 95a8      	wdr
                 ; 0000 00B1     cmp=compass_read(1)-c;
0001a6 e0a1      	LDI  R26,LOW(1)
0001a7 deee      	RCALL _compass_read
0001a8 2e0e      	MOV  R0,R30
0001a9 2411      	CLR  R1
0001aa e0a0      	LDI  R26,LOW(_c)
0001ab e0b0      	LDI  R27,HIGH(_c)
0001ac 940e 085d 	CALL __EEPROMRDW
0001ae 01d0      	MOVW R26,R0
0001af 1bae      	SUB  R26,R30
0001b0 0bbf      	SBC  R27,R31
0001b1 93a0 0164 	STS  _cmp,R26
0001b3 93b0 0165 	STS  _cmp+1,R27
                 ; 0000 00B2 
                 ; 0000 00B3     if (SL < SR && k>50)
                +
0001b5 1484     +CP R8 , R4
0001b6 0495     +CPC R9 , R5
                 	__CPWRR 8,9,4,5
0001b7 f424      	BRGE _0xC
0001b8 940e 0734 	CALL SUBOPT_0x11
0001ba 97d3      	SBIW R26,51
0001bb f40c      	BRGE _0xD
                 _0xC:
0001bc c004      	RJMP _0xB
                 _0xD:
                 ; 0000 00B4         {
                 ; 0000 00B5         cmp = SR/32;
0001bd 01d2      	MOVW R26,R4
0001be e2e0      	LDI  R30,LOW(32)
0001bf e0f0      	LDI  R31,HIGH(32)
0001c0 c00d      	RJMP _0xB1
                 ; 0000 00B6         v = 200;
                 ; 0000 00B7         }
                 ; 0000 00B8     else if (SR <= SL && k<-50)
                 _0xB:
                +
0001c1 1484     +CP R8 , R4
0001c2 0495     +CPC R9 , R5
                 	__CPWRR 8,9,4,5
0001c3 f034      	BRLT _0x10
0001c4 940e 0734 	CALL SUBOPT_0x11
0001c6 3cae      	CPI  R26,LOW(0xFFCE)
0001c7 efef      	LDI  R30,HIGH(0xFFCE)
0001c8 07be      	CPC  R27,R30
0001c9 f00c      	BRLT _0x11
                 _0x10:
0001ca c00d      	RJMP _0xF
                 _0x11:
                 ; 0000 00B9         {
                 ; 0000 00BA         cmp = SL/10;
0001cb 01d4      	MOVW R26,R8
0001cc e0ea      	LDI  R30,LOW(10)
0001cd e0f0      	LDI  R31,HIGH(10)
                 _0xB1:
0001ce 940e 083c 	CALL __DIVW21
0001d0 940e 0739 	CALL SUBOPT_0x12
                 ; 0000 00BB         v = 200;
0001d2 ece8      	LDI  R30,LOW(200)
0001d3 e0f0      	LDI  R31,HIGH(200)
0001d4 93e0 0166 	STS  _v,R30
0001d6 93f0 0167 	STS  _v+1,R31
                 ; 0000 00BC         }
                 ; 0000 00BD 
                 ; 0000 00BE 
                 ; 0000 00BF     if(cmp>128)  cmp=cmp-255;
                 _0xF:
0001d8 940e 073e 	CALL SUBOPT_0x13
0001da 38a1      	CPI  R26,LOW(0x81)
0001db e0e0      	LDI  R30,HIGH(0x81)
0001dc 07be      	CPC  R27,R30
0001dd f034      	BRLT _0x12
0001de 940e 0743 	CALL SUBOPT_0x14
0001e0 5fef      	SUBI R30,LOW(255)
0001e1 40f0      	SBCI R31,HIGH(255)
0001e2 940e 0739 	CALL SUBOPT_0x12
                 ; 0000 00C0     if(cmp<-128) cmp=cmp+255;
                 _0x12:
0001e4 940e 073e 	CALL SUBOPT_0x13
0001e6 38a0      	CPI  R26,LOW(0xFF80)
0001e7 efef      	LDI  R30,HIGH(0xFF80)
0001e8 07be      	CPC  R27,R30
0001e9 f434      	BRGE _0x13
0001ea 940e 0743 	CALL SUBOPT_0x14
0001ec 50e1      	SUBI R30,LOW(-255)
0001ed 4fff      	SBCI R31,HIGH(-255)
0001ee 940e 0739 	CALL SUBOPT_0x12
                 ; 0000 00C1     if (SB < 150 && SR > 250 && SR < 150)
                 _0x13:
0001f0 e9e6      	LDI  R30,LOW(150)
0001f1 e0f0      	LDI  R31,HIGH(150)
0001f2 166e      	CP   R6,R30
0001f3 067f      	CPC  R7,R31
0001f4 f454      	BRGE _0x15
0001f5 efea      	LDI  R30,LOW(250)
0001f6 e0f0      	LDI  R31,HIGH(250)
0001f7 15e4      	CP   R30,R4
0001f8 05f5      	CPC  R31,R5
0001f9 f42c      	BRGE _0x15
0001fa e9e6      	LDI  R30,LOW(150)
0001fb e0f0      	LDI  R31,HIGH(150)
0001fc 164e      	CP   R4,R30
0001fd 065f      	CPC  R5,R31
0001fe f00c      	BRLT _0x16
                 _0x15:
0001ff c002      	RJMP _0x14
                 _0x16:
                 ; 0000 00C2         {
                 ; 0000 00C3         cmp = cmp+((SR*3)/20);
000200 01f2      	MOVW R30,R4
000201 c011      	RJMP _0xB2
                 ; 0000 00C4         }
                 ; 0000 00C5     else if (SB < 150 && SL > 250 && SL < 150)
                 _0x14:
000202 e9e6      	LDI  R30,LOW(150)
000203 e0f0      	LDI  R31,HIGH(150)
000204 166e      	CP   R6,R30
000205 067f      	CPC  R7,R31
000206 f454      	BRGE _0x19
000207 efea      	LDI  R30,LOW(250)
000208 e0f0      	LDI  R31,HIGH(250)
000209 15e8      	CP   R30,R8
00020a 05f9      	CPC  R31,R9
00020b f42c      	BRGE _0x19
00020c e9e6      	LDI  R30,LOW(150)
00020d e0f0      	LDI  R31,HIGH(150)
00020e 168e      	CP   R8,R30
00020f 069f      	CPC  R9,R31
000210 f00c      	BRLT _0x1A
                 _0x19:
000211 c010      	RJMP _0x18
                 _0x1A:
                 ; 0000 00C6         {
                 ; 0000 00C7         cmp = cmp+((SL*3)/20);
000212 01f4      	MOVW R30,R8
                 _0xB2:
000213 e0a3      	LDI  R26,LOW(3)
000214 e0b0      	LDI  R27,HIGH(3)
000215 940e 0824 	CALL __MULW12
000217 01df      	MOVW R26,R30
000218 e1e4      	LDI  R30,LOW(20)
000219 e0f0      	LDI  R31,HIGH(20)
00021a 940e 083c 	CALL __DIVW21
00021c 940e 073e 	CALL SUBOPT_0x13
00021e 0fea      	ADD  R30,R26
00021f 1ffb      	ADC  R31,R27
000220 940e 0739 	CALL SUBOPT_0x12
                 ; 0000 00C8         }
                 ; 0000 00C9         lcd_gotoxy(11,0);
                 _0x18:
000222 e0eb      	LDI  R30,LOW(11)
000223 940e 0700 	CALL SUBOPT_0xA
                 ; 0000 00CA     if(cmp>=0)
000225 91a0 0165 	LDS  R26,_cmp+1
000227 23aa      	TST  R26
000228 f072      	BRMI _0x1B
                 ; 0000 00CB         {
                 ; 0000 00CC         lcd_putchar('+');
000229 e2ab      	LDI  R26,LOW(43)
00022a 940e 0650 	CALL _lcd_putchar
                 ; 0000 00CD         lcd_putchar((cmp/100)%10+'0');
00022c 940e 073e 	CALL SUBOPT_0x13
00022e 940e 0704 	CALL SUBOPT_0xB
                 ; 0000 00CE         lcd_putchar((cmp/10)%10+'0');
000230 940e 073e 	CALL SUBOPT_0x13
000232 940e 0711 	CALL SUBOPT_0xC
                 ; 0000 00CF         lcd_putchar((cmp/1)%10+'0');
000234 940e 073e 	CALL SUBOPT_0x13
000236 c00d      	RJMP _0xB3
                 ; 0000 00D0         }
                 ; 0000 00D1     else
                 _0x1B:
                 ; 0000 00D2         {
                 ; 0000 00D3         lcd_putchar('-');
000237 e2ad      	LDI  R26,LOW(45)
000238 940e 0650 	CALL _lcd_putchar
                 ; 0000 00D4         lcd_putchar((-cmp/100)%10+'0');
00023a 940e 0748 	CALL SUBOPT_0x15
00023c 940e 0704 	CALL SUBOPT_0xB
                 ; 0000 00D5         lcd_putchar((-cmp/10)%10+'0');
00023e 940e 0748 	CALL SUBOPT_0x15
000240 940e 0711 	CALL SUBOPT_0xC
                 ; 0000 00D6         lcd_putchar((-cmp/1)%10+'0');
000242 940e 0748 	CALL SUBOPT_0x15
                 _0xB3:
000244 e0ea      	LDI  R30,LOW(10)
000245 e0f0      	LDI  R31,HIGH(10)
000246 940e 0841 	CALL __MODW21
000248 5de0      	SUBI R30,-LOW(48)
000249 2fae      	MOV  R26,R30
00024a 940e 0650 	CALL _lcd_putchar
                 ; 0000 00D7         }
                 ; 0000 00D8         }
                 ; 0000 00D9 
                 ; 0000 00DA 
                 ; 0000 00DB     if (cmp > -15 && cmp < 15)
00024c 940e 073e 	CALL SUBOPT_0x13
00024e efe1      	LDI  R30,LOW(65521)
00024f efff      	LDI  R31,HIGH(65521)
000250 17ea      	CP   R30,R26
000251 07fb      	CPC  R31,R27
000252 f424      	BRGE _0x1E
000253 940e 073e 	CALL SUBOPT_0x13
000255 971f      	SBIW R26,15
000256 f00c      	BRLT _0x1F
                 _0x1E:
000257 c005      	RJMP _0x1D
                 _0x1F:
                 ; 0000 00DC     {
                 ; 0000 00DD         cmp*=-3;
000258 940e 0743 	CALL SUBOPT_0x14
00025a efad      	LDI  R26,LOW(65533)
00025b efbf      	LDI  R27,HIGH(65533)
00025c c004      	RJMP _0xB4
                 ; 0000 00DE     }
                 ; 0000 00DF     else
                 _0x1D:
                 ; 0000 00E0     {
                 ; 0000 00E1         cmp*=-2;
00025d 940e 0743 	CALL SUBOPT_0x14
00025f efae      	LDI  R26,LOW(65534)
000260 efbf      	LDI  R27,HIGH(65534)
                 _0xB4:
000261 940e 0824 	CALL __MULW12
000263 940e 0739 	CALL SUBOPT_0x12
                 ; 0000 00E2     }
                 ; 0000 00E3     }
000265 9508      	RET
                 ; .FEND
                 ;
                 ;void motor(int ml1,int ml2,int mr2,int mr1)
                 ; 0000 00E6     {
                 _motor:
                 ; .FSTART _motor
                 ; 0000 00E7     sensor();
000266 93ba      	ST   -Y,R27
000267 93aa      	ST   -Y,R26
                 ;	ml1 -> Y+6
                 ;	ml2 -> Y+4
                 ;	mr2 -> Y+2
                 ;	mr1 -> Y+0
000268 ded8      	RCALL _sensor
                 ; 0000 00E8     #asm("wdr");
000269 95a8      	wdr
                 ; 0000 00E9     {
                 ; 0000 00EA     ml1+=cmp;
00026a 940e 0743 	CALL SUBOPT_0x14
00026c 81ae      	LDD  R26,Y+6
00026d 81bf      	LDD  R27,Y+6+1
00026e 0fea      	ADD  R30,R26
00026f 1ffb      	ADC  R31,R27
000270 83ee      	STD  Y+6,R30
000271 83ff      	STD  Y+6+1,R31
                 ; 0000 00EB     ml2+=cmp;
000272 940e 0743 	CALL SUBOPT_0x14
000274 81ac      	LDD  R26,Y+4
000275 81bd      	LDD  R27,Y+4+1
000276 0fea      	ADD  R30,R26
000277 1ffb      	ADC  R31,R27
000278 83ec      	STD  Y+4,R30
000279 83fd      	STD  Y+4+1,R31
                 ; 0000 00EC     mr2+=cmp;
00027a 940e 0743 	CALL SUBOPT_0x14
00027c 81aa      	LDD  R26,Y+2
00027d 81bb      	LDD  R27,Y+2+1
00027e 0fea      	ADD  R30,R26
00027f 1ffb      	ADC  R31,R27
000280 83ea      	STD  Y+2,R30
000281 83fb      	STD  Y+2+1,R31
                 ; 0000 00ED     mr1+=cmp;
000282 940e 0743 	CALL SUBOPT_0x14
000284 81a8      	LD   R26,Y
000285 81b9      	LDD  R27,Y+1
000286 0fea      	ADD  R30,R26
000287 1ffb      	ADC  R31,R27
000288 83e8      	ST   Y,R30
000289 83f9      	STD  Y+1,R31
                 ; 0000 00EE     }
                 ; 0000 00EF     {
                 ; 0000 00F0     if(ml1>255) ml1=255;
00028a 81ae      	LDD  R26,Y+6
00028b 81bf      	LDD  R27,Y+6+1
00028c 30a0      	CPI  R26,LOW(0x100)
00028d e0e1      	LDI  R30,HIGH(0x100)
00028e 07be      	CPC  R27,R30
00028f f024      	BRLT _0x21
000290 efef      	LDI  R30,LOW(255)
000291 e0f0      	LDI  R31,HIGH(255)
000292 83ee      	STD  Y+6,R30
000293 83ff      	STD  Y+6+1,R31
                 ; 0000 00F1     if(ml2>255) ml2=255;
                 _0x21:
000294 81ac      	LDD  R26,Y+4
000295 81bd      	LDD  R27,Y+4+1
000296 30a0      	CPI  R26,LOW(0x100)
000297 e0e1      	LDI  R30,HIGH(0x100)
000298 07be      	CPC  R27,R30
000299 f024      	BRLT _0x22
00029a efef      	LDI  R30,LOW(255)
00029b e0f0      	LDI  R31,HIGH(255)
00029c 83ec      	STD  Y+4,R30
00029d 83fd      	STD  Y+4+1,R31
                 ; 0000 00F2     if(mr2>255) mr2=255;
                 _0x22:
00029e 81aa      	LDD  R26,Y+2
00029f 81bb      	LDD  R27,Y+2+1
0002a0 30a0      	CPI  R26,LOW(0x100)
0002a1 e0e1      	LDI  R30,HIGH(0x100)
0002a2 07be      	CPC  R27,R30
0002a3 f024      	BRLT _0x23
0002a4 efef      	LDI  R30,LOW(255)
0002a5 e0f0      	LDI  R31,HIGH(255)
0002a6 83ea      	STD  Y+2,R30
0002a7 83fb      	STD  Y+2+1,R31
                 ; 0000 00F3     if(mr1>255) mr1=255;
                 _0x23:
0002a8 81a8      	LD   R26,Y
0002a9 81b9      	LDD  R27,Y+1
0002aa 30a0      	CPI  R26,LOW(0x100)
0002ab e0e1      	LDI  R30,HIGH(0x100)
0002ac 07be      	CPC  R27,R30
0002ad f024      	BRLT _0x24
0002ae efef      	LDI  R30,LOW(255)
0002af e0f0      	LDI  R31,HIGH(255)
0002b0 83e8      	ST   Y,R30
0002b1 83f9      	STD  Y+1,R31
                 ; 0000 00F4 
                 ; 0000 00F5     if(ml1<-255) ml1=-255;
                 _0x24:
0002b2 81ae      	LDD  R26,Y+6
0002b3 81bf      	LDD  R27,Y+6+1
0002b4 30a1      	CPI  R26,LOW(0xFF01)
0002b5 efef      	LDI  R30,HIGH(0xFF01)
0002b6 07be      	CPC  R27,R30
0002b7 f424      	BRGE _0x25
0002b8 e0e1      	LDI  R30,LOW(65281)
0002b9 efff      	LDI  R31,HIGH(65281)
0002ba 83ee      	STD  Y+6,R30
0002bb 83ff      	STD  Y+6+1,R31
                 ; 0000 00F6     if(ml2<-255) ml2=-255;
                 _0x25:
0002bc 81ac      	LDD  R26,Y+4
0002bd 81bd      	LDD  R27,Y+4+1
0002be 30a1      	CPI  R26,LOW(0xFF01)
0002bf efef      	LDI  R30,HIGH(0xFF01)
0002c0 07be      	CPC  R27,R30
0002c1 f424      	BRGE _0x26
0002c2 e0e1      	LDI  R30,LOW(65281)
0002c3 efff      	LDI  R31,HIGH(65281)
0002c4 83ec      	STD  Y+4,R30
0002c5 83fd      	STD  Y+4+1,R31
                 ; 0000 00F7     if(mr2<-255) mr2=-255;
                 _0x26:
0002c6 81aa      	LDD  R26,Y+2
0002c7 81bb      	LDD  R27,Y+2+1
0002c8 30a1      	CPI  R26,LOW(0xFF01)
0002c9 efef      	LDI  R30,HIGH(0xFF01)
0002ca 07be      	CPC  R27,R30
0002cb f424      	BRGE _0x27
0002cc e0e1      	LDI  R30,LOW(65281)
0002cd efff      	LDI  R31,HIGH(65281)
0002ce 83ea      	STD  Y+2,R30
0002cf 83fb      	STD  Y+2+1,R31
                 ; 0000 00F8     if(mr1<-255) mr1=-255;
                 _0x27:
0002d0 81a8      	LD   R26,Y
0002d1 81b9      	LDD  R27,Y+1
0002d2 30a1      	CPI  R26,LOW(0xFF01)
0002d3 efef      	LDI  R30,HIGH(0xFF01)
0002d4 07be      	CPC  R27,R30
0002d5 f424      	BRGE _0x28
0002d6 e0e1      	LDI  R30,LOW(65281)
0002d7 efff      	LDI  R31,HIGH(65281)
0002d8 83e8      	ST   Y,R30
0002d9 83f9      	STD  Y+1,R31
                 ; 0000 00F9     }
                 _0x28:
                 ; 0000 00FA     //////////////mr1
                 ; 0000 00FB     {
                 ; 0000 00FC     if(mr1>=0)
0002da 81a9      	LDD  R26,Y+1
0002db 23aa      	TST  R26
0002dc f022      	BRMI _0x29
                 ; 0000 00FD         {
                 ; 0000 00FE         #asm("wdr");
0002dd 95a8      	wdr
                 ; 0000 00FF         PORTD.0=0;
0002de 9890      	CBI  0x12,0
                 ; 0000 0100         OCR0=mr1;
0002df 81e8      	LD   R30,Y
0002e0 c004      	RJMP _0xB5
                 ; 0000 0101         }
                 ; 0000 0102     else
                 _0x29:
                 ; 0000 0103         {
                 ; 0000 0104         #asm("wdr");
0002e1 95a8      	wdr
                 ; 0000 0105         PORTD.0=1;
0002e2 9a90      	SBI  0x12,0
                 ; 0000 0106         OCR0=mr1+255;
0002e3 81e8      	LD   R30,Y
0002e4 50e1      	SUBI R30,-LOW(255)
                 _0xB5:
0002e5 bfec      	OUT  0x3C,R30
                 ; 0000 0107         }
                 ; 0000 0108         }
                 ; 0000 0109     //////////////mr2
                 ; 0000 010A     {
                 ; 0000 010B     if(mr2>=0)
0002e6 81ab      	LDD  R26,Y+3
0002e7 23aa      	TST  R26
0002e8 f02a      	BRMI _0x2F
                 ; 0000 010C         {
                 ; 0000 010D         #asm("wdr");
0002e9 95a8      	wdr
                 ; 0000 010E         PORTD.1=0;
0002ea 9891      	CBI  0x12,1
                 ; 0000 010F         OCR1B=mr2;
0002eb 81ea      	LDD  R30,Y+2
0002ec 81fb      	LDD  R31,Y+2+1
0002ed c006      	RJMP _0xB6
                 ; 0000 0110         }
                 ; 0000 0111     else
                 _0x2F:
                 ; 0000 0112         {
                 ; 0000 0113         #asm("wdr");
0002ee 95a8      	wdr
                 ; 0000 0114         PORTD.1=1;
0002ef 9a91      	SBI  0x12,1
                 ; 0000 0115         OCR1B=mr2+255;
0002f0 81ea      	LDD  R30,Y+2
0002f1 81fb      	LDD  R31,Y+2+1
0002f2 50e1      	SUBI R30,LOW(-255)
0002f3 4fff      	SBCI R31,HIGH(-255)
                 _0xB6:
0002f4 bdf9      	OUT  0x28+1,R31
0002f5 bde8      	OUT  0x28,R30
                 ; 0000 0116         }
                 ; 0000 0117         }
                 ; 0000 0118     //////////////mL2
                 ; 0000 0119     {
                 ; 0000 011A     if(ml2>=0)
0002f6 81ad      	LDD  R26,Y+5
0002f7 23aa      	TST  R26
0002f8 f02a      	BRMI _0x35
                 ; 0000 011B         {
                 ; 0000 011C         #asm("wdr");
0002f9 95a8      	wdr
                 ; 0000 011D         PORTD.2=0;
0002fa 9892      	CBI  0x12,2
                 ; 0000 011E         OCR1A=ml2;
0002fb 81ec      	LDD  R30,Y+4
0002fc 81fd      	LDD  R31,Y+4+1
0002fd c006      	RJMP _0xB7
                 ; 0000 011F         }
                 ; 0000 0120     else
                 _0x35:
                 ; 0000 0121         {
                 ; 0000 0122         #asm("wdr");
0002fe 95a8      	wdr
                 ; 0000 0123         PORTD.2=1;
0002ff 9a92      	SBI  0x12,2
                 ; 0000 0124         OCR1A=ml2+255;
000300 81ec      	LDD  R30,Y+4
000301 81fd      	LDD  R31,Y+4+1
000302 50e1      	SUBI R30,LOW(-255)
000303 4fff      	SBCI R31,HIGH(-255)
                 _0xB7:
000304 bdfb      	OUT  0x2A+1,R31
000305 bdea      	OUT  0x2A,R30
                 ; 0000 0125         }
                 ; 0000 0126         }
                 ; 0000 0127     //////////////ml1
                 ; 0000 0128     {
                 ; 0000 0129     if(ml1>=0)
000306 81af      	LDD  R26,Y+7
000307 23aa      	TST  R26
000308 f022      	BRMI _0x3B
                 ; 0000 012A         {
                 ; 0000 012B         #asm("wdr");
000309 95a8      	wdr
                 ; 0000 012C         PORTD.3=0;
00030a 9893      	CBI  0x12,3
                 ; 0000 012D         OCR2=ml1;
00030b 81ee      	LDD  R30,Y+6
00030c c004      	RJMP _0xB8
                 ; 0000 012E         }
                 ; 0000 012F     else
                 _0x3B:
                 ; 0000 0130         {
                 ; 0000 0131         #asm("wdr");
00030d 95a8      	wdr
                 ; 0000 0132         PORTD.3=1;
00030e 9a93      	SBI  0x12,3
                 ; 0000 0133         OCR2=ml1+255;
00030f 81ee      	LDD  R30,Y+6
000310 50e1      	SUBI R30,-LOW(255)
                 _0xB8:
000311 bde3      	OUT  0x23,R30
                 ; 0000 0134         }
                 ; 0000 0135         }
                 ; 0000 0136 
                 ; 0000 0137     }
000312 9628      	ADIW R28,8
000313 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void move(int d)
                 ; 0000 013B     {
                 _move:
                 ; .FSTART _move
                 ; 0000 013C     if (d==0)       motor(v,v,-v,-v);
000314 93ba      	ST   -Y,R27
000315 93aa      	ST   -Y,R26
                 ;	d -> Y+0
000316 81e8      	LD   R30,Y
000317 81f9      	LDD  R31,Y+1
000318 9730      	SBIW R30,0
000319 f439      	BRNE _0x41
00031a 940e 074d 	CALL SUBOPT_0x16
00031c 940e 074d 	CALL SUBOPT_0x16
00031e 940e 0754 	CALL SUBOPT_0x17
000320 c0d2      	RJMP _0xB9
                 ; 0000 013D     else if (d==1)  motor(v,v/2,-v,-v/2);
                 _0x41:
000321 81a8      	LD   R26,Y
000322 81b9      	LDD  R27,Y+1
000323 9711      	SBIW R26,1
000324 f459      	BRNE _0x43
000325 940e 074d 	CALL SUBOPT_0x16
000327 940e 075b 	CALL SUBOPT_0x18
000329 940e 0764 	CALL SUBOPT_0x19
00032b 940e 0764 	CALL SUBOPT_0x19
00032d 940e 0767 	CALL SUBOPT_0x1A
00032f c0c7      	RJMP _0xBA
                 ; 0000 013E     else if (d==2)  motor(v,0,-v,0);
                 _0x43:
000330 81a8      	LD   R26,Y
000331 81b9      	LDD  R27,Y+1
000332 9712      	SBIW R26,2
000333 f449      	BRNE _0x45
000334 940e 074d 	CALL SUBOPT_0x16
000336 e0e0      	LDI  R30,LOW(0)
000337 e0f0      	LDI  R31,HIGH(0)
000338 940e 0764 	CALL SUBOPT_0x19
00033a 940e 076d 	CALL SUBOPT_0x1B
00033c c0bb      	RJMP _0xBB
                 ; 0000 013F     else if (d==3)  motor(v,-v/2,-v,v/2);
                 _0x45:
00033d 81a8      	LD   R26,Y
00033e 81b9      	LDD  R27,Y+1
00033f 9713      	SBIW R26,3
000340 f469      	BRNE _0x47
000341 940e 074d 	CALL SUBOPT_0x16
000343 940e 0754 	CALL SUBOPT_0x17
000345 940e 0767 	CALL SUBOPT_0x1A
000347 940e 0764 	CALL SUBOPT_0x19
000349 93fa      	ST   -Y,R31
00034a 93ea      	ST   -Y,R30
00034b 940e 075b 	CALL SUBOPT_0x18
00034d c0a9      	RJMP _0xBA
                 ; 0000 0140     else if (d==4)  motor(v,-v,-v,v);
                 _0x47:
00034e 81a8      	LD   R26,Y
00034f 81b9      	LDD  R27,Y+1
000350 9714      	SBIW R26,4
000351 f449      	BRNE _0x49
000352 940e 074d 	CALL SUBOPT_0x16
000354 940e 0754 	CALL SUBOPT_0x17
000356 940e 0764 	CALL SUBOPT_0x19
000358 940e 0772 	CALL SUBOPT_0x1C
00035a c09d      	RJMP _0xBB
                 ; 0000 0141     else if (d==5)  motor(v/2,-v,-v/2,v);
                 _0x49:
00035b 81a8      	LD   R26,Y
00035c 81b9      	LDD  R27,Y+1
00035d 9715      	SBIW R26,5
00035e f459      	BRNE _0x4B
00035f 940e 075b 	CALL SUBOPT_0x18
000361 940e 0764 	CALL SUBOPT_0x19
000363 940e 0764 	CALL SUBOPT_0x19
000365 940e 0767 	CALL SUBOPT_0x1A
000367 940e 0772 	CALL SUBOPT_0x1C
000369 c08e      	RJMP _0xBB
                 ; 0000 0142     else if (d==6)  motor(0,-v,0,v);
                 _0x4B:
00036a 81a8      	LD   R26,Y
00036b 81b9      	LDD  R27,Y+1
00036c 9716      	SBIW R26,6
00036d f449      	BRNE _0x4D
00036e e0e0      	LDI  R30,LOW(0)
00036f e0f0      	LDI  R31,HIGH(0)
000370 940e 0764 	CALL SUBOPT_0x19
000372 940e 0779 	CALL SUBOPT_0x1D
000374 940e 0772 	CALL SUBOPT_0x1C
000376 c081      	RJMP _0xBB
                 ; 0000 0143     else if (d==7)  motor(-v/2,-v,v/2,v);
                 _0x4D:
000377 81a8      	LD   R26,Y
000378 81b9      	LDD  R27,Y+1
000379 9717      	SBIW R26,7
00037a f471      	BRNE _0x4F
00037b 940e 0754 	CALL SUBOPT_0x17
00037d 01bf      	MOVW R22,R30
00037e 940e 0767 	CALL SUBOPT_0x1A
000380 93fa      	ST   -Y,R31
000381 93ea      	ST   -Y,R30
000382 937a      	ST   -Y,R23
000383 936a      	ST   -Y,R22
000384 940e 075b 	CALL SUBOPT_0x18
000386 940e 0772 	CALL SUBOPT_0x1C
000388 c06f      	RJMP _0xBB
                 ; 0000 0144     else if (d==8)  motor(-v,-v,v,v);
                 _0x4F:
000389 81a8      	LD   R26,Y
00038a 81b9      	LDD  R27,Y+1
00038b 9718      	SBIW R26,8
00038c f439      	BRNE _0x51
00038d 940e 0754 	CALL SUBOPT_0x17
00038f 940e 077e 	CALL SUBOPT_0x1E
000391 940e 0783 	CALL SUBOPT_0x1F
000393 c064      	RJMP _0xBB
                 ; 0000 0145     else if (d==9)  motor(-v,-v/2,v,v/2);
                 _0x51:
000394 81a8      	LD   R26,Y
000395 81b9      	LDD  R27,Y+1
000396 9719      	SBIW R26,9
000397 f459      	BRNE _0x53
000398 940e 0754 	CALL SUBOPT_0x17
00039a 93fa      	ST   -Y,R31
00039b 93ea      	ST   -Y,R30
00039c 940e 0767 	CALL SUBOPT_0x1A
00039e 940e 0788 	CALL SUBOPT_0x20
0003a0 940e 075b 	CALL SUBOPT_0x18
0003a2 c054      	RJMP _0xBA
                 ; 0000 0146     else if (d==10) motor(-v,0,v,0);
                 _0x53:
0003a3 81a8      	LD   R26,Y
0003a4 81b9      	LDD  R27,Y+1
0003a5 971a      	SBIW R26,10
0003a6 f449      	BRNE _0x55
0003a7 940e 0754 	CALL SUBOPT_0x17
0003a9 940e 0779 	CALL SUBOPT_0x1D
0003ab 940e 0788 	CALL SUBOPT_0x20
0003ad e0a0      	LDI  R26,LOW(0)
0003ae e0b0      	LDI  R27,0
0003af c048      	RJMP _0xBB
                 ; 0000 0147     else if (d==11) motor(-v,v/2,v,-v/2);
                 _0x55:
0003b0 81a8      	LD   R26,Y
0003b1 81b9      	LDD  R27,Y+1
0003b2 971b      	SBIW R26,11
0003b3 f469      	BRNE _0x57
0003b4 940e 0754 	CALL SUBOPT_0x17
0003b6 93fa      	ST   -Y,R31
0003b7 93ea      	ST   -Y,R30
0003b8 940e 075b 	CALL SUBOPT_0x18
0003ba 940e 0788 	CALL SUBOPT_0x20
0003bc 940e 0754 	CALL SUBOPT_0x17
0003be 940e 0767 	CALL SUBOPT_0x1A
0003c0 c036      	RJMP _0xBA
                 ; 0000 0148     else if (d==12) motor(-v,v,v,-v);
                 _0x57:
0003c1 81a8      	LD   R26,Y
0003c2 81b9      	LDD  R27,Y+1
0003c3 971c      	SBIW R26,12
0003c4 f439      	BRNE _0x59
0003c5 940e 0754 	CALL SUBOPT_0x17
0003c7 940e 0788 	CALL SUBOPT_0x20
0003c9 940e 078b 	CALL SUBOPT_0x21
0003cb c027      	RJMP _0xB9
                 ; 0000 0149     else if (d==13) motor(-v/2,v,v/2,-v);
                 _0x59:
0003cc 81a8      	LD   R26,Y
0003cd 81b9      	LDD  R27,Y+1
0003ce 971d      	SBIW R26,13
0003cf f449      	BRNE _0x5B
0003d0 940e 0754 	CALL SUBOPT_0x17
0003d2 940e 0767 	CALL SUBOPT_0x1A
0003d4 940e 0788 	CALL SUBOPT_0x20
0003d6 940e 0783 	CALL SUBOPT_0x1F
0003d8 c016      	RJMP _0xBC
                 ; 0000 014A     else if (d==14) motor(0,v,0,-v);
                 _0x5B:
0003d9 81a8      	LD   R26,Y
0003da 81b9      	LDD  R27,Y+1
0003db 971e      	SBIW R26,14
0003dc f439      	BRNE _0x5D
0003dd e0e0      	LDI  R30,LOW(0)
0003de e0f0      	LDI  R31,HIGH(0)
0003df 940e 0788 	CALL SUBOPT_0x20
0003e1 e0e0      	LDI  R30,LOW(0)
0003e2 e0f0      	LDI  R31,HIGH(0)
0003e3 c00f      	RJMP _0xB9
                 ; 0000 014B     else if (d==15) motor(v/2,v,-v/2,-v);
                 _0x5D:
0003e4 81a8      	LD   R26,Y
0003e5 81b9      	LDD  R27,Y+1
0003e6 971f      	SBIW R26,15
0003e7 f489      	BRNE _0x5F
0003e8 940e 075b 	CALL SUBOPT_0x18
0003ea 940e 0788 	CALL SUBOPT_0x20
0003ec 940e 0754 	CALL SUBOPT_0x17
0003ee 01df      	MOVW R26,R30
                 _0xBC:
0003ef e0e2      	LDI  R30,LOW(2)
0003f0 e0f0      	LDI  R31,HIGH(2)
0003f1 940e 083c 	CALL __DIVW21
                 _0xB9:
0003f3 93fa      	ST   -Y,R31
0003f4 93ea      	ST   -Y,R30
0003f5 940e 0754 	CALL SUBOPT_0x17
                 _0xBA:
0003f7 01df      	MOVW R26,R30
                 _0xBB:
0003f8 de6d      	RCALL _motor
                 ; 0000 014C     }
                 _0x5F:
0003f9 940c 0639 	JMP  _0x2020002
                 ; .FEND
                 ;
                 ;//int fl1=0,fl2=0;
                 ;void catch()
                 ; 0000 0150     {
                 _catch:
                 ; .FSTART _catch
                 ; 0000 0151     if(a!=0)
0003fb 91e0 0177 	LDS  R30,_a
0003fd 30e0      	CPI  R30,0
0003fe f409      	BRNE PC+2
0003ff c07e      	RJMP _0x60
                 ; 0000 0152         {
                 ; 0000 0153         if(y>=60)    ////Dahan
000400 940e 06f5 	CALL SUBOPT_0x8
000402 97dc      	SBIW R26,60
000403 f0bc      	BRLT _0x61
                 ; 0000 0154             {
                 ; 0000 0155             if(x<=50)                   move(14);
000404 940e 06ea 	CALL SUBOPT_0x6
000406 97d3      	SBIW R26,51
000407 f414      	BRGE _0x62
000408 e0ae      	LDI  R26,LOW(14)
000409 c00e      	RJMP _0xBD
                 ; 0000 0156             else if(x>50 && x<=220)     move(0);
                 _0x62:
00040a 940e 06ea 	CALL SUBOPT_0x6
00040c 97d3      	SBIW R26,51
00040d f01c      	BRLT _0x65
00040e 940e 0790 	CALL SUBOPT_0x22
000410 f00c      	BRLT _0x66
                 _0x65:
000411 c002      	RJMP _0x64
                 _0x66:
000412 e0a0      	LDI  R26,LOW(0)
000413 c004      	RJMP _0xBD
                 ; 0000 0157             else if(x>220)              move(2);
                 _0x64:
000414 940e 0790 	CALL SUBOPT_0x22
000416 f01c      	BRLT _0x68
000417 e0a2      	LDI  R26,LOW(2)
                 _0xBD:
000418 e0b0      	LDI  R27,0
000419 defa      	RCALL _move
                 ; 0000 0158             }
                 _0x68:
                 ; 0000 0159         else if(y<60 && y>=13)     ///nazdik
00041a c062      	RJMP _0x69
                 _0x61:
00041b 940e 06f5 	CALL SUBOPT_0x8
00041d 97dc      	SBIW R26,60
00041e f424      	BRGE _0x6B
00041f 940e 06f5 	CALL SUBOPT_0x8
000421 971d      	SBIW R26,13
000422 f40c      	BRGE _0x6C
                 _0x6B:
000423 c035      	RJMP _0x6A
                 _0x6C:
                 ; 0000 015A             {
                 ; 0000 015B             if(x<=50)                   move(14);
000424 940e 06ea 	CALL SUBOPT_0x6
000426 97d3      	SBIW R26,51
000427 f414      	BRGE _0x6D
000428 e0ae      	LDI  R26,LOW(14)
000429 c02c      	RJMP _0xBE
                 ; 0000 015C             else if(x>50 && x<=120)     move(15);
                 _0x6D:
00042a 940e 06ea 	CALL SUBOPT_0x6
00042c 97d3      	SBIW R26,51
00042d f034      	BRLT _0x70
00042e 940e 06ea 	CALL SUBOPT_0x6
000430 37a9      	CPI  R26,LOW(0x79)
000431 e0e0      	LDI  R30,HIGH(0x79)
000432 07be      	CPC  R27,R30
000433 f00c      	BRLT _0x71
                 _0x70:
000434 c002      	RJMP _0x6F
                 _0x71:
000435 e0af      	LDI  R26,LOW(15)
000436 c01f      	RJMP _0xBE
                 ; 0000 015D             else if(x>120 && x<=170)    move(0);
                 _0x6F:
000437 940e 06ea 	CALL SUBOPT_0x6
000439 37a9      	CPI  R26,LOW(0x79)
00043a e0e0      	LDI  R30,HIGH(0x79)
00043b 07be      	CPC  R27,R30
00043c f034      	BRLT _0x74
00043d 940e 06ea 	CALL SUBOPT_0x6
00043f 3aab      	CPI  R26,LOW(0xAB)
000440 e0e0      	LDI  R30,HIGH(0xAB)
000441 07be      	CPC  R27,R30
000442 f00c      	BRLT _0x75
                 _0x74:
000443 c002      	RJMP _0x73
                 _0x75:
000444 e0a0      	LDI  R26,LOW(0)
000445 c010      	RJMP _0xBE
                 ; 0000 015E             else if(x>170 && x<=220)    move(1);
                 _0x73:
000446 940e 06ea 	CALL SUBOPT_0x6
000448 3aab      	CPI  R26,LOW(0xAB)
000449 e0e0      	LDI  R30,HIGH(0xAB)
00044a 07be      	CPC  R27,R30
00044b f01c      	BRLT _0x78
00044c 940e 0790 	CALL SUBOPT_0x22
00044e f00c      	BRLT _0x79
                 _0x78:
00044f c002      	RJMP _0x77
                 _0x79:
000450 e0a1      	LDI  R26,LOW(1)
000451 c004      	RJMP _0xBE
                 ; 0000 015F             else if(x>220)              move(2);
                 _0x77:
000452 940e 0790 	CALL SUBOPT_0x22
000454 f01c      	BRLT _0x7B
000455 e0a2      	LDI  R26,LOW(2)
                 _0xBE:
000456 e0b0      	LDI  R27,0
000457 debc      	RCALL _move
                 ; 0000 0160             }
                 _0x7B:
                 ; 0000 0161         else if(y<13)             ///Dooor
000458 c024      	RJMP _0x7C
                 _0x6A:
000459 940e 06f5 	CALL SUBOPT_0x8
00045b 971d      	SBIW R26,13
00045c f504      	BRGE _0x7D
                 ; 0000 0162             {
                 ; 0000 0163             if(x<=130)                   move(15);
00045d 940e 06ea 	CALL SUBOPT_0x6
00045f 38a3      	CPI  R26,LOW(0x83)
000460 e0e0      	LDI  R30,HIGH(0x83)
000461 07be      	CPC  R27,R30
000462 f414      	BRGE _0x7E
000463 e0af      	LDI  R26,LOW(15)
000464 c016      	RJMP _0xBF
                 ; 0000 0164             else if(x>130 && x<=160)     move(0);
                 _0x7E:
000465 940e 06ea 	CALL SUBOPT_0x6
000467 38a3      	CPI  R26,LOW(0x83)
000468 e0e0      	LDI  R30,HIGH(0x83)
000469 07be      	CPC  R27,R30
00046a f034      	BRLT _0x81
00046b 940e 06ea 	CALL SUBOPT_0x6
00046d 3aa1      	CPI  R26,LOW(0xA1)
00046e e0e0      	LDI  R30,HIGH(0xA1)
00046f 07be      	CPC  R27,R30
000470 f00c      	BRLT _0x82
                 _0x81:
000471 c002      	RJMP _0x80
                 _0x82:
000472 e0a0      	LDI  R26,LOW(0)
000473 c007      	RJMP _0xBF
                 ; 0000 0165             else if(x>160)               move(1);
                 _0x80:
000474 940e 06ea 	CALL SUBOPT_0x6
000476 3aa1      	CPI  R26,LOW(0xA1)
000477 e0e0      	LDI  R30,HIGH(0xA1)
000478 07be      	CPC  R27,R30
000479 f01c      	BRLT _0x84
00047a e0a1      	LDI  R26,LOW(1)
                 _0xBF:
00047b e0b0      	LDI  R27,0
00047c de97      	RCALL _move
                 ; 0000 0166             }
                 _0x84:
                 ; 0000 0167 
                 ; 0000 0168 
                 ; 0000 0169 
                 ; 0000 016A //        if (SB < 160)               motor(k,-k,-k,k);
                 ; 0000 016B //        if(x<=30)                   motor(-v,v,v,-v);
                 ; 0000 016C //        else if(x>30 && x<=100)     motor(0,v,0,-v);
                 ; 0000 016D //        else if(x>100 && x<=200)    motor(v,v,-v,-v);
                 ; 0000 016E //        else if(x>200 && x<=270)    motor(v,0,-v,0);
                 ; 0000 016F //        else if(x>270)              motor(v,-v,-v,v);
                 ; 0000 0170 //
                 ; 0000 0171         }
                 _0x7D:
                 _0x7C:
                 _0x69:
                 ; 0000 0172     else
00047d c046      	RJMP _0x85
                 _0x60:
                 ; 0000 0173     {
                 ; 0000 0174         k*=2;
00047e 940e 0795 	CALL SUBOPT_0x23
000480 0fee      	LSL  R30
000481 1fff      	ROL  R31
000482 93e0 0168 	STS  _k,R30
000484 93f0 0169 	STS  _k+1,R31
                 ; 0000 0175         if(SB < 200) motor(-v+k,-v-k,v-k,v+k);
000486 ece8      	LDI  R30,LOW(200)
000487 e0f0      	LDI  R31,HIGH(200)
000488 166e      	CP   R6,R30
000489 067f      	CPC  R7,R31
00048a f4bc      	BRGE _0x86
00048b 940e 0754 	CALL SUBOPT_0x17
00048d 010f      	MOVW R0,R30
00048e 940e 0734 	CALL SUBOPT_0x11
000490 0fea      	ADD  R30,R26
000491 1ffb      	ADC  R31,R27
000492 93fa      	ST   -Y,R31
000493 93ea      	ST   -Y,R30
000494 01d0      	MOVW R26,R0
000495 940e 079a 	CALL SUBOPT_0x24
000497 940e 07a0 	CALL SUBOPT_0x25
000499 93fa      	ST   -Y,R31
00049a 93ea      	ST   -Y,R30
00049b 940e 0795 	CALL SUBOPT_0x23
00049d 940e 0783 	CALL SUBOPT_0x1F
00049f 0fae      	ADD  R26,R30
0004a0 1fbf      	ADC  R27,R31
0004a1 c021      	RJMP _0xC0
                 ; 0000 0176         else if (SB > 400) motor (v+k,v-k,-v-k,-v+k);
                 _0x86:
0004a2 e9e0      	LDI  R30,LOW(400)
0004a3 e0f1      	LDI  R31,HIGH(400)
0004a4 15e6      	CP   R30,R6
0004a5 05f7      	CPC  R31,R7
0004a6 f4b4      	BRGE _0x88
0004a7 940e 0795 	CALL SUBOPT_0x23
0004a9 940e 0783 	CALL SUBOPT_0x1F
0004ab 0fea      	ADD  R30,R26
0004ac 1ffb      	ADC  R31,R27
0004ad 93fa      	ST   -Y,R31
0004ae 93ea      	ST   -Y,R30
0004af 940e 07a0 	CALL SUBOPT_0x25
0004b1 940e 0764 	CALL SUBOPT_0x19
0004b3 01df      	MOVW R26,R30
0004b4 940e 079a 	CALL SUBOPT_0x24
0004b6 940e 0754 	CALL SUBOPT_0x17
0004b8 940e 0734 	CALL SUBOPT_0x11
0004ba 0fae      	ADD  R26,R30
0004bb 1fbf      	ADC  R27,R31
0004bc c006      	RJMP _0xC0
                 ; 0000 0177         else motor(0,0,0,0);
                 _0x88:
0004bd 940e 07a5 	CALL SUBOPT_0x26
0004bf 940e 0779 	CALL SUBOPT_0x1D
0004c1 940e 076d 	CALL SUBOPT_0x1B
                 _0xC0:
0004c3 dda2      	RCALL _motor
                 ; 0000 0178     }
                 _0x85:
                 ; 0000 0179     }
0004c4 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 017E {
                 _main:
                 ; .FSTART _main
                 ; 0000 017F #asm("wdr");
0004c5 95a8      	wdr
                 ; 0000 0180 {
                 ; 0000 0181 // Declare your local variables here
                 ; 0000 0182 
                 ; 0000 0183 // Input/Output Ports initialization
                 ; 0000 0184 // Port A initialization
                 ; 0000 0185 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0186 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0004c6 e0e0      	LDI  R30,LOW(0)
0004c7 bbea      	OUT  0x1A,R30
                 ; 0000 0187 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0188 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0004c8 bbeb      	OUT  0x1B,R30
                 ; 0000 0189 
                 ; 0000 018A // Port B initialization
                 ; 0000 018B // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 018C DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0004c9 efe8      	LDI  R30,LOW(248)
0004ca bbe7      	OUT  0x17,R30
                 ; 0000 018D // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 018E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0004cb e0e0      	LDI  R30,LOW(0)
0004cc bbe8      	OUT  0x18,R30
                 ; 0000 018F 
                 ; 0000 0190 // Port C initialization
                 ; 0000 0191 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0192 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0004cd bbe4      	OUT  0x14,R30
                 ; 0000 0193 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0194 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0004ce bbe5      	OUT  0x15,R30
                 ; 0000 0195 
                 ; 0000 0196 // Port D initialization
                 ; 0000 0197 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0198 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0004cf efef      	LDI  R30,LOW(255)
0004d0 bbe1      	OUT  0x11,R30
                 ; 0000 0199 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 019A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0004d1 e0e0      	LDI  R30,LOW(0)
0004d2 bbe2      	OUT  0x12,R30
                 ; 0000 019B 
                 ; 0000 019C // Timer/Counter 0 initialization
                 ; 0000 019D // Clock source: System Clock
                 ; 0000 019E // Clock value: 31.250 kHz
                 ; 0000 019F // Mode: Fast PWM top=0xFF
                 ; 0000 01A0 // OC0 output: Non-Inverted PWM
                 ; 0000 01A1 // Timer Period: 8.192 ms
                 ; 0000 01A2 // Output Pulse(s):
                 ; 0000 01A3 // OC0 Period: 8.192 ms Width: 0 us
                 ; 0000 01A4 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
0004d3 e6ec      	LDI  R30,LOW(108)
0004d4 bfe3      	OUT  0x33,R30
                 ; 0000 01A5 TCNT0=0x00;
0004d5 e0e0      	LDI  R30,LOW(0)
0004d6 bfe2      	OUT  0x32,R30
                 ; 0000 01A6 OCR0=0x00;
0004d7 bfec      	OUT  0x3C,R30
                 ; 0000 01A7 
                 ; 0000 01A8 // Timer/Counter 1 initialization
                 ; 0000 01A9 // Clock source: System Clock
                 ; 0000 01AA // Clock value: 31.250 kHz
                 ; 0000 01AB // Mode: Fast PWM top=0x00FF
                 ; 0000 01AC // OC1A output: Non-Inverted PWM
                 ; 0000 01AD // OC1B output: Non-Inverted PWM
                 ; 0000 01AE // Noise Canceler: Off
                 ; 0000 01AF // Input Capture on Falling Edge
                 ; 0000 01B0 // Timer Period: 8.192 ms
                 ; 0000 01B1 // Output Pulse(s):
                 ; 0000 01B2 // OC1A Period: 8.192 ms Width: 0 us// OC1B Period: 8.192 ms Width: 0 us
                 ; 0000 01B3 // Timer1 Overflow Interrupt: Off
                 ; 0000 01B4 // Input Capture Interrupt: Off
                 ; 0000 01B5 // Compare A Match Interrupt: Off
                 ; 0000 01B6 // Compare B Match Interrupt: Off
                 ; 0000 01B7 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
0004d8 eae1      	LDI  R30,LOW(161)
0004d9 bdef      	OUT  0x2F,R30
                 ; 0000 01B8 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
0004da e0ec      	LDI  R30,LOW(12)
0004db bdee      	OUT  0x2E,R30
                 ; 0000 01B9 TCNT1H=0x00;
0004dc e0e0      	LDI  R30,LOW(0)
0004dd bded      	OUT  0x2D,R30
                 ; 0000 01BA TCNT1L=0x00;
0004de bdec      	OUT  0x2C,R30
                 ; 0000 01BB ICR1H=0x00;
0004df bde7      	OUT  0x27,R30
                 ; 0000 01BC ICR1L=0x00;
0004e0 bde6      	OUT  0x26,R30
                 ; 0000 01BD OCR1AH=0x00;
0004e1 bdeb      	OUT  0x2B,R30
                 ; 0000 01BE OCR1AL=0x00;
0004e2 bdea      	OUT  0x2A,R30
                 ; 0000 01BF OCR1BH=0x00;
0004e3 bde9      	OUT  0x29,R30
                 ; 0000 01C0 OCR1BL=0x00;
0004e4 bde8      	OUT  0x28,R30
                 ; 0000 01C1 
                 ; 0000 01C2 // Timer/Counter 2 initialization
                 ; 0000 01C3 // Clock source: System Clock
                 ; 0000 01C4 // Clock value: 31.250 kHz
                 ; 0000 01C5 // Mode: Fast PWM top=0xFF
                 ; 0000 01C6 // OC2 output: Non-Inverted PWM
                 ; 0000 01C7 // Timer Period: 8.192 ms
                 ; 0000 01C8 // Output Pulse(s):
                 ; 0000 01C9 // OC2 Period: 8.192 ms Width: 0 us
                 ; 0000 01CA ASSR=0<<AS2;
0004e5 bde2      	OUT  0x22,R30
                 ; 0000 01CB TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (1<<CS21) | (0<<CS20);
0004e6 e6ee      	LDI  R30,LOW(110)
0004e7 bde5      	OUT  0x25,R30
                 ; 0000 01CC TCNT2=0x00;
0004e8 e0e0      	LDI  R30,LOW(0)
0004e9 bde4      	OUT  0x24,R30
                 ; 0000 01CD OCR2=0x00;
0004ea bde3      	OUT  0x23,R30
                 ; 0000 01CE 
                 ; 0000 01CF // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01D0 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0004eb bfe9      	OUT  0x39,R30
                 ; 0000 01D1 
                 ; 0000 01D2 // External Interrupt(s) initialization
                 ; 0000 01D3 // INT0: Off
                 ; 0000 01D4 // INT1: Off
                 ; 0000 01D5 // INT2: Off
                 ; 0000 01D6 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0004ec bfe5      	OUT  0x35,R30
                 ; 0000 01D7 MCUCSR=(0<<ISC2);
0004ed bfe4      	OUT  0x34,R30
                 ; 0000 01D8 
                 ; 0000 01D9 // USART initialization
                 ; 0000 01DA // USART disabled
                 ; 0000 01DB UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0004ee b9ea      	OUT  0xA,R30
                 ; 0000 01DC 
                 ; 0000 01DD // Analog Comparator initialization
                 ; 0000 01DE // Analog Comparator: Off
                 ; 0000 01DF // The Analog Comparator's positive input is
                 ; 0000 01E0 // connected to the AIN0 pin
                 ; 0000 01E1 // The Analog Comparator's negative input is
                 ; 0000 01E2 // connected to the AIN1 pin
                 ; 0000 01E3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0004ef e8e0      	LDI  R30,LOW(128)
0004f0 b9e8      	OUT  0x8,R30
                 ; 0000 01E4 
                 ; 0000 01E5 // ADC initialization
                 ; 0000 01E6 // ADC Clock frequency: 62.500 kHz
                 ; 0000 01E7 // ADC Voltage Reference: AVCC pin
                 ; 0000 01E8 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 01E9 ADMUX=ADC_VREF_TYPE;
0004f1 e4e0      	LDI  R30,LOW(64)
0004f2 b9e7      	OUT  0x7,R30
                 ; 0000 01EA ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0004f3 e8e7      	LDI  R30,LOW(135)
0004f4 b9e6      	OUT  0x6,R30
                 ; 0000 01EB SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0004f5 e0e0      	LDI  R30,LOW(0)
0004f6 bfe0      	OUT  0x30,R30
                 ; 0000 01EC 
                 ; 0000 01ED // SPI initialization
                 ; 0000 01EE // SPI disabled
                 ; 0000 01EF SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0004f7 b9ed      	OUT  0xD,R30
                 ; 0000 01F0 
                 ; 0000 01F1 // TWI initialization
                 ; 0000 01F2 // TWI disabled
                 ; 0000 01F3 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0004f8 bfe6      	OUT  0x36,R30
                 ; 0000 01F4 
                 ; 0000 01F5 // Bit-Banged I2C Bus initialization
                 ; 0000 01F6 // I2C Port: PORTB
                 ; 0000 01F7 // I2C SDA bit: 1
                 ; 0000 01F8 // I2C SCL bit: 0
                 ; 0000 01F9 // Bit Rate: 100 kHz
                 ; 0000 01FA // Note: I2C settings are specified in the
                 ; 0000 01FB // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 01FC i2c_init();
0004f9 940e 07b5 	CALL _i2c_init
                 ; 0000 01FD 
                 ; 0000 01FE // Alphanumeric LCD initialization
                 ; 0000 01FF // Connections are specified in the
                 ; 0000 0200 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0201 // RS - PORTC Bit 0
                 ; 0000 0202 // RD - PORTC Bit 1
                 ; 0000 0203 // EN - PORTC Bit 2
                 ; 0000 0204 // D4 - PORTC Bit 4
                 ; 0000 0205 // D5 - PORTC Bit 5
                 ; 0000 0206 // D6 - PORTC Bit 6
                 ; 0000 0207 // D7 - PORTC Bit 7
                 ; 0000 0208 // Characters/line: 16
                 ; 0000 0209 lcd_init(16);
0004fb e1a0      	LDI  R26,LOW(16)
0004fc 940e 069b 	CALL _lcd_init
                 ; 0000 020A 
                 ; 0000 020B // Watchdog Timer initialization
                 ; 0000 020C // Watchdog Timer Prescaler: OSC/256k
                 ; 0000 020D WDTCR=(0<<WDTOE) | (1<<WDE) | (1<<WDP2) | (0<<WDP1) | (0<<WDP0);
0004fe e0ec      	LDI  R30,LOW(12)
0004ff bde1      	OUT  0x21,R30
                 ; 0000 020E 
                 ; 0000 020F }
                 ; 0000 0210 
                 ; 0000 0211 //delay_ms(3000);
                 ; 0000 0212 //c = compass_read(1);
                 ; 0000 0213 
                 ; 0000 0214 v=255;
000500 efef      	LDI  R30,LOW(255)
000501 e0f0      	LDI  R31,HIGH(255)
000502 93e0 0166 	STS  _v,R30
000504 93f0 0167 	STS  _v+1,R31
                 ; 0000 0215 while (1)
                 _0x8A:
                 ; 0000 0216       {
                 ; 0000 0217 
                 ; 0000 0218       #asm("wdr");
000506 95a8      	wdr
                 ; 0000 0219       sensor();
000507 940e 07a8 	CALL SUBOPT_0x27
                 ; 0000 021A       read_pixy();
                 ; 0000 021B       if(SKB>600 || SKR>600 || SKL>600)
000509 940e 072a 	CALL SUBOPT_0xF
00050b 35a9      	CPI  R26,LOW(0x259)
00050c e0e2      	LDI  R30,HIGH(0x259)
00050d 07be      	CPC  R27,R30
00050e f464      	BRGE _0x8E
00050f 940e 072f 	CALL SUBOPT_0x10
000511 35a9      	CPI  R26,LOW(0x259)
000512 e0e2      	LDI  R30,HIGH(0x259)
000513 07be      	CPC  R27,R30
000514 f434      	BRGE _0x8E
000515 e5e8      	LDI  R30,LOW(600)
000516 e0f2      	LDI  R31,HIGH(600)
000517 15ec      	CP   R30,R12
000518 05fd      	CPC  R31,R13
000519 f00c      	BRLT _0x8E
00051a c058      	RJMP _0x8D
                 _0x8E:
                 ; 0000 021C         {
                 ; 0000 021D         if(SKR>600)
00051b 940e 072f 	CALL SUBOPT_0x10
00051d 35a9      	CPI  R26,LOW(0x259)
00051e e0e2      	LDI  R30,HIGH(0x259)
00051f 07be      	CPC  R27,R30
000520 f0f4      	BRLT _0x90
                 ; 0000 021E             {
                 ; 0000 021F             if(SL>500) {motor(v,-v,-v,v);out='L';}
000521 efe4      	LDI  R30,LOW(500)
000522 e0f1      	LDI  R31,HIGH(500)
000523 15e8      	CP   R30,R8
000524 05f9      	CPC  R31,R9
000525 f45c      	BRGE _0x91
000526 940e 074d 	CALL SUBOPT_0x16
000528 940e 0754 	CALL SUBOPT_0x17
00052a 940e 0764 	CALL SUBOPT_0x19
00052c 940e 0772 	CALL SUBOPT_0x1C
00052e dd37      	RCALL _motor
00052f e4ec      	LDI  R30,LOW(76)
000530 c00b      	RJMP _0xC1
                 ; 0000 0220             else       {motor(-v,v,v,-v);out='R';}
                 _0x91:
000531 940e 0754 	CALL SUBOPT_0x17
000533 940e 0788 	CALL SUBOPT_0x20
000535 940e 074d 	CALL SUBOPT_0x16
000537 940e 0754 	CALL SUBOPT_0x17
000539 01df      	MOVW R26,R30
00053a dd2b      	RCALL _motor
00053b e5e2      	LDI  R30,LOW(82)
                 _0xC1:
00053c 93e0 0178 	STS  _out,R30
                 ; 0000 0221 
                 ; 0000 0222             }
                 ; 0000 0223         else if(SKL>600)
00053e c033      	RJMP _0x93
                 _0x90:
00053f e5e8      	LDI  R30,LOW(600)
000540 e0f2      	LDI  R31,HIGH(600)
000541 15ec      	CP   R30,R12
000542 05fd      	CPC  R31,R13
000543 f4f4      	BRGE _0x94
                 ; 0000 0224             {
                 ; 0000 0225             if(SR>500) {motor(-v,v,v,-v);out='R';}
000544 efe4      	LDI  R30,LOW(500)
000545 e0f1      	LDI  R31,HIGH(500)
000546 15e4      	CP   R30,R4
000547 05f5      	CPC  R31,R5
000548 f464      	BRGE _0x95
000549 940e 0754 	CALL SUBOPT_0x17
00054b 940e 0788 	CALL SUBOPT_0x20
00054d 940e 074d 	CALL SUBOPT_0x16
00054f 940e 0754 	CALL SUBOPT_0x17
000551 01df      	MOVW R26,R30
000552 dd13      	RCALL _motor
000553 e5e2      	LDI  R30,LOW(82)
000554 c00a      	RJMP _0xC2
                 ; 0000 0226             else       {motor(v,-v,-v,v);out='L';}
                 _0x95:
000555 940e 074d 	CALL SUBOPT_0x16
000557 940e 0754 	CALL SUBOPT_0x17
000559 940e 0764 	CALL SUBOPT_0x19
00055b 940e 0772 	CALL SUBOPT_0x1C
00055d dd08      	RCALL _motor
00055e e4ec      	LDI  R30,LOW(76)
                 _0xC2:
00055f 93e0 0178 	STS  _out,R30
                 ; 0000 0227 
                 ; 0000 0228             }
                 ; 0000 0229         else if(SKB>600) motor(v,v,-v,-v);
000561 c010      	RJMP _0x97
                 _0x94:
000562 940e 072a 	CALL SUBOPT_0xF
000564 35a9      	CPI  R26,LOW(0x259)
000565 e0e2      	LDI  R30,HIGH(0x259)
000566 07be      	CPC  R27,R30
000567 f054      	BRLT _0x98
000568 940e 074d 	CALL SUBOPT_0x16
00056a 940e 074d 	CALL SUBOPT_0x16
00056c 940e 0754 	CALL SUBOPT_0x17
00056e 940e 0764 	CALL SUBOPT_0x19
000570 01df      	MOVW R26,R30
000571 dcf4      	RCALL _motor
                 ; 0000 022A         }
                 _0x98:
                 _0x97:
                 _0x93:
                 ; 0000 022B       else
000572 c072      	RJMP _0x99
                 _0x8D:
                 ; 0000 022C         {
                 ; 0000 022D         while(out=='R' && a!=0)
                 _0x9A:
000573 91a0 0178 	LDS  R26,_out
000575 35a2      	CPI  R26,LOW(0x52)
000576 f421      	BRNE _0x9D
000577 91a0 0177 	LDS  R26,_a
000579 30a0      	CPI  R26,LOW(0x0)
00057a f409      	BRNE _0x9E
                 _0x9D:
00057b c019      	RJMP _0x9C
                 _0x9E:
                 ; 0000 022E             {
                 ; 0000 022F             sensor();
00057c 940e 07a8 	CALL SUBOPT_0x27
                 ; 0000 0230             read_pixy();
                 ; 0000 0231             if(SR>300)   motor(-v,v,v,-v);
00057e e2ec      	LDI  R30,LOW(300)
00057f e0f1      	LDI  R31,HIGH(300)
000580 15e4      	CP   R30,R4
000581 05f5      	CPC  R31,R5
000582 f454      	BRGE _0x9F
000583 940e 0754 	CALL SUBOPT_0x17
000585 940e 0788 	CALL SUBOPT_0x20
000587 940e 074d 	CALL SUBOPT_0x16
000589 940e 0754 	CALL SUBOPT_0x17
00058b 01df      	MOVW R26,R30
00058c c006      	RJMP _0xC3
                 ; 0000 0232             else  motor(0,0,0,0);
                 _0x9F:
00058d 940e 07a5 	CALL SUBOPT_0x26
00058f 940e 0779 	CALL SUBOPT_0x1D
000591 940e 076d 	CALL SUBOPT_0x1B
                 _0xC3:
000593 dcd2      	RCALL _motor
                 ; 0000 0233             }
000594 cfde      	RJMP _0x9A
                 _0x9C:
                 ; 0000 0234         while(out=='L' && a!=0)
                 _0xA1:
000595 91a0 0178 	LDS  R26,_out
000597 34ac      	CPI  R26,LOW(0x4C)
000598 f421      	BRNE _0xA4
000599 91a0 0177 	LDS  R26,_a
00059b 30a0      	CPI  R26,LOW(0x0)
00059c f409      	BRNE _0xA5
                 _0xA4:
00059d c018      	RJMP _0xA3
                 _0xA5:
                 ; 0000 0235             {
                 ; 0000 0236             sensor();
00059e 940e 07a8 	CALL SUBOPT_0x27
                 ; 0000 0237             read_pixy();
                 ; 0000 0238             if(SL>300)   motor(v,-v,-v,v);
0005a0 e2ec      	LDI  R30,LOW(300)
0005a1 e0f1      	LDI  R31,HIGH(300)
0005a2 15e8      	CP   R30,R8
0005a3 05f9      	CPC  R31,R9
0005a4 f44c      	BRGE _0xA6
0005a5 940e 074d 	CALL SUBOPT_0x16
0005a7 940e 0754 	CALL SUBOPT_0x17
0005a9 940e 0764 	CALL SUBOPT_0x19
0005ab 940e 0772 	CALL SUBOPT_0x1C
0005ad c006      	RJMP _0xC4
                 ; 0000 0239             else  motor(0,0,0,0);
                 _0xA6:
0005ae 940e 07a5 	CALL SUBOPT_0x26
0005b0 940e 0779 	CALL SUBOPT_0x1D
0005b2 940e 076d 	CALL SUBOPT_0x1B
                 _0xC4:
0005b4 dcb1      	RCALL _motor
                 ; 0000 023A             }
0005b5 cfdf      	RJMP _0xA1
                 _0xA3:
                 ; 0000 023B         if(SKF>600 && out==0)
0005b6 e5e8      	LDI  R30,LOW(600)
0005b7 e0f2      	LDI  R31,HIGH(600)
0005b8 15ea      	CP   R30,R10
0005b9 05fb      	CPC  R31,R11
0005ba f424      	BRGE _0xA9
0005bb 91a0 0178 	LDS  R26,_out
0005bd 30a0      	CPI  R26,LOW(0x0)
0005be f009      	BREQ _0xAA
                 _0xA9:
0005bf c00e      	RJMP _0xA8
                 _0xAA:
                 ; 0000 023C             {
                 ; 0000 023D             motor(-v,-v,v,v);
0005c0 940e 0754 	CALL SUBOPT_0x17
0005c2 940e 077e 	CALL SUBOPT_0x1E
0005c4 940e 0783 	CALL SUBOPT_0x1F
0005c6 dc9f      	RCALL _motor
                 ; 0000 023E             delay_ms(300);
0005c7 e2ac      	LDI  R26,LOW(300)
0005c8 e0b1      	LDI  R27,HIGH(300)
0005c9 940e 0806 	CALL _delay_ms
                 ; 0000 023F             out='F';
0005cb e4e6      	LDI  R30,LOW(70)
0005cc 93e0 0178 	STS  _out,R30
                 ; 0000 0240             }
                 ; 0000 0241         while(out=='F' && a!=0)
                 _0xA8:
                 _0xAB:
0005ce 91a0 0178 	LDS  R26,_out
0005d0 34a6      	CPI  R26,LOW(0x46)
0005d1 f421      	BRNE _0xAE
0005d2 91a0 0177 	LDS  R26,_a
0005d4 30a0      	CPI  R26,LOW(0x0)
0005d5 f409      	BRNE _0xAF
                 _0xAE:
0005d6 c00a      	RJMP _0xAD
                 _0xAF:
                 ; 0000 0242             {
                 ; 0000 0243             sensor();
0005d7 940e 07a8 	CALL SUBOPT_0x27
                 ; 0000 0244             read_pixy();
                 ; 0000 0245             motor(0,0,0,0);
0005d9 940e 07a5 	CALL SUBOPT_0x26
0005db 940e 0779 	CALL SUBOPT_0x1D
0005dd 940e 076d 	CALL SUBOPT_0x1B
0005df dc86      	RCALL _motor
                 ; 0000 0246             }
0005e0 cfed      	RJMP _0xAB
                 _0xAD:
                 ; 0000 0247 
                 ; 0000 0248         catch();
0005e1 de19      	RCALL _catch
                 ; 0000 0249         out=0;
0005e2 e0e0      	LDI  R30,LOW(0)
0005e3 93e0 0178 	STS  _out,R30
                 ; 0000 024A         }
                 _0x99:
                 ; 0000 024B       }
0005e5 cf20      	RJMP _0x8A
                 ; 0000 024C }
                 _0xB0:
0005e6 cfff      	RJMP _0xB0
                 ; .FEND
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
0005e7 e0ff          ldi   r31,15
                 __lcd_delay0:
0005e8 95fa          dec   r31
0005e9 f7f1          brne  __lcd_delay0
0005ea 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
0005eb b3a4          in    r26,__lcd_direction
0005ec 70af          andi  r26,0xf                 ;set as input
0005ed bba4          out   __lcd_direction,r26
0005ee 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0005ef 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
0005f0 dff6      	RCALL __lcd_delay_G100
0005f1 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0005f2 dff4      	RCALL __lcd_delay_G100
0005f3 b3a3          in    r26,__lcd_pin
0005f4 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0005f5 dff1      	RCALL __lcd_delay_G100
0005f6 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0005f7 dfef      	RCALL __lcd_delay_G100
0005f8 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0005f9 fda7          sbrc  r26,__lcd_busy_flag
0005fa cff5          rjmp  __lcd_busy
0005fb 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0005fc 7fa0          andi  r26,0xf0
0005fd 2bab          or    r26,r27
0005fe bba5          out   __lcd_port,r26          ;write
0005ff 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000600 940e 05e7 	CALL __lcd_delay_G100
000602 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000603 940e 05e7 	CALL __lcd_delay_G100
000605 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000606 93aa      	ST   -Y,R26
000607 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000608 b3a4          in    r26,__lcd_direction
000609 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
00060a bba4          out   __lcd_direction,r26
00060b b3b5          in    r27,__lcd_port
00060c 70bf          andi  r27,0xf
00060d 81a8          ld    r26,y
00060e dfed      	RCALL __lcd_write_nibble_G100
00060f 81a8          ld    r26,y
000610 95a2          swap  r26
000611 dfea      	RCALL __lcd_write_nibble_G100
000612 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000613 940c 06c7 	JMP  _0x2020001
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
000615 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000616 940e 05e7 	CALL __lcd_delay_G100
000618 b3e3          in    r30,__lcd_pin           ;read
000619 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
00061a 940e 05e7 	CALL __lcd_delay_G100
00061c 7fe0          andi  r30,0xf0
00061d 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
00061e 940e 05e7 	CALL __lcd_delay_G100
000620 dff4      	RCALL __lcd_read_nibble_G100
000621 2fae          mov   r26,r30
000622 dff2      	RCALL __lcd_read_nibble_G100
000623 98a9          cbi   __lcd_port,__lcd_rd     ;RD=0
000624 95e2          swap  r30
000625 2bea          or    r30,r26
000626 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000627 93aa      	ST   -Y,R26
000628 940e 05eb 	CALL __lcd_ready
00062a 81e8      	LD   R30,Y
00062b e0f0      	LDI  R31,0
00062c 58e7      	SUBI R30,LOW(-__base_y_G100)
00062d 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00062e 81e0      	LD   R30,Z
00062f 81a9      	LDD  R26,Y+1
000630 0fae      	ADD  R26,R30
000631 940e 0606 	CALL __lcd_write_data
000633 81e9      	LDD  R30,Y+1
000634 93e0 017d 	STS  __lcd_x,R30
000636 81e8      	LD   R30,Y
000637 93e0 017e 	STS  __lcd_y,R30
                 _0x2020002:
000639 9622      	ADIW R28,2
00063a 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00063b 940e 05eb 	CALL __lcd_ready
00063d e0a2      	LDI  R26,LOW(2)
00063e 940e 0606 	CALL __lcd_write_data
000640 940e 05eb 	CALL __lcd_ready
000642 e0ac      	LDI  R26,LOW(12)
000643 940e 0606 	CALL __lcd_write_data
000645 940e 05eb 	CALL __lcd_ready
000647 e0a1      	LDI  R26,LOW(1)
000648 940e 0606 	CALL __lcd_write_data
00064a e0e0      	LDI  R30,LOW(0)
00064b 93e0 017e 	STS  __lcd_y,R30
00064d 93e0 017d 	STS  __lcd_x,R30
00064f 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000650 93aa      	ST   -Y,R26
000651 93ef          push r30
000652 93ff          push r31
000653 81a8          ld   r26,y
000654 9468          set
000655 30aa          cpi  r26,10
000656 f039          breq __lcd_putchar1
000657 94e8          clt
000658 91e0 017f 	LDS  R30,__lcd_maxx
00065a 91a0 017d 	LDS  R26,__lcd_x
00065c 17ae      	CP   R26,R30
00065d f058      	BRLO _0x2000004
                 	__lcd_putchar1:
00065e 91e0 017e 	LDS  R30,__lcd_y
000660 5fef      	SUBI R30,-LOW(1)
000661 93e0 017e 	STS  __lcd_y,R30
000663 e0e0      	LDI  R30,LOW(0)
000664 93ea      	ST   -Y,R30
000665 91a0 017e 	LDS  R26,__lcd_y
000667 dfbf      	RCALL _lcd_gotoxy
000668 f056      	brts __lcd_putchar0
                 _0x2000004:
000669 91e0 017d 	LDS  R30,__lcd_x
00066b 5fef      	SUBI R30,-LOW(1)
00066c 93e0 017d 	STS  __lcd_x,R30
00066e df7c          rcall __lcd_ready
00066f 9aa8          sbi  __lcd_port,__lcd_rs ;RS=1
000670 81a8      	LD   R26,Y
000671 940e 0606 	CALL __lcd_write_data
                 __lcd_putchar0:
000673 91ff          pop  r31
000674 91ef          pop  r30
000675 940c 06c7 	JMP  _0x2020001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000677 93ba      	ST   -Y,R27
000678 93aa      	ST   -Y,R26
000679 931a      	ST   -Y,R17
                 _0x2000008:
00067a 81e9      	LDD  R30,Y+1
00067b 81fa      	LDD  R31,Y+1+1
00067c 9631      	ADIW R30,1
00067d 83e9      	STD  Y+1,R30
00067e 83fa      	STD  Y+1+1,R31
00067f 9731      	SBIW R30,1
000680 91e4      	LPM  R30,Z
000681 2f1e      	MOV  R17,R30
000682 30e0      	CPI  R30,0
000683 f019      	BREQ _0x200000A
000684 2fa1      	MOV  R26,R17
000685 dfca      	RCALL _lcd_putchar
000686 cff3      	RJMP _0x2000008
                 _0x200000A:
000687 8118      	LDD  R17,Y+0
000688 9623      	ADIW R28,3
000689 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
00068a 27aa          clr   r26
00068b 27bb          clr   r27
                 __long_delay0:
00068c 9711          sbiw  r26,1         ;2 cycles
00068d f7f1          brne  __long_delay0 ;2 cycles
00068e 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
00068f 93aa      	ST   -Y,R26
000690 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000691 b3a4          in    r26,__lcd_direction
000692 6fa7          ori   r26,0xf7                ;set as output
000693 bba4          out   __lcd_direction,r26
000694 b3b5          in    r27,__lcd_port
000695 70bf          andi  r27,0xf
000696 81a8          ld    r26,y
000697 940e 05fc 	CALL __lcd_write_nibble_G100
000699 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
00069a c02c      	RJMP _0x2020001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00069b 93aa      	ST   -Y,R26
00069c 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
00069d 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
00069e 81e8      	LD   R30,Y
00069f 93e0 017f 	STS  __lcd_maxx,R30
0006a1 58e0      	SUBI R30,-LOW(128)
                +
0006a2 93e0 017b+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0006a4 81e8      	LD   R30,Y
0006a5 54e0      	SUBI R30,-LOW(192)
                +
0006a6 93e0 017c+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0006a8 d103      	RCALL SUBOPT_0x28
0006a9 d102      	RCALL SUBOPT_0x28
0006aa d101      	RCALL SUBOPT_0x28
0006ab dfde      	RCALL __long_delay_G100
0006ac e2a0      	LDI  R26,LOW(32)
0006ad dfe1      	RCALL __lcd_init_write_G100
0006ae dfdb      	RCALL __long_delay_G100
0006af e2a8      	LDI  R26,LOW(40)
0006b0 d100      	RCALL SUBOPT_0x29
0006b1 e0a4      	LDI  R26,LOW(4)
0006b2 d0fe      	RCALL SUBOPT_0x29
0006b3 e8a5      	LDI  R26,LOW(133)
0006b4 d0fc      	RCALL SUBOPT_0x29
0006b5 b3a4          in    r26,__lcd_direction
0006b6 70af          andi  r26,0xf                 ;set as input
0006b7 bba4          out   __lcd_direction,r26
0006b8 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0006b9 940e 061e 	CALL _lcd_read_byte0_G100
0006bb 30e5      	CPI  R30,LOW(0x5)
0006bc f011      	BREQ _0x200000B
0006bd e0e0      	LDI  R30,LOW(0)
0006be c008      	RJMP _0x2020001
                 _0x200000B:
0006bf 940e 05eb 	CALL __lcd_ready
0006c1 e0a6      	LDI  R26,LOW(6)
0006c2 940e 0606 	CALL __lcd_write_data
0006c4 940e 063b 	CALL _lcd_clear
0006c6 e0e1      	LDI  R30,LOW(1)
                 _0x2020001:
0006c7 9621      	ADIW R28,1
0006c8 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _SKR:
000160           	.BYTE 0x2
                 _SKB:
000162           	.BYTE 0x2
                 _cmp:
000164           	.BYTE 0x2
                 
                 	.ESEG
                 _c:
000000           	.BYTE 0x2
                 
                 	.DSEG
                 _v:
000166           	.BYTE 0x2
                 _k:
000168           	.BYTE 0x2
                 _addres:
00016a           	.BYTE 0x1
                 _x:
00016b           	.BYTE 0x2
                 _y:
00016d           	.BYTE 0x2
                 _w:
00016f           	.BYTE 0x2
                 _h:
000171           	.BYTE 0x2
                 _ch:
000173           	.BYTE 0x2
                 _sn:
000175           	.BYTE 0x2
                 _a:
000177           	.BYTE 0x1
                 _out:
000178           	.BYTE 0x1
                 __base_y_G100:
000179           	.BYTE 0x4
                 __lcd_x:
00017d           	.BYTE 0x1
                 __lcd_y:
00017e           	.BYTE 0x1
                 __lcd_maxx:
00017f           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x0:
                +
0006c9 ec88     +LDI R24 , LOW ( 200 )
0006ca e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0006cb 9701     +SBIW R24 , 1
0006cc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0006cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0006ce 940e 07ee 	CALL _i2c_write
0006d0 cff8      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0006d1 940e 0076 	CALL _read
0006d3 93e0 0177 	STS  _a,R30
0006d5 91a0 0177 	LDS  R26,_a
0006d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0006d8 93e0 0173 	STS  _ch,R30
0006da 93f0 0174 	STS  _ch+1,R31
0006dc 940c 0076 	JMP  _read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0006de 93e0 0175 	STS  _sn,R30
0006e0 93f0 0176 	STS  _sn+1,R31
0006e2 940c 0076 	JMP  _read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0006e4 93e0 016b 	STS  _x,R30
0006e6 93f0 016c 	STS  _x+1,R31
0006e8 940c 0076 	JMP  _read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:35 WORDS
                 SUBOPT_0x6:
0006ea 91a0 016b 	LDS  R26,_x
0006ec 91b0 016c 	LDS  R27,_x+1
0006ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0006ef 93e0 016d 	STS  _y,R30
0006f1 93f0 016e 	STS  _y+1,R31
0006f3 940c 0076 	JMP  _read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8:
0006f5 91a0 016d 	LDS  R26,_y
0006f7 91b0 016e 	LDS  R27,_y+1
0006f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0006fa 93e0 016f 	STS  _w,R30
0006fc 93f0 0170 	STS  _w+1,R31
0006fe 940c 0076 	JMP  _read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000700 93ea      	ST   -Y,R30
000701 e0a0      	LDI  R26,LOW(0)
000702 940c 0627 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:74 WORDS
                 SUBOPT_0xB:
000704 e6e4      	LDI  R30,LOW(100)
000705 e0f0      	LDI  R31,HIGH(100)
000706 940e 083c 	CALL __DIVW21
000708 01df      	MOVW R26,R30
000709 e0ea      	LDI  R30,LOW(10)
00070a e0f0      	LDI  R31,HIGH(10)
00070b 940e 0841 	CALL __MODW21
00070d 5de0      	SUBI R30,-LOW(48)
00070e 2fae      	MOV  R26,R30
00070f 940c 0650 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:74 WORDS
                 SUBOPT_0xC:
000711 e0ea      	LDI  R30,LOW(10)
000712 e0f0      	LDI  R31,HIGH(10)
000713 940e 083c 	CALL __DIVW21
000715 01df      	MOVW R26,R30
000716 e0ea      	LDI  R30,LOW(10)
000717 e0f0      	LDI  R31,HIGH(10)
000718 940e 0841 	CALL __MODW21
00071a 5de0      	SUBI R30,-LOW(48)
00071b 2fae      	MOV  R26,R30
00071c 940c 0650 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0xD:
00071e e0ea      	LDI  R30,LOW(10)
00071f e0f0      	LDI  R31,HIGH(10)
000720 940e 0841 	CALL __MODW21
000722 5de0      	SUBI R30,-LOW(48)
000723 2fae      	MOV  R26,R30
000724 940c 0650 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
000726 93ea      	ST   -Y,R30
000727 e0a1      	LDI  R26,LOW(1)
000728 940c 0627 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
00072a 91a0 0162 	LDS  R26,_SKB
00072c 91b0 0163 	LDS  R27,_SKB+1
00072e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x10:
00072f 91a0 0160 	LDS  R26,_SKR
000731 91b0 0161 	LDS  R27,_SKR+1
000733 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x11:
000734 91a0 0168 	LDS  R26,_k
000736 91b0 0169 	LDS  R27,_k+1
000738 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
000739 93e0 0164 	STS  _cmp,R30
00073b 93f0 0165 	STS  _cmp+1,R31
00073d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x13:
00073e 91a0 0164 	LDS  R26,_cmp
000740 91b0 0165 	LDS  R27,_cmp+1
000742 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x14:
000743 91e0 0164 	LDS  R30,_cmp
000745 91f0 0165 	LDS  R31,_cmp+1
000747 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
000748 dffa      	RCALL SUBOPT_0x14
000749 940e 0810 	CALL __ANEGW1
00074b 01df      	MOVW R26,R30
00074c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:97 WORDS
                 SUBOPT_0x16:
00074d 91e0 0166 	LDS  R30,_v
00074f 91f0 0167 	LDS  R31,_v+1
000751 93fa      	ST   -Y,R31
000752 93ea      	ST   -Y,R30
000753 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 39 TIMES, CODE SIZE REDUCTION:149 WORDS
                 SUBOPT_0x17:
000754 91e0 0166 	LDS  R30,_v
000756 91f0 0167 	LDS  R31,_v+1
000758 940e 0810 	CALL __ANEGW1
00075a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x18:
00075b 91a0 0166 	LDS  R26,_v
00075d 91b0 0167 	LDS  R27,_v+1
00075f e0e2      	LDI  R30,LOW(2)
000760 e0f0      	LDI  R31,HIGH(2)
000761 940e 083c 	CALL __DIVW21
000763 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x19:
000764 93fa      	ST   -Y,R31
000765 93ea      	ST   -Y,R30
000766 cfed      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1A:
000767 01df      	MOVW R26,R30
000768 e0e2      	LDI  R30,LOW(2)
000769 e0f0      	LDI  R31,HIGH(2)
00076a 940e 083c 	CALL __DIVW21
00076c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
00076d 93fa      	ST   -Y,R31
00076e 93ea      	ST   -Y,R30
00076f e0a0      	LDI  R26,LOW(0)
000770 e0b0      	LDI  R27,0
000771 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1C:
000772 93fa      	ST   -Y,R31
000773 93ea      	ST   -Y,R30
000774 91a0 0166 	LDS  R26,_v
000776 91b0 0167 	LDS  R27,_v+1
000778 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1D:
000779 93fa      	ST   -Y,R31
00077a 93ea      	ST   -Y,R30
00077b e0e0      	LDI  R30,LOW(0)
00077c e0f0      	LDI  R31,HIGH(0)
00077d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
00077e 93fa      	ST   -Y,R31
00077f 93ea      	ST   -Y,R30
000780 93fa      	ST   -Y,R31
000781 93ea      	ST   -Y,R30
000782 cfca      	RJMP SUBOPT_0x16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1F:
000783 91a0 0166 	LDS  R26,_v
000785 91b0 0167 	LDS  R27,_v+1
000787 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x20:
000788 93fa      	ST   -Y,R31
000789 93ea      	ST   -Y,R30
00078a cfc2      	RJMP SUBOPT_0x16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
00078b 91e0 0166 	LDS  R30,_v
00078d 91f0 0167 	LDS  R31,_v+1
00078f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x22:
000790 df59      	RCALL SUBOPT_0x6
000791 3dad      	CPI  R26,LOW(0xDD)
000792 e0e0      	LDI  R30,HIGH(0xDD)
000793 07be      	CPC  R27,R30
000794 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x23:
000795 91e0 0168 	LDS  R30,_k
000797 91f0 0169 	LDS  R31,_k+1
000799 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
00079a dffa      	RCALL SUBOPT_0x23
00079b 1bae      	SUB  R26,R30
00079c 0bbf      	SBC  R27,R31
00079d 93ba      	ST   -Y,R27
00079e 93aa      	ST   -Y,R26
00079f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
0007a0 df93      	RCALL SUBOPT_0x11
0007a1 dfe9      	RCALL SUBOPT_0x21
0007a2 1bea      	SUB  R30,R26
0007a3 0bfb      	SBC  R31,R27
0007a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
0007a5 e0e0      	LDI  R30,LOW(0)
0007a6 e0f0      	LDI  R31,HIGH(0)
0007a7 cfd1      	RJMP SUBOPT_0x1D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x27:
0007a8 940e 0141 	CALL _sensor
0007aa 940c 00b9 	JMP  _read_pixy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x28:
0007ac 940e 068a 	CALL __long_delay_G100
0007ae e3a0      	LDI  R26,LOW(48)
0007af 940c 068f 	JMP  __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x29:
0007b1 940e 0606 	CALL __lcd_write_data
0007b3 940c 068a 	JMP  __long_delay_G100
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x18 ;PORTB
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
0007b5 98c0      	cbi  __i2c_port,__scl_bit
0007b6 98c1      	cbi  __i2c_port,__sda_bit
0007b7 9ab8      	sbi  __i2c_dir,__scl_bit
0007b8 98b9      	cbi  __i2c_dir,__sda_bit
0007b9 c015      	rjmp __i2c_delay2
                 _i2c_start:
0007ba 98b9      	cbi  __i2c_dir,__sda_bit
0007bb 98b8      	cbi  __i2c_dir,__scl_bit
0007bc 27ee      	clr  r30
0007bd 0000      	nop
0007be 9bb1      	sbis __i2c_pin,__sda_bit
0007bf 9508      	ret
0007c0 9bb0      	sbis __i2c_pin,__scl_bit
0007c1 9508      	ret
0007c2 d004      	rcall __i2c_delay1
0007c3 9ab9      	sbi  __i2c_dir,__sda_bit
0007c4 d002      	rcall __i2c_delay1
0007c5 9ab8      	sbi  __i2c_dir,__scl_bit
0007c6 e0e1      	ldi  r30,1
                 __i2c_delay1:
0007c7 e06d      	ldi  r22,13
0007c8 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
0007c9 9ab9      	sbi  __i2c_dir,__sda_bit
0007ca 9ab8      	sbi  __i2c_dir,__scl_bit
0007cb d003      	rcall __i2c_delay2
0007cc 98b8      	cbi  __i2c_dir,__scl_bit
0007cd dff9      	rcall __i2c_delay1
0007ce 98b9      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
0007cf e16b      	ldi  r22,27
                 __i2c_delay2l:
0007d0 956a      	dec  r22
0007d1 f7f1      	brne __i2c_delay2l
0007d2 9508      	ret
                 _i2c_read:
0007d3 e078      	ldi  r23,8
                 __i2c_read0:
0007d4 98b8      	cbi  __i2c_dir,__scl_bit
0007d5 dff1      	rcall __i2c_delay1
                 __i2c_read3:
0007d6 9bb0      	sbis __i2c_pin,__scl_bit
0007d7 cffe      	rjmp __i2c_read3
0007d8 dfee      	rcall __i2c_delay1
0007d9 9488      	clc
0007da 99b1      	sbic __i2c_pin,__sda_bit
0007db 9408      	sec
0007dc 9ab8      	sbi  __i2c_dir,__scl_bit
0007dd dff1      	rcall __i2c_delay2
0007de 1fee      	rol  r30
0007df 957a      	dec  r23
0007e0 f799      	brne __i2c_read0
0007e1 2f7a      	mov  r23,r26
0007e2 2377      	tst  r23
0007e3 f411      	brne __i2c_read1
0007e4 98b9      	cbi  __i2c_dir,__sda_bit
0007e5 c001      	rjmp __i2c_read2
                 __i2c_read1:
0007e6 9ab9      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0007e7 dfdf      	rcall __i2c_delay1
0007e8 98b8      	cbi  __i2c_dir,__scl_bit
0007e9 dfe5      	rcall __i2c_delay2
0007ea 9ab8      	sbi  __i2c_dir,__scl_bit
0007eb dfdb      	rcall __i2c_delay1
0007ec 98b9      	cbi  __i2c_dir,__sda_bit
0007ed cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
0007ee e078      	ldi  r23,8
                 __i2c_write0:
0007ef 0faa      	lsl  r26
0007f0 f410      	brcc __i2c_write1
0007f1 98b9      	cbi  __i2c_dir,__sda_bit
0007f2 c001      	rjmp __i2c_write2
                 __i2c_write1:
0007f3 9ab9      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0007f4 dfda      	rcall __i2c_delay2
0007f5 98b8      	cbi  __i2c_dir,__scl_bit
0007f6 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
0007f7 9bb0      	sbis __i2c_pin,__scl_bit
0007f8 cffe      	rjmp __i2c_write3
0007f9 dfcd      	rcall __i2c_delay1
0007fa 9ab8      	sbi  __i2c_dir,__scl_bit
0007fb 957a      	dec  r23
0007fc f791      	brne __i2c_write0
0007fd 98b9      	cbi  __i2c_dir,__sda_bit
0007fe dfc8      	rcall __i2c_delay1
0007ff 98b8      	cbi  __i2c_dir,__scl_bit
000800 dfce      	rcall __i2c_delay2
000801 e0e1      	ldi  r30,1
000802 99b1      	sbic __i2c_pin,__sda_bit
000803 27ee      	clr  r30
000804 9ab8      	sbi  __i2c_dir,__scl_bit
000805 cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
000806 9610      	adiw r26,0
000807 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000808 ed80     +LDI R24 , LOW ( 0x7D0 )
000809 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00080a 9701     +SBIW R24 , 1
00080b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00080c 95a8      	wdr
00080d 9711      	sbiw r26,1
00080e f7c9      	brne __delay_ms0
                 __delay_ms1:
00080f 9508      	ret
                 
                 __ANEGW1:
000810 95f1      	NEG  R31
000811 95e1      	NEG  R30
000812 40f0      	SBCI R31,0
000813 9508      	RET
                 
                 __LSRB12:
000814 23ee      	TST  R30
000815 2e0e      	MOV  R0,R30
000816 2fea      	MOV  R30,R26
000817 f019      	BREQ __LSRB12R
                 __LSRB12L:
000818 95e6      	LSR  R30
000819 940a      	DEC  R0
00081a f7e9      	BRNE __LSRB12L
                 __LSRB12R:
00081b 9508      	RET
                 
                 __MULW12U:
00081c 9ffa      	MUL  R31,R26
00081d 2df0      	MOV  R31,R0
00081e 9feb      	MUL  R30,R27
00081f 0df0      	ADD  R31,R0
000820 9fea      	MUL  R30,R26
000821 2de0      	MOV  R30,R0
000822 0df1      	ADD  R31,R1
000823 9508      	RET
                 
                 __MULW12:
000824 d02a      	RCALL __CHKSIGNW
000825 dff6      	RCALL __MULW12U
000826 f40e      	BRTC __MULW121
000827 dfe8      	RCALL __ANEGW1
                 __MULW121:
000828 9508      	RET
                 
                 __DIVW21U:
000829 2400      	CLR  R0
00082a 2411      	CLR  R1
00082b e190      	LDI  R25,16
                 __DIVW21U1:
00082c 0faa      	LSL  R26
00082d 1fbb      	ROL  R27
00082e 1c00      	ROL  R0
00082f 1c11      	ROL  R1
000830 1a0e      	SUB  R0,R30
000831 0a1f      	SBC  R1,R31
000832 f418      	BRCC __DIVW21U2
000833 0e0e      	ADD  R0,R30
000834 1e1f      	ADC  R1,R31
000835 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000836 60a1      	SBR  R26,1
                 __DIVW21U3:
000837 959a      	DEC  R25
000838 f799      	BRNE __DIVW21U1
000839 01fd      	MOVW R30,R26
00083a 01d0      	MOVW R26,R0
00083b 9508      	RET
                 
                 __DIVW21:
00083c d012      	RCALL __CHKSIGNW
00083d dfeb      	RCALL __DIVW21U
00083e f40e      	BRTC __DIVW211
00083f dfd0      	RCALL __ANEGW1
                 __DIVW211:
000840 9508      	RET
                 
                 __MODW21:
000841 94e8      	CLT
000842 ffb7      	SBRS R27,7
000843 c004      	RJMP __MODW211
000844 95a0      	COM  R26
000845 95b0      	COM  R27
000846 9611      	ADIW R26,1
000847 9468      	SET
                 __MODW211:
000848 fdf7      	SBRC R31,7
000849 dfc6      	RCALL __ANEGW1
00084a dfde      	RCALL __DIVW21U
00084b 01fd      	MOVW R30,R26
00084c f40e      	BRTC __MODW212
00084d dfc2      	RCALL __ANEGW1
                 __MODW212:
00084e 9508      	RET
                 
                 __CHKSIGNW:
00084f 94e8      	CLT
000850 fff7      	SBRS R31,7
000851 c002      	RJMP __CHKSW1
000852 dfbd      	RCALL __ANEGW1
000853 9468      	SET
                 __CHKSW1:
000854 ffb7      	SBRS R27,7
000855 c006      	RJMP __CHKSW2
000856 95a0      	COM  R26
000857 95b0      	COM  R27
000858 9611      	ADIW R26,1
000859 f800      	BLD  R0,0
00085a 9403      	INC  R0
00085b fa00      	BST  R0,0
                 __CHKSW2:
00085c 9508      	RET
                 
                 __EEPROMRDW:
00085d 9611      	ADIW R26,1
00085e d002      	RCALL __EEPROMRDB
00085f 2ffe      	MOV  R31,R30
000860 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000861 99e1      	SBIC EECR,EEWE
000862 cffe      	RJMP __EEPROMRDB
000863 93ff      	PUSH R31
000864 b7ff      	IN   R31,SREG
000865 94f8      	CLI
000866 bbae      	OUT  EEARL,R26
000867 bbbf      	OUT  EEARH,R27
000868 9ae0      	SBI  EECR,EERE
000869 b3ed      	IN   R30,EEDR
00086a bfff      	OUT  SREG,R31
00086b 91ff      	POP  R31
00086c 9508      	RET
                 
                 __EEPROMWRW:
00086d d007      	RCALL __EEPROMWRB
00086e 9611      	ADIW R26,1
00086f 93ef      	PUSH R30
000870 2fef      	MOV  R30,R31
000871 d003      	RCALL __EEPROMWRB
000872 91ef      	POP  R30
000873 9711      	SBIW R26,1
000874 9508      	RET
                 
                 __EEPROMWRB:
000875 9be1      	SBIS EECR,EEWE
000876 c002      	RJMP __EEPROMWRB1
000877 95a8      	WDR
000878 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000879 b79f      	IN   R25,SREG
00087a 94f8      	CLI
00087b bbae      	OUT  EEARL,R26
00087c bbbf      	OUT  EEARH,R27
00087d 9ae0      	SBI  EECR,EERE
00087e b38d      	IN   R24,EEDR
00087f 17e8      	CP   R30,R24
000880 f019      	BREQ __EEPROMWRB0
000881 bbed      	OUT  EEDR,R30
000882 9ae2      	SBI  EECR,EEMWE
000883 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000884 bf9f      	OUT  SREG,R25
000885 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  27 r1 :   7 r2 :   0 r3 :   0 r4 :  10 r5 :   7 r6 :   5 r7 :   4 
r8 :  10 r9 :   6 r10:   5 r11:   1 r12:   6 r13:   2 r14:   0 r15:   0 
r16:   0 r17:  12 r18:   0 r19:   0 r20:   0 r21:   0 r22:   7 r23:   7 
r24:  15 r25:   8 r26: 298 r27: 117 r28:   7 r29:   1 r30: 406 r31: 173 
x  :   3 y  : 171 z  :   9 
Registers used: 26 out of 35 (74.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :  19 
adiw  :  12 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  10 
brge  :  28 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :  27 brmi  :   5 brne  :  38 brpl  :   0 brsh  :   0 brtc  :   3 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 295 
cbi   :  29 cbr   :   0 clc   :   1 clh   :   0 cli   :   3 cln   :   0 
clr   :   9 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 
cp    :  20 cpc   :  42 cpi   :  37 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  14 inc   :   1 jmp   :  38 ld    :  33 ldd   :  58 ldi   : 249 
lds   :  53 lpm   :   9 lsl   :   3 lsr   :   1 mov   :  20 movw  :  44 
mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   1 or    :   2 
ori   :   3 out   :  61 pop   :   4 push  :   4 rcall :  81 ret   :  56 
reti  :   0 rjmp  :  94 rol   :   5 ror   :   0 sbc   :   5 sbci  :   6 
sbi   :  30 sbic  :   3 sbis  :   7 sbiw  :  36 sbr   :   1 sbrc  :   2 
sbrs  :   3 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  61 std   :  23 sts   :  44 sub   :   5 subi  :  15 swap  :   2 
tst   :   7 wdr   :  17 
Instructions used: 69 out of 116 (59.5%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00110c   4332     32   4364   16384  26.6%
[.dseg] 0x000060 0x000180      0     32     32    1024   3.1%
[.eseg] 0x000000 0x000002      0      2      2     512   0.4%

Assembly complete, 0 errors, 12 warnings
